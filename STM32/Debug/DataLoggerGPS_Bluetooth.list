
DataLoggerGPS_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006390  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800692c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000300  20000078  080069a4  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000378  080069a4  00020378  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000153e4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b8d  00000000  00000000  0003548a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000908  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000007f0  00000000  00000000  00038920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00027b08  00000000  00000000  00039110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000dccb  00000000  00000000  00060c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ea15e  00000000  00000000  0006e8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00158a41  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000030b8  00000000  00000000  00158a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  0015bb4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  0015bc18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08006578 	.word	0x08006578

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08006578 	.word	0x08006578

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f963 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f806 	bl	8000624 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000618:	f004 f84e 	bl	80046b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_InitTick+0x54>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <HAL_InitTick+0x58>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f98b 	bl	800095e <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00e      	b.n	8000670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d80a      	bhi.n	800066e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295
 8000660:	f000 f945 	bl	80008ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_InitTick+0x5c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000010 	.word	0x20000010
 800067c:	20000004 	.word	0x20000004
 8000680:	20000000 	.word	0x20000000

08000684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_IncTick+0x20>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x24>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_IncTick+0x24>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000004 	.word	0x20000004
 80006a8:	200000a0 	.word	0x200000a0

080006ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_GetTick+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	200000a0 	.word	0x200000a0

080006c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006cc:	f7ff ffee 	bl	80006ac <HAL_GetTick>
 80006d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006dc:	d005      	beq.n	80006ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_Delay+0x44>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	4413      	add	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ea:	bf00      	nop
 80006ec:	f7ff ffde 	bl	80006ac <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d8f7      	bhi.n	80006ec <HAL_Delay+0x28>
  {
  }
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000004 	.word	0x20000004

0800070c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <NVIC_SetPriorityGrouping+0x40>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <NVIC_SetPriorityGrouping+0x44>)
 8000736:	4313      	orrs	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <NVIC_SetPriorityGrouping+0x40>)
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	60d3      	str	r3, [r2, #12]
}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00
 8000750:	05fa0000 	.word	0x05fa0000

08000754 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 021f 	and.w	r2, r3, #31
 8000780:	4907      	ldr	r1, [pc, #28]	; (80007a0 <NVIC_EnableIRQ+0x30>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	2001      	movs	r0, #1
 800078a:	fa00 f202 	lsl.w	r2, r0, r2
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <NVIC_DisableIRQ+0x30>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	3320      	adds	r3, #32
 80007c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	da0b      	bge.n	8000804 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <NVIC_SetPriority+0x4c>)
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	3b04      	subs	r3, #4
 80007fa:	0112      	lsls	r2, r2, #4
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	440b      	add	r3, r1
 8000800:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000802:	e009      	b.n	8000818 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <NVIC_SetPriority+0x50>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	e000e100 	.word	0xe000e100

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a4:	d301      	bcc.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00f      	b.n	80008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <SysTick_Config+0x40>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	210f      	movs	r1, #15
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <SysTick_Config+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SysTick_Config+0x40>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff13 	bl	800070c <NVIC_SetPriorityGrouping>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000900:	f7ff ff28 	bl	8000754 <NVIC_GetPriorityGrouping>
 8000904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff8e 	bl	800082c <NVIC_EncodePriority>
 8000910:	4602      	mov	r2, r0
 8000912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff1b 	bl	8000770 <NVIC_EnableIRQ>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff27 	bl	80007a4 <NVIC_DisableIRQ>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ff94 	bl	8000894 <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b04      	cmp	r3, #4
 8000984:	d106      	bne.n	8000994 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000992:	e005      	b.n	80009a0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800099a:	f023 0304 	bic.w	r3, r3, #4
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009b4:	f000 f802 	bl	80009bc <HAL_SYSTICK_Callback>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d004      	beq.n	80009e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e00c      	b.n	8000a02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2205      	movs	r2, #5
 80009ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f022 0201 	bic.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	e175      	b.n	8000d1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a30:	2201      	movs	r2, #1
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	f040 8164 	bne.w	8000d16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d003      	beq.n	8000a5e <HAL_GPIO_Init+0x4e>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b12      	cmp	r3, #18
 8000a5c:	d123      	bne.n	8000aa6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	08da      	lsrs	r2, r3, #3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3208      	adds	r2, #8
 8000a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	691a      	ldr	r2, [r3, #16]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	f003 0307 	and.w	r3, r3, #7
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	69b9      	ldr	r1, [r7, #24]
 8000aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f003 0203 	and.w	r2, r3, #3
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d00b      	beq.n	8000afa <HAL_GPIO_Init+0xea>
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d007      	beq.n	8000afa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aee:	2b11      	cmp	r3, #17
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b12      	cmp	r3, #18
 8000af8:	d130      	bne.n	8000b5c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b30:	2201      	movs	r2, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	f003 0201 	and.w	r2, r3, #1
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	2203      	movs	r2, #3
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	f000 80be 	beq.w	8000d16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b66      	ldr	r3, [pc, #408]	; (8000d34 <HAL_GPIO_Init+0x324>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a65      	ldr	r2, [pc, #404]	; (8000d34 <HAL_GPIO_Init+0x324>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <HAL_GPIO_Init+0x324>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000bb2:	4a61      	ldr	r2, [pc, #388]	; (8000d38 <HAL_GPIO_Init+0x328>)
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	220f      	movs	r2, #15
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a58      	ldr	r2, [pc, #352]	; (8000d3c <HAL_GPIO_Init+0x32c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d037      	beq.n	8000c4e <HAL_GPIO_Init+0x23e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a57      	ldr	r2, [pc, #348]	; (8000d40 <HAL_GPIO_Init+0x330>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d031      	beq.n	8000c4a <HAL_GPIO_Init+0x23a>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a56      	ldr	r2, [pc, #344]	; (8000d44 <HAL_GPIO_Init+0x334>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d02b      	beq.n	8000c46 <HAL_GPIO_Init+0x236>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a55      	ldr	r2, [pc, #340]	; (8000d48 <HAL_GPIO_Init+0x338>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d025      	beq.n	8000c42 <HAL_GPIO_Init+0x232>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a54      	ldr	r2, [pc, #336]	; (8000d4c <HAL_GPIO_Init+0x33c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d01f      	beq.n	8000c3e <HAL_GPIO_Init+0x22e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a53      	ldr	r2, [pc, #332]	; (8000d50 <HAL_GPIO_Init+0x340>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d019      	beq.n	8000c3a <HAL_GPIO_Init+0x22a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a52      	ldr	r2, [pc, #328]	; (8000d54 <HAL_GPIO_Init+0x344>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d013      	beq.n	8000c36 <HAL_GPIO_Init+0x226>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a51      	ldr	r2, [pc, #324]	; (8000d58 <HAL_GPIO_Init+0x348>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00d      	beq.n	8000c32 <HAL_GPIO_Init+0x222>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a50      	ldr	r2, [pc, #320]	; (8000d5c <HAL_GPIO_Init+0x34c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d007      	beq.n	8000c2e <HAL_GPIO_Init+0x21e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4f      	ldr	r2, [pc, #316]	; (8000d60 <HAL_GPIO_Init+0x350>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d101      	bne.n	8000c2a <HAL_GPIO_Init+0x21a>
 8000c26:	2309      	movs	r3, #9
 8000c28:	e012      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	e010      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c2e:	2308      	movs	r3, #8
 8000c30:	e00e      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c32:	2307      	movs	r3, #7
 8000c34:	e00c      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c36:	2306      	movs	r3, #6
 8000c38:	e00a      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e008      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c3e:	2304      	movs	r3, #4
 8000c40:	e006      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c42:	2303      	movs	r3, #3
 8000c44:	e004      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_GPIO_Init+0x240>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	69fa      	ldr	r2, [r7, #28]
 8000c52:	f002 0203 	and.w	r2, r2, #3
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	4093      	lsls	r3, r2
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c60:	4935      	ldr	r1, [pc, #212]	; (8000d38 <HAL_GPIO_Init+0x328>)
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c92:	4a34      	ldr	r2, [pc, #208]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cbc:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_GPIO_Init+0x354>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	f67f ae86 	bls.w	8000a30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3724      	adds	r7, #36	; 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020400 	.word	0x40020400
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020c00 	.word	0x40020c00
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40021400 	.word	0x40021400
 8000d54:	40021800 	.word	0x40021800
 8000d58:	40021c00 	.word	0x40021c00
 8000d5c:	40022000 	.word	0x40022000
 8000d60:	40022400 	.word	0x40022400
 8000d64:	40013c00 	.word	0x40013c00

08000d68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e0d9      	b.n	8000f38 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d84:	2201      	movs	r2, #1
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8000d8e:	683a      	ldr	r2, [r7, #0]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f040 80c9 	bne.w	8000f32 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2103      	movs	r1, #3
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	401a      	ands	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	08d2      	lsrs	r2, r2, #3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2103      	movs	r1, #3
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	401a      	ands	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	401a      	ands	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2103      	movs	r1, #3
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8000e20:	4a4b      	ldr	r2, [pc, #300]	; (8000f50 <HAL_GPIO_DeInit+0x1e8>)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a43      	ldr	r2, [pc, #268]	; (8000f54 <HAL_GPIO_DeInit+0x1ec>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d037      	beq.n	8000eba <HAL_GPIO_DeInit+0x152>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a42      	ldr	r2, [pc, #264]	; (8000f58 <HAL_GPIO_DeInit+0x1f0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d031      	beq.n	8000eb6 <HAL_GPIO_DeInit+0x14e>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a41      	ldr	r2, [pc, #260]	; (8000f5c <HAL_GPIO_DeInit+0x1f4>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d02b      	beq.n	8000eb2 <HAL_GPIO_DeInit+0x14a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a40      	ldr	r2, [pc, #256]	; (8000f60 <HAL_GPIO_DeInit+0x1f8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d025      	beq.n	8000eae <HAL_GPIO_DeInit+0x146>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a3f      	ldr	r2, [pc, #252]	; (8000f64 <HAL_GPIO_DeInit+0x1fc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d01f      	beq.n	8000eaa <HAL_GPIO_DeInit+0x142>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a3e      	ldr	r2, [pc, #248]	; (8000f68 <HAL_GPIO_DeInit+0x200>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d019      	beq.n	8000ea6 <HAL_GPIO_DeInit+0x13e>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a3d      	ldr	r2, [pc, #244]	; (8000f6c <HAL_GPIO_DeInit+0x204>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_DeInit+0x13a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a3c      	ldr	r2, [pc, #240]	; (8000f70 <HAL_GPIO_DeInit+0x208>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_DeInit+0x136>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a3b      	ldr	r2, [pc, #236]	; (8000f74 <HAL_GPIO_DeInit+0x20c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_DeInit+0x132>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a3a      	ldr	r2, [pc, #232]	; (8000f78 <HAL_GPIO_DeInit+0x210>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_DeInit+0x12e>
 8000e92:	2309      	movs	r3, #9
 8000e94:	e012      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000e96:	230a      	movs	r3, #10
 8000e98:	e010      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	e00e      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	e00c      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	e00a      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	e008      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e004      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e002      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e000      	b.n	8000ebc <HAL_GPIO_DeInit+0x154>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	f002 0203 	and.w	r2, r2, #3
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	4093      	lsls	r3, r2
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d132      	bne.n	8000f32 <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <HAL_GPIO_DeInit+0x1e8>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	43da      	mvns	r2, r3
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <HAL_GPIO_DeInit+0x1e8>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	491e      	ldr	r1, [pc, #120]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	491a      	ldr	r1, [pc, #104]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4917      	ldr	r1, [pc, #92]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4913      	ldr	r1, [pc, #76]	; (8000f7c <HAL_GPIO_DeInit+0x214>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	f67f af22 	bls.w	8000d84 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40021400 	.word	0x40021400
 8000f6c:	40021800 	.word	0x40021800
 8000f70:	40021c00 	.word	0x40021c00
 8000f74:	40022000 	.word	0x40022000
 8000f78:	40022400 	.word	0x40022400
 8000f7c:	40013c00 	.word	0x40013c00

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000f9c:	e003      	b.n	8000fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	041a      	lsls	r2, r3, #16
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	619a      	str	r2, [r3, #24]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_PWREx_EnableOverDrive+0x98>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a22      	ldr	r2, [pc, #136]	; (800104c <HAL_PWREx_EnableOverDrive+0x98>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_PWREx_EnableOverDrive+0x98>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe2:	f7ff fb63 	bl	80006ac <HAL_GetTick>
 8000fe6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fe8:	e009      	b.n	8000ffe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fea:	f7ff fb5f 	bl	80006ac <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ff8:	d901      	bls.n	8000ffe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e022      	b.n	8001044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100a:	d1ee      	bne.n	8000fea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001018:	f7ff fb48 	bl	80006ac <HAL_GetTick>
 800101c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800101e:	e009      	b.n	8001034 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001020:	f7ff fb44 	bl	80006ac <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800102e:	d901      	bls.n	8001034 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e007      	b.n	8001044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001040:	d1ee      	bne.n	8001020 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e25e      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8087 	beq.w	8001186 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001078:	4b96      	ldr	r3, [pc, #600]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b04      	cmp	r3, #4
 8001082:	d00c      	beq.n	800109e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001084:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b08      	cmp	r3, #8
 800108e:	d112      	bne.n	80010b6 <HAL_RCC_OscConfig+0x62>
 8001090:	4b90      	ldr	r3, [pc, #576]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109c:	d10b      	bne.n	80010b6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109e:	4b8d      	ldr	r3, [pc, #564]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06c      	beq.n	8001184 <HAL_RCC_OscConfig+0x130>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d168      	bne.n	8001184 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e238      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x7a>
 80010c0:	4b84      	ldr	r3, [pc, #528]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a83      	ldr	r2, [pc, #524]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e02e      	b.n	800112c <HAL_RCC_OscConfig+0xd8>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x9c>
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7e      	ldr	r2, [pc, #504]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b7c      	ldr	r3, [pc, #496]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7b      	ldr	r2, [pc, #492]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xd8>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0xc0>
 80010fa:	4b76      	ldr	r3, [pc, #472]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a75      	ldr	r2, [pc, #468]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a72      	ldr	r2, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xd8>
 8001114:	4b6f      	ldr	r3, [pc, #444]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a6e      	ldr	r2, [pc, #440]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b6c      	ldr	r3, [pc, #432]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a6b      	ldr	r2, [pc, #428]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff faba 	bl	80006ac <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fab6 	bl	80006ac <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1ec      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xe8>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115c:	f7ff faa6 	bl	80006ac <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff faa2 	bl	80006ac <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1d8      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0x110>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d069      	beq.n	8001266 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001192:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x190>
 80011aa:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x17a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e1ac      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b41      	ldr	r3, [pc, #260]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	493d      	ldr	r1, [pc, #244]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e040      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d023      	beq.n	8001234 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a38      	ldr	r2, [pc, #224]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fa58 	bl	80006ac <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fa54 	bl	80006ac <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e18a      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4929      	ldr	r1, [pc, #164]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
 8001232:	e018      	b.n	8001266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001240:	f7ff fa34 	bl	80006ac <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001248:	f7ff fa30 	bl	80006ac <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e166      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d038      	beq.n	80012e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d019      	beq.n	80012ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001286:	f7ff fa11 	bl	80006ac <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128e:	f7ff fa0d 	bl	80006ac <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e143      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80012a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x23a>
 80012ac:	e01a      	b.n	80012e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80012b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_RCC_OscConfig+0x280>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ba:	f7ff f9f7 	bl	80006ac <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff f9f3 	bl	80006ac <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d903      	bls.n	80012d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e129      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
 80012d4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b95      	ldr	r3, [pc, #596]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80012da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ee      	bne.n	80012c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a4 	beq.w	800143a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f2:	4b8f      	ldr	r3, [pc, #572]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10d      	bne.n	800131a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b8c      	ldr	r3, [pc, #560]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a8b      	ldr	r2, [pc, #556]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b89      	ldr	r3, [pc, #548]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131a:	4b86      	ldr	r3, [pc, #536]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d118      	bne.n	8001358 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001326:	4b83      	ldr	r3, [pc, #524]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a82      	ldr	r2, [pc, #520]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001332:	f7ff f9bb 	bl	80006ac <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7ff f9b7 	bl	80006ac <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b64      	cmp	r3, #100	; 0x64
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e0ed      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800134c:	4b79      	ldr	r3, [pc, #484]	; (8001534 <HAL_RCC_OscConfig+0x4e0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x31a>
 8001360:	4b73      	ldr	r3, [pc, #460]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a72      	ldr	r2, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	e02d      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x33c>
 8001376:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137a:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6713      	str	r3, [r2, #112]	; 0x70
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	4a6a      	ldr	r2, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
 800138e:	e01c      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b05      	cmp	r3, #5
 8001396:	d10c      	bne.n	80013b2 <HAL_RCC_OscConfig+0x35e>
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139c:	4a64      	ldr	r2, [pc, #400]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6713      	str	r3, [r2, #112]	; 0x70
 80013a4:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a8:	4a61      	ldr	r2, [pc, #388]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
 80013b0:	e00b      	b.n	80013ca <HAL_RCC_OscConfig+0x376>
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	4a5b      	ldr	r2, [pc, #364]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d015      	beq.n	80013fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff f96b 	bl	80006ac <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	e00a      	b.n	80013f0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013da:	f7ff f967 	bl	80006ac <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e09b      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80013f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0ee      	beq.n	80013da <HAL_RCC_OscConfig+0x386>
 80013fc:	e014      	b.n	8001428 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	f7ff f955 	bl	80006ac <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	e00a      	b.n	800141c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff f951 	bl	80006ac <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	f241 3288 	movw	r2, #5000	; 0x1388
 8001414:	4293      	cmp	r3, r2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e085      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141c:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ee      	bne.n	8001406 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d105      	bne.n	800143a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a3f      	ldr	r2, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d071      	beq.n	8001526 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d069      	beq.n	8001522 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d14b      	bne.n	80014ee <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a35      	ldr	r2, [pc, #212]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800145c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff f923 	bl	80006ac <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146a:	f7ff f91f 	bl	80006ac <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e055      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	019b      	lsls	r3, r3, #6
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	3b01      	subs	r3, #1
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	061b      	lsls	r3, r3, #24
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	071b      	lsls	r3, r3, #28
 80014b4:	491e      	ldr	r1, [pc, #120]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff f8f1 	bl	80006ac <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ce:	f7ff f8ed 	bl	80006ac <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e023      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x47a>
 80014ec:	e01b      	b.n	8001526 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 80014f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fa:	f7ff f8d7 	bl	80006ac <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff f8d3 	bl	80006ac <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e009      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x4dc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x4ae>
 8001520:	e001      	b.n	8001526 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0ce      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d910      	bls.n	8001580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 020f 	bic.w	r2, r3, #15
 8001566:	4964      	ldr	r1, [pc, #400]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b6      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d020      	beq.n	80015ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001598:	4b58      	ldr	r3, [pc, #352]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a57      	ldr	r2, [pc, #348]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b0:	4b52      	ldr	r3, [pc, #328]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a51      	ldr	r2, [pc, #324]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015bc:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	494c      	ldr	r1, [pc, #304]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d040      	beq.n	800165c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d115      	bne.n	800161a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e07d      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b40      	ldr	r3, [pc, #256]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e071      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160a:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e069      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800161a:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 0203 	bic.w	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4935      	ldr	r1, [pc, #212]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800162c:	f7ff f83e 	bl	80006ac <HAL_GetTick>
 8001630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	e00a      	b.n	800164a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff f83a 	bl	80006ac <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e051      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 020c 	and.w	r2, r3, #12
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	429a      	cmp	r2, r3
 800165a:	d1eb      	bne.n	8001634 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d210      	bcs.n	800168c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 020f 	bic.w	r2, r3, #15
 8001672:	4921      	ldr	r1, [pc, #132]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e030      	b.n	80016ee <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4915      	ldr	r1, [pc, #84]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	490d      	ldr	r1, [pc, #52]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ca:	f000 f81d 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4909      	ldr	r1, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	5ccb      	ldrb	r3, [r1, r3]
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_ClockConfig+0x1cc>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7fe ff9c 	bl	8000624 <HAL_InitTick>

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023c00 	.word	0x40023c00
 80016fc:	40023800 	.word	0x40023800
 8001700:	080066b8 	.word	0x080066b8
 8001704:	20000010 	.word	0x20000010

08001708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001720:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d00d      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x40>
 800172c:	2b08      	cmp	r3, #8
 800172e:	f200 80bd 	bhi.w	80018ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x34>
 8001736:	2b04      	cmp	r3, #4
 8001738:	d003      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x3a>
 800173a:	e0b7      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800173e:	60bb      	str	r3, [r7, #8]
       break;
 8001740:	e0b7      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001742:	4b61      	ldr	r3, [pc, #388]	; (80018c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001744:	60bb      	str	r3, [r7, #8]
      break;
 8001746:	e0b4      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001748:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001750:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001752:	4b5b      	ldr	r3, [pc, #364]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d04d      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175e:	4b58      	ldr	r3, [pc, #352]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	461a      	mov	r2, r3
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	ea02 0800 	and.w	r8, r2, r0
 8001776:	ea03 0901 	and.w	r9, r3, r1
 800177a:	4640      	mov	r0, r8
 800177c:	4649      	mov	r1, r9
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	014b      	lsls	r3, r1, #5
 8001788:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800178c:	0142      	lsls	r2, r0, #5
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	ebb0 0008 	subs.w	r0, r0, r8
 8001796:	eb61 0109 	sbc.w	r1, r1, r9
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	018b      	lsls	r3, r1, #6
 80017a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017a8:	0182      	lsls	r2, r0, #6
 80017aa:	1a12      	subs	r2, r2, r0
 80017ac:	eb63 0301 	sbc.w	r3, r3, r1
 80017b0:	f04f 0000 	mov.w	r0, #0
 80017b4:	f04f 0100 	mov.w	r1, #0
 80017b8:	00d9      	lsls	r1, r3, #3
 80017ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017be:	00d0      	lsls	r0, r2, #3
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	eb12 0208 	adds.w	r2, r2, r8
 80017c8:	eb43 0309 	adc.w	r3, r3, r9
 80017cc:	f04f 0000 	mov.w	r0, #0
 80017d0:	f04f 0100 	mov.w	r1, #0
 80017d4:	0259      	lsls	r1, r3, #9
 80017d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017da:	0250      	lsls	r0, r2, #9
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	f7fe fd90 	bl	8000310 <__aeabi_uldivmod>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4613      	mov	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e04a      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	461a      	mov	r2, r3
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	ea02 0400 	and.w	r4, r2, r0
 8001812:	ea03 0501 	and.w	r5, r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	014b      	lsls	r3, r1, #5
 8001824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001828:	0142      	lsls	r2, r0, #5
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	1b00      	subs	r0, r0, r4
 8001830:	eb61 0105 	sbc.w	r1, r1, r5
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	018b      	lsls	r3, r1, #6
 800183e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001842:	0182      	lsls	r2, r0, #6
 8001844:	1a12      	subs	r2, r2, r0
 8001846:	eb63 0301 	sbc.w	r3, r3, r1
 800184a:	f04f 0000 	mov.w	r0, #0
 800184e:	f04f 0100 	mov.w	r1, #0
 8001852:	00d9      	lsls	r1, r3, #3
 8001854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001858:	00d0      	lsls	r0, r2, #3
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	1912      	adds	r2, r2, r4
 8001860:	eb45 0303 	adc.w	r3, r5, r3
 8001864:	f04f 0000 	mov.w	r0, #0
 8001868:	f04f 0100 	mov.w	r1, #0
 800186c:	0299      	lsls	r1, r3, #10
 800186e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001872:	0290      	lsls	r0, r2, #10
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	461a      	mov	r2, r3
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	f7fe fd44 	bl	8000310 <__aeabi_uldivmod>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4613      	mov	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	3301      	adds	r3, #1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	60bb      	str	r3, [r7, #8]
      break;
 80018aa:	e002      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018ae:	60bb      	str	r3, [r7, #8]
      break;
 80018b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b2:	68bb      	ldr	r3, [r7, #8]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400
 80018c8:	007a1200 	.word	0x007a1200

080018cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000010 	.word	0x20000010

080018e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018e8:	f7ff fff0 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	0a9b      	lsrs	r3, r3, #10
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	4903      	ldr	r1, [pc, #12]	; (8001908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	080066c8 	.word	0x080066c8

0800190c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001910:	f7ff ffdc 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0b5b      	lsrs	r3, r3, #13
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4903      	ldr	r1, [pc, #12]	; (8001930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	080066c8 	.word	0x080066c8

08001934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d012      	beq.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800195c:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001962:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001966:	6093      	str	r3, [r2, #8]
 8001968:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001970:	4964      	ldr	r1, [pc, #400]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800197e:	2301      	movs	r3, #1
 8001980:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d017      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800198e:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	4959      	ldr	r1, [pc, #356]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ac:	d101      	bne.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d017      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	494a      	ldr	r1, [pc, #296]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e8:	d101      	bne.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 808b 	beq.w	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a39      	ldr	r2, [pc, #228]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b37      	ldr	r3, [pc, #220]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a34      	ldr	r2, [pc, #208]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3c:	f7fe fe36 	bl	80006ac <HAL_GetTick>
 8001a40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7fe fe32 	bl	80006ac <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e38d      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a56:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d035      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d02e      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	4a1a      	ldr	r2, [pc, #104]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d014      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7fe fdfa 	bl	80006ac <HAL_GetTick>
 8001ab8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7fe fdf6 	bl	80006ac <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e34f      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ee      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001aea:	d111      	bne.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001afa:	400b      	ands	r3, r1
 8001afc:	4901      	ldr	r1, [pc, #4]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	0ffffcff 	.word	0x0ffffcff
 8001b10:	4bb3      	ldr	r3, [pc, #716]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4ab2      	ldr	r2, [pc, #712]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b1a:	6093      	str	r3, [r2, #8]
 8001b1c:	4bb0      	ldr	r3, [pc, #704]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b28:	49ad      	ldr	r1, [pc, #692]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d010      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b3a:	4ba9      	ldr	r3, [pc, #676]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b40:	4aa7      	ldr	r2, [pc, #668]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b4a:	4ba5      	ldr	r3, [pc, #660]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	49a2      	ldr	r1, [pc, #648]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00a      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b68:	4b9d      	ldr	r3, [pc, #628]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b76:	499a      	ldr	r1, [pc, #616]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b8a:	4b95      	ldr	r3, [pc, #596]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b98:	4991      	ldr	r1, [pc, #580]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00a      	beq.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bac:	4b8c      	ldr	r3, [pc, #560]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bba:	4989      	ldr	r1, [pc, #548]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00a      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001bce:	4b84      	ldr	r3, [pc, #528]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4980      	ldr	r1, [pc, #512]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00a      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bf0:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4978      	ldr	r1, [pc, #480]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c12:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	f023 020c 	bic.w	r2, r3, #12
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c20:	496f      	ldr	r1, [pc, #444]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00a      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c34:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4967      	ldr	r1, [pc, #412]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00a      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c56:	4b62      	ldr	r3, [pc, #392]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c64:	495e      	ldr	r1, [pc, #376]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00a      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	4956      	ldr	r1, [pc, #344]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001cbc:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	4945      	ldr	r1, [pc, #276]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	493c      	ldr	r1, [pc, #240]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00a      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d0e:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d011      	beq.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d30:	492b      	ldr	r1, [pc, #172]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d40:	d101      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d70:	491b      	ldr	r1, [pc, #108]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00b      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d94:	4912      	ldr	r1, [pc, #72]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db8:	4909      	ldr	r1, [pc, #36]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00f      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	e002      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	4985      	ldr	r1, [pc, #532]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00b      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001df8:	4b80      	ldr	r3, [pc, #512]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e08:	497c      	ldr	r1, [pc, #496]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d005      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e1e:	f040 80d6 	bne.w	8001fce <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fc3d 	bl	80006ac <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e34:	e008      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e36:	f7fe fc39 	bl	80006ac <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	; 0x64
 8001e42:	d901      	bls.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e194      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e48:	4b6c      	ldr	r3, [pc, #432]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d021      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d11d      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e68:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e6e:	0c1b      	lsrs	r3, r3, #16
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e76:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e7c:	0e1b      	lsrs	r3, r3, #24
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	019a      	lsls	r2, r3, #6
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	071b      	lsls	r3, r3, #28
 8001e9c:	4957      	ldr	r1, [pc, #348]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d02e      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ece:	d129      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed6:	0c1b      	lsrs	r3, r3, #16
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee4:	0f1b      	lsrs	r3, r3, #28
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	019a      	lsls	r2, r3, #6
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	431a      	orrs	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	071b      	lsls	r3, r3, #28
 8001f04:	493d      	ldr	r1, [pc, #244]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f12:	f023 021f 	bic.w	r2, r3, #31
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	4937      	ldr	r1, [pc, #220]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01d      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f36:	0e1b      	lsrs	r3, r3, #24
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f3e:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f44:	0f1b      	lsrs	r3, r3, #28
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	019a      	lsls	r2, r3, #6
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	071b      	lsls	r3, r3, #28
 8001f64:	4925      	ldr	r1, [pc, #148]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d011      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	019a      	lsls	r2, r3, #6
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	041b      	lsls	r3, r3, #16
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	061b      	lsls	r3, r3, #24
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	071b      	lsls	r3, r3, #28
 8001f94:	4919      	ldr	r1, [pc, #100]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fb80 	bl	80006ac <HAL_GetTick>
 8001fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fb0:	f7fe fb7c 	bl	80006ac <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0d7      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 80cd 	bne.w	8002170 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe2:	f7fe fb63 	bl	80006ac <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fea:	f7fe fb5f 	bl	80006ac <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b64      	cmp	r3, #100	; 0x64
 8001ff6:	d903      	bls.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0ba      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001ffc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800200c:	d0ed      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02e      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d12a      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002044:	4b4d      	ldr	r3, [pc, #308]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	0f1b      	lsrs	r3, r3, #28
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	019a      	lsls	r2, r3, #6
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	061b      	lsls	r3, r3, #24
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	071b      	lsls	r3, r3, #28
 800206a:	4944      	ldr	r1, [pc, #272]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002078:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	493d      	ldr	r1, [pc, #244]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d022      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800209c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020a0:	d11d      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a8:	0e1b      	lsrs	r3, r3, #24
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020b0:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	0f1b      	lsrs	r3, r3, #28
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	019a      	lsls	r2, r3, #6
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	061b      	lsls	r3, r3, #24
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	071b      	lsls	r3, r3, #28
 80020d6:	4929      	ldr	r1, [pc, #164]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d028      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	0e1b      	lsrs	r3, r3, #24
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020f8:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	019a      	lsls	r2, r3, #6
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	071b      	lsls	r3, r3, #28
 800211e:	4917      	ldr	r1, [pc, #92]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	4911      	ldr	r1, [pc, #68]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002148:	f7fe fab0 	bl	80006ac <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002150:	f7fe faac 	bl	80006ac <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e007      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800216a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800216e:	d1ef      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800

08002180 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e043      	b.n	800221a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f002 fdf0 	bl	8004d8c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fb99 	bl	80028fc <UART_SetConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e022      	b.n	800221a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fe0d 	bl	8002dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002200:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fe94 	bl	8002f40 <UART_CheckIdleState>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_UART_DeInit>:
  * @brief DeInitializes the UART peripheral
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e02a      	b.n	800228a <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f002 fdd9 	bl	8004e1c <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_UART_Transmit_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002292:	b480      	push	{r7}
 8002294:	b085      	sub	sp, #20
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	4613      	mov	r3, r2
 800229e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d132      	bne.n	8002312 <HAL_UART_Transmit_IT+0x80>
  {
    if((pData == NULL ) || (Size == 0U))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_UART_Transmit_IT+0x26>
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e02b      	b.n	8002314 <HAL_UART_Transmit_IT+0x82>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Transmit_IT+0x38>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e024      	b.n	8002314 <HAL_UART_Transmit_IT+0x82>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	88fa      	ldrh	r2, [r7, #6]
 80022e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2221      	movs	r2, #33	; 0x21
 80022f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800230c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_UART_Transmit_IT+0x82>
  }
  else
  {
    return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_UART_Receive_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	d172      	bne.n	8002420 <HAL_UART_Receive_IT+0x100>
  {
    if((pData == NULL ) || (Size == 0U))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_UART_Receive_IT+0x26>
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06b      	b.n	8002422 <HAL_UART_Receive_IT+0x102>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_UART_Receive_IT+0x38>
 8002354:	2302      	movs	r3, #2
 8002356:	e064      	b.n	8002422 <HAL_UART_Receive_IT+0x102>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d10e      	bne.n	800239e <HAL_UART_Receive_IT+0x7e>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_UART_Receive_IT+0x74>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800238e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002392:	e028      	b.n	80023e6 <HAL_UART_Receive_IT+0xc6>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	22ff      	movs	r2, #255	; 0xff
 8002398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800239c:	e023      	b.n	80023e6 <HAL_UART_Receive_IT+0xc6>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_UART_Receive_IT+0xa2>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Receive_IT+0x98>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023b6:	e016      	b.n	80023e6 <HAL_UART_Receive_IT+0xc6>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	227f      	movs	r2, #127	; 0x7f
 80023bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023c0:	e011      	b.n	80023e6 <HAL_UART_Receive_IT+0xc6>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ca:	d10c      	bne.n	80023e6 <HAL_UART_Receive_IT+0xc6>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_UART_Receive_IT+0xbe>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	227f      	movs	r2, #127	; 0x7f
 80023d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023dc:	e003      	b.n	80023e6 <HAL_UART_Receive_IT+0xc6>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	223f      	movs	r2, #63	; 0x3f
 80023e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2222      	movs	r2, #34	; 0x22
 80023f0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800241a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_UART_IRQHandler>:
  * @brief This function handles UART interrupt request.
  * @param huart uart handle
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_UART_IRQHandler+0x4a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_UART_IRQHandler+0x4a>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_UART_IRQHandler+0x4a>
    {
      UART_Receive_IT(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f9b9 	bl	80027ea <UART_Receive_IT>
      return;
 8002478:	e0d9      	b.n	800262e <HAL_UART_IRQHandler+0x1fe>
    }
  }

  /* If some errors occur */
  if(   (errorflags != RESET)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80b9 	beq.w	80025f4 <HAL_UART_IRQHandler+0x1c4>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d105      	bne.n	8002498 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80ae 	beq.w	80025f4 <HAL_UART_IRQHandler+0x1c4>
  {

    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00e      	beq.n	80024c0 <HAL_UART_IRQHandler+0x90>
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d009      	beq.n	80024c0 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00e      	beq.n	80024e8 <HAL_UART_IRQHandler+0xb8>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2202      	movs	r2, #2
 80024da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e0:	f043 0204 	orr.w	r2, r3, #4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00e      	beq.n	8002510 <HAL_UART_IRQHandler+0xe0>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2204      	movs	r2, #4
 8002502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002508:	f043 0202 	orr.w	r2, r3, #2
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d013      	beq.n	8002542 <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2208      	movs	r2, #8
 8002534:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253a:	f043 0208 	orr.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d070      	beq.n	800262c <HAL_UART_IRQHandler+0x1fc>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_UART_IRQHandler+0x134>
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_UART_IRQHandler+0x134>
      {
        UART_Receive_IT(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f943 	bl	80027ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <HAL_UART_IRQHandler+0x14e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800257a:	2b00      	cmp	r3, #0
 800257c:	d031      	beq.n	80025e2 <HAL_UART_IRQHandler+0x1b2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f99e 	bl	80028c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d023      	beq.n	80025da <HAL_UART_IRQHandler+0x1aa>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d013      	beq.n	80025d2 <HAL_UART_IRQHandler+0x1a2>
          {
            /* Set the UART DMA Abort callback :
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ae:	4a21      	ldr	r2, [pc, #132]	; (8002634 <HAL_UART_IRQHandler+0x204>)
 80025b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fa07 	bl	80009ca <HAL_DMA_Abort_IT>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_UART_IRQHandler+0x1c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80025cc:	4610      	mov	r0, r2
 80025ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d0:	e00e      	b.n	80025f0 <HAL_UART_IRQHandler+0x1c0>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f890 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	e00a      	b.n	80025f0 <HAL_UART_IRQHandler+0x1c0>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f88c 	bl	80026f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e0:	e006      	b.n	80025f0 <HAL_UART_IRQHandler+0x1c0>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f888 	bl	80026f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80025ee:	e01d      	b.n	800262c <HAL_UART_IRQHandler+0x1fc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f0:	bf00      	nop
    return;
 80025f2:	e01b      	b.n	800262c <HAL_UART_IRQHandler+0x1fc>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_UART_IRQHandler+0x1e0>
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_UART_IRQHandler+0x1e0>
  {
    UART_Transmit_IT(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f87f 	bl	800270c <UART_Transmit_IT>
    return;
 800260e:	e00e      	b.n	800262e <HAL_UART_IRQHandler+0x1fe>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_UART_IRQHandler+0x1fe>
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_UART_IRQHandler+0x1fe>
  {
    UART_EndTransmit_IT(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f8c8 	bl	80027ba <UART_EndTransmit_IT>
    return;
 800262a:	e000      	b.n	800262e <HAL_UART_IRQHandler+0x1fe>
    return;
 800262c:	bf00      	nop
  }

}
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	080026cd 	.word	0x080026cd

08002638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002648:	e02c      	b.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d028      	beq.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <UART_WaitOnFlagUntilTimeout+0x30>
 8002658:	f7fe f828 	bl	80006ac <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	429a      	cmp	r2, r3
 8002666:	d81d      	bhi.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002676:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e00f      	b.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d0c3      	beq.n	800264a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f804 	bl	80026f8 <HAL_UART_ErrorCallback>
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b21      	cmp	r3, #33	; 0x21
 800271e:	d145      	bne.n	80027ac <UART_Transmit_IT+0xa0>
  {

    if(huart->TxXferCount == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800273a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800274a:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	e02e      	b.n	80027ae <UART_Transmit_IT+0xa2>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d114      	bne.n	8002784 <UART_Transmit_IT+0x78>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d110      	bne.n	8002784 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	1c9a      	adds	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	64da      	str	r2, [r3, #76]	; 0x4c
 8002782:	e008      	b.n	8002796 <UART_Transmit_IT+0x8a>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002788:	1c59      	adds	r1, r3, #1
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	64d1      	str	r1, [r2, #76]	; 0x4c
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
      }

      huart->TxXferCount--;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <UART_Transmit_IT+0xa2>
    }
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027d0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f001 fe26 	bl	800442c <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027ea:	b590      	push	{r4, r7, lr}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027f8:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b22      	cmp	r3, #34	; 0x22
 8002804:	d14f      	bne.n	80028a6 <UART_Receive_IT+0xbc>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d115      	bne.n	800283c <UART_Receive_IT+0x52>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	b29a      	uxth	r2, r3
 8002826:	89fb      	ldrh	r3, [r7, #14]
 8002828:	4013      	ands	r3, r2
 800282a:	b29a      	uxth	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	1c9a      	adds	r2, r3, #2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
 800283a:	e00d      	b.n	8002858 <UART_Receive_IT+0x6e>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	b2d9      	uxtb	r1, r3
 8002844:	89fb      	ldrh	r3, [r7, #14]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	1c5c      	adds	r4, r3, #1
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	6544      	str	r4, [r0, #84]	; 0x54
 8002852:	400a      	ands	r2, r1
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29b      	uxth	r3, r3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4619      	mov	r1, r3
 8002868:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 800286c:	2b00      	cmp	r3, #0
 800286e:	d118      	bne.n	80028a2 <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800287e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f001 fda3 	bl	80043e4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e00a      	b.n	80028b8 <UART_Receive_IT+0xce>
    }

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e008      	b.n	80028b8 <UART_Receive_IT+0xce>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0208 	orr.w	r2, r2, #8
 80028b4:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}

080028c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002908:	2310      	movs	r3, #16
 800290a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 800290c:	2300      	movs	r3, #0
 800290e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002910:	2300      	movs	r3, #0
 8002912:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4bb5      	ldr	r3, [pc, #724]	; (8002c0c <UART_SetConfig+0x310>)
 8002938:	4013      	ands	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	430b      	orrs	r3, r1
 8002942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4aa4      	ldr	r2, [pc, #656]	; (8002c10 <UART_SetConfig+0x314>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d11f      	bne.n	80029c4 <UART_SetConfig+0xc8>
 8002984:	4ba3      	ldr	r3, [pc, #652]	; (8002c14 <UART_SetConfig+0x318>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b03      	cmp	r3, #3
 8002990:	f200 8139 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <UART_SetConfig+0xa0>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029b3 	.word	0x080029b3
 80029a8:	080029bf 	.word	0x080029bf
 80029ac:	2301      	movs	r3, #1
 80029ae:	75fb      	strb	r3, [r7, #23]
 80029b0:	e129      	b.n	8002c06 <UART_SetConfig+0x30a>
 80029b2:	2302      	movs	r3, #2
 80029b4:	75fb      	strb	r3, [r7, #23]
 80029b6:	e126      	b.n	8002c06 <UART_SetConfig+0x30a>
 80029b8:	2304      	movs	r3, #4
 80029ba:	75fb      	strb	r3, [r7, #23]
 80029bc:	e123      	b.n	8002c06 <UART_SetConfig+0x30a>
 80029be:	2308      	movs	r3, #8
 80029c0:	75fb      	strb	r3, [r7, #23]
 80029c2:	e120      	b.n	8002c06 <UART_SetConfig+0x30a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a93      	ldr	r2, [pc, #588]	; (8002c18 <UART_SetConfig+0x31c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d130      	bne.n	8002a30 <UART_SetConfig+0x134>
 80029ce:	4b91      	ldr	r3, [pc, #580]	; (8002c14 <UART_SetConfig+0x318>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	f200 8114 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <UART_SetConfig+0xe8>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002a19 	.word	0x08002a19
 80029e8:	08002c07 	.word	0x08002c07
 80029ec:	08002c07 	.word	0x08002c07
 80029f0:	08002c07 	.word	0x08002c07
 80029f4:	08002a25 	.word	0x08002a25
 80029f8:	08002c07 	.word	0x08002c07
 80029fc:	08002c07 	.word	0x08002c07
 8002a00:	08002c07 	.word	0x08002c07
 8002a04:	08002a1f 	.word	0x08002a1f
 8002a08:	08002c07 	.word	0x08002c07
 8002a0c:	08002c07 	.word	0x08002c07
 8002a10:	08002c07 	.word	0x08002c07
 8002a14:	08002a2b 	.word	0x08002a2b
 8002a18:	2300      	movs	r3, #0
 8002a1a:	75fb      	strb	r3, [r7, #23]
 8002a1c:	e0f3      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	75fb      	strb	r3, [r7, #23]
 8002a22:	e0f0      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a24:	2304      	movs	r3, #4
 8002a26:	75fb      	strb	r3, [r7, #23]
 8002a28:	e0ed      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	75fb      	strb	r3, [r7, #23]
 8002a2e:	e0ea      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a79      	ldr	r2, [pc, #484]	; (8002c1c <UART_SetConfig+0x320>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d11f      	bne.n	8002a7a <UART_SetConfig+0x17e>
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <UART_SetConfig+0x318>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a44:	2b30      	cmp	r3, #48	; 0x30
 8002a46:	d015      	beq.n	8002a74 <UART_SetConfig+0x178>
 8002a48:	2b30      	cmp	r3, #48	; 0x30
 8002a4a:	f200 80dc 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d00a      	beq.n	8002a68 <UART_SetConfig+0x16c>
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	f200 80d7 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <UART_SetConfig+0x166>
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d006      	beq.n	8002a6e <UART_SetConfig+0x172>
 8002a60:	e0d1      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
 8002a66:	e0ce      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	75fb      	strb	r3, [r7, #23]
 8002a6c:	e0cb      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a6e:	2304      	movs	r3, #4
 8002a70:	75fb      	strb	r3, [r7, #23]
 8002a72:	e0c8      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a74:	2308      	movs	r3, #8
 8002a76:	75fb      	strb	r3, [r7, #23]
 8002a78:	e0c5      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a68      	ldr	r2, [pc, #416]	; (8002c20 <UART_SetConfig+0x324>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d11f      	bne.n	8002ac4 <UART_SetConfig+0x1c8>
 8002a84:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <UART_SetConfig+0x318>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8002a90:	d015      	beq.n	8002abe <UART_SetConfig+0x1c2>
 8002a92:	2bc0      	cmp	r3, #192	; 0xc0
 8002a94:	f200 80b7 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 8002a98:	2b80      	cmp	r3, #128	; 0x80
 8002a9a:	d00a      	beq.n	8002ab2 <UART_SetConfig+0x1b6>
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	f200 80b2 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <UART_SetConfig+0x1b0>
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d006      	beq.n	8002ab8 <UART_SetConfig+0x1bc>
 8002aaa:	e0ac      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002aac:	2300      	movs	r3, #0
 8002aae:	75fb      	strb	r3, [r7, #23]
 8002ab0:	e0a9      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	75fb      	strb	r3, [r7, #23]
 8002ab6:	e0a6      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	75fb      	strb	r3, [r7, #23]
 8002abc:	e0a3      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	75fb      	strb	r3, [r7, #23]
 8002ac2:	e0a0      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a56      	ldr	r2, [pc, #344]	; (8002c24 <UART_SetConfig+0x328>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d124      	bne.n	8002b18 <UART_SetConfig+0x21c>
 8002ace:	4b51      	ldr	r3, [pc, #324]	; (8002c14 <UART_SetConfig+0x318>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002adc:	d019      	beq.n	8002b12 <UART_SetConfig+0x216>
 8002ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae2:	f200 8090 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 8002ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aea:	d00c      	beq.n	8002b06 <UART_SetConfig+0x20a>
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	f200 8089 	bhi.w	8002c06 <UART_SetConfig+0x30a>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <UART_SetConfig+0x204>
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d006      	beq.n	8002b0c <UART_SetConfig+0x210>
 8002afe:	e082      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]
 8002b04:	e07f      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b06:	2302      	movs	r3, #2
 8002b08:	75fb      	strb	r3, [r7, #23]
 8002b0a:	e07c      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	75fb      	strb	r3, [r7, #23]
 8002b10:	e079      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b12:	2308      	movs	r3, #8
 8002b14:	75fb      	strb	r3, [r7, #23]
 8002b16:	e076      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a42      	ldr	r2, [pc, #264]	; (8002c28 <UART_SetConfig+0x32c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d122      	bne.n	8002b68 <UART_SetConfig+0x26c>
 8002b22:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <UART_SetConfig+0x318>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b30:	d017      	beq.n	8002b62 <UART_SetConfig+0x266>
 8002b32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b36:	d866      	bhi.n	8002c06 <UART_SetConfig+0x30a>
 8002b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b3c:	d00b      	beq.n	8002b56 <UART_SetConfig+0x25a>
 8002b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b42:	d860      	bhi.n	8002c06 <UART_SetConfig+0x30a>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <UART_SetConfig+0x254>
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	d006      	beq.n	8002b5c <UART_SetConfig+0x260>
 8002b4e:	e05a      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b50:	2301      	movs	r3, #1
 8002b52:	75fb      	strb	r3, [r7, #23]
 8002b54:	e057      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b56:	2302      	movs	r3, #2
 8002b58:	75fb      	strb	r3, [r7, #23]
 8002b5a:	e054      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	75fb      	strb	r3, [r7, #23]
 8002b60:	e051      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b62:	2308      	movs	r3, #8
 8002b64:	75fb      	strb	r3, [r7, #23]
 8002b66:	e04e      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a2f      	ldr	r2, [pc, #188]	; (8002c2c <UART_SetConfig+0x330>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d122      	bne.n	8002bb8 <UART_SetConfig+0x2bc>
 8002b72:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <UART_SetConfig+0x318>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b80:	d017      	beq.n	8002bb2 <UART_SetConfig+0x2b6>
 8002b82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b86:	d83e      	bhi.n	8002c06 <UART_SetConfig+0x30a>
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d00b      	beq.n	8002ba6 <UART_SetConfig+0x2aa>
 8002b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b92:	d838      	bhi.n	8002c06 <UART_SetConfig+0x30a>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <UART_SetConfig+0x2a4>
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d006      	beq.n	8002bac <UART_SetConfig+0x2b0>
 8002b9e:	e032      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	75fb      	strb	r3, [r7, #23]
 8002ba4:	e02f      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	75fb      	strb	r3, [r7, #23]
 8002baa:	e02c      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002bac:	2304      	movs	r3, #4
 8002bae:	75fb      	strb	r3, [r7, #23]
 8002bb0:	e029      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	75fb      	strb	r3, [r7, #23]
 8002bb6:	e026      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1c      	ldr	r2, [pc, #112]	; (8002c30 <UART_SetConfig+0x334>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d138      	bne.n	8002c34 <UART_SetConfig+0x338>
 8002bc2:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <UART_SetConfig+0x318>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bd0:	d017      	beq.n	8002c02 <UART_SetConfig+0x306>
 8002bd2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bd6:	d816      	bhi.n	8002c06 <UART_SetConfig+0x30a>
 8002bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bdc:	d00b      	beq.n	8002bf6 <UART_SetConfig+0x2fa>
 8002bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be2:	d810      	bhi.n	8002c06 <UART_SetConfig+0x30a>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <UART_SetConfig+0x2f4>
 8002be8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bec:	d006      	beq.n	8002bfc <UART_SetConfig+0x300>
 8002bee:	e00a      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75fb      	strb	r3, [r7, #23]
 8002bf4:	e007      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	75fb      	strb	r3, [r7, #23]
 8002bfa:	e004      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	75fb      	strb	r3, [r7, #23]
 8002c00:	e001      	b.n	8002c06 <UART_SetConfig+0x30a>
 8002c02:	2308      	movs	r3, #8
 8002c04:	75fb      	strb	r3, [r7, #23]
 8002c06:	bf00      	nop
 8002c08:	e015      	b.n	8002c36 <UART_SetConfig+0x33a>
 8002c0a:	bf00      	nop
 8002c0c:	efff69f3 	.word	0xefff69f3
 8002c10:	40011000 	.word	0x40011000
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	40004800 	.word	0x40004800
 8002c20:	40004c00 	.word	0x40004c00
 8002c24:	40005000 	.word	0x40005000
 8002c28:	40011400 	.word	0x40011400
 8002c2c:	40007800 	.word	0x40007800
 8002c30:	40007c00 	.word	0x40007c00
 8002c34:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3e:	d16c      	bne.n	8002d1a <UART_SetConfig+0x41e>
  {
    switch (clocksource)
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d854      	bhi.n	8002cf0 <UART_SetConfig+0x3f4>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <UART_SetConfig+0x350>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08002c8d 	.word	0x08002c8d
 8002c54:	08002ca9 	.word	0x08002ca9
 8002c58:	08002cf1 	.word	0x08002cf1
 8002c5c:	08002cbf 	.word	0x08002cbf
 8002c60:	08002cf1 	.word	0x08002cf1
 8002c64:	08002cf1 	.word	0x08002cf1
 8002c68:	08002cf1 	.word	0x08002cf1
 8002c6c:	08002cdb 	.word	0x08002cdb
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c70:	f7fe fe38 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002c74:	4603      	mov	r3, r0
 8002c76:	005a      	lsls	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	085b      	lsrs	r3, r3, #1
 8002c7e:	441a      	add	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	82bb      	strh	r3, [r7, #20]
      break;
 8002c8a:	e034      	b.n	8002cf6 <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c8c:	f7fe fe3e 	bl	800190c <HAL_RCC_GetPCLK2Freq>
 8002c90:	4603      	mov	r3, r0
 8002c92:	005a      	lsls	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	441a      	add	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	82bb      	strh	r3, [r7, #20]
      break;
 8002ca6:	e026      	b.n	8002cf6 <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	085a      	lsrs	r2, r3, #1
 8002cae:	4b51      	ldr	r3, [pc, #324]	; (8002df4 <UART_SetConfig+0x4f8>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6852      	ldr	r2, [r2, #4]
 8002cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cba:	82bb      	strh	r3, [r7, #20]
      break;
 8002cbc:	e01b      	b.n	8002cf6 <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cbe:	f7fe fd23 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	005a      	lsls	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	441a      	add	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	82bb      	strh	r3, [r7, #20]
      break;
 8002cd8:	e00d      	b.n	8002cf6 <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	82bb      	strh	r3, [r7, #20]
      break;
 8002cee:	e002      	b.n	8002cf6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	74fb      	strb	r3, [r7, #19]
      break;
 8002cf4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002cf6:	8abb      	ldrh	r3, [r7, #20]
 8002cf8:	f023 030f 	bic.w	r3, r3, #15
 8002cfc:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cfe:	8abb      	ldrh	r3, [r7, #20]
 8002d00:	105b      	asrs	r3, r3, #1
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	897a      	ldrh	r2, [r7, #10]
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	e067      	b.n	8002dea <UART_SetConfig+0x4ee>
  }
  else
  {
    switch (clocksource)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d861      	bhi.n	8002de4 <UART_SetConfig+0x4e8>
 8002d20:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <UART_SetConfig+0x42c>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d4d 	.word	0x08002d4d
 8002d2c:	08002d6d 	.word	0x08002d6d
 8002d30:	08002d8d 	.word	0x08002d8d
 8002d34:	08002de5 	.word	0x08002de5
 8002d38:	08002da9 	.word	0x08002da9
 8002d3c:	08002de5 	.word	0x08002de5
 8002d40:	08002de5 	.word	0x08002de5
 8002d44:	08002de5 	.word	0x08002de5
 8002d48:	08002dc9 	.word	0x08002dc9
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d4c:	f7fe fdca 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60da      	str	r2, [r3, #12]
      break;
 8002d6a:	e03e      	b.n	8002dea <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d6c:	f7fe fdce 	bl	800190c <HAL_RCC_GetPCLK2Freq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60da      	str	r2, [r3, #12]
      break;
 8002d8a:	e02e      	b.n	8002dea <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	085a      	lsrs	r2, r3, #1
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <UART_SetConfig+0x4fc>)
 8002d94:	4413      	add	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6852      	ldr	r2, [r2, #4]
 8002d9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60da      	str	r2, [r3, #12]
      break;
 8002da6:	e020      	b.n	8002dea <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002da8:	f7fe fcae 	bl	8001708 <HAL_RCC_GetSysClockFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60da      	str	r2, [r3, #12]
      break;
 8002dc6:	e010      	b.n	8002dea <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60da      	str	r2, [r3, #12]
      break;
 8002de2:	e002      	b.n	8002dea <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	74fb      	strb	r3, [r7, #19]
      break;
 8002de8:	bf00      	nop
    }
  }

  return ret;
 8002dea:	7cfb      	ldrb	r3, [r7, #19]

}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	01e84800 	.word	0x01e84800
 8002df8:	00f42400 	.word	0x00f42400

08002dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01a      	beq.n	8002f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efa:	d10a      	bne.n	8002f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f52:	f7fd fbab 	bl	80006ac <HAL_GetTick>
 8002f56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d10e      	bne.n	8002f84 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fb5f 	bl	8002638 <UART_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e00c      	b.n	8002f9e <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <DigitalOutDriver_init>:
 */

#include "digital_out_driver.h"

DigitalOutDriver_Status_TypeDef DigitalOutDriver_init(DigitalOutDriver_TypeDef* pSelf, DigitalOutDriver_Port_TypeDef* port, DigitalOutDriver_Pin_TypeDef* pin,
		DigitalOutDriver_StartLevel_TypeDef startLevel){
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	70fb      	strb	r3, [r7, #3]
	if (pSelf->state != DigitalOutDriver_State_UnInitialized){
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <DigitalOutDriver_init+0x1a>
		return DigitalOutDriver_Status_Errror;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e02c      	b.n	800301a <DigitalOutDriver_init+0x74>
	}

	pSelf->state = DigitalOutDriver_State_DuringInitalization;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]

	pSelf->port				= port;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	605a      	str	r2, [r3, #4]
	pSelf->pin				= pin;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
	pSelf->onTimeMs			= 0;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
	pSelf->offTimeMs		= 0;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
	pSelf->onOffTimeCounter	= 0;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]

	DigitalOutDriver_Status_TypeDef ret;

	switch (startLevel) {
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d109      	bne.n	8002ffe <DigitalOutDriver_init+0x58>
	case DigitalOutDriver_StartLevel_High:
		if ((ret = DigitalOutDriver_setHigh(pSelf)) != DigitalOutDriver_Status_OK){
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 f829 	bl	8003042 <DigitalOutDriver_setHigh>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	75fb      	strb	r3, [r7, #23]
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <DigitalOutDriver_init+0x6c>
			return ret;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	e00d      	b.n	800301a <DigitalOutDriver_init+0x74>
		}
		break;
	case DigitalOutDriver_StartLevel_Low:
	default:
		if ((ret = DigitalOutDriver_setLow(pSelf)) != DigitalOutDriver_Status_OK){
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f83a 	bl	8003078 <DigitalOutDriver_setLow>
 8003004:	4603      	mov	r3, r0
 8003006:	75fb      	strb	r3, [r7, #23]
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <DigitalOutDriver_init+0x70>
			return ret;
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	e003      	b.n	800301a <DigitalOutDriver_init+0x74>
		break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <DigitalOutDriver_init+0x72>
		}
		break;
 8003016:	bf00      	nop
	}

	return DigitalOutDriver_Status_OK;
 8003018:	2300      	movs	r3, #0

}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <DigitalOutDriver_getState>:

DigitalOutDriver_Status_TypeDef DigitalOutDriver_getState(DigitalOutDriver_TypeDef* pSelf, DigitalOutDriver_State_TypeDef* pRetState){
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
	*pRetState = pSelf->state;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	701a      	strb	r2, [r3, #0]

	return DigitalOutDriver_Status_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <DigitalOutDriver_setHigh>:

DigitalOutDriver_Status_TypeDef DigitalOutDriver_setHigh(DigitalOutDriver_TypeDef* pSelf){
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
	if (pSelf->state == DigitalOutDriver_State_UnInitialized){
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <DigitalOutDriver_setHigh+0x14>
		return DigitalOutDriver_Status_UnInitializedErrror;
 8003052:	2301      	movs	r3, #1
 8003054:	e00c      	b.n	8003070 <DigitalOutDriver_setHigh+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *(pSelf->pin), GPIO_PIN_SET);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6858      	ldr	r0, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd ff8c 	bl	8000f80 <HAL_GPIO_WritePin>

	pSelf->state = DigitalOutDriver_State_High_Stady;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2204      	movs	r2, #4
 800306c:	701a      	strb	r2, [r3, #0]

	return DigitalOutDriver_Status_OK;
 800306e:	2300      	movs	r3, #0

}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <DigitalOutDriver_setLow>:

DigitalOutDriver_Status_TypeDef DigitalOutDriver_setLow(DigitalOutDriver_TypeDef* pSelf){
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	if (pSelf->state == DigitalOutDriver_State_UnInitialized){
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <DigitalOutDriver_setLow+0x14>
		return DigitalOutDriver_Status_UnInitializedErrror;
 8003088:	2301      	movs	r3, #1
 800308a:	e00c      	b.n	80030a6 <DigitalOutDriver_setLow+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *(pSelf->pin), GPIO_PIN_RESET);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6858      	ldr	r0, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	4619      	mov	r1, r3
 800309a:	f7fd ff71 	bl	8000f80 <HAL_GPIO_WritePin>

	pSelf->state = DigitalOutDriver_State_Low;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]

	return DigitalOutDriver_Status_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <DigitalOutDriver_toggle>:

	return DigitalOutDriver_Status_OK;

}

DigitalOutDriver_Status_TypeDef DigitalOutDriver_toggle(DigitalOutDriver_TypeDef* pSelf){
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
	if (pSelf->state == DigitalOutDriver_State_UnInitialized){
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <DigitalOutDriver_toggle+0x14>
		return DigitalOutDriver_Status_UnInitializedErrror;
 80030be:	2301      	movs	r3, #1
 80030c0:	e01b      	b.n	80030fa <DigitalOutDriver_toggle+0x4c>
	}

	DigitalOutDriver_State_TypeDef state;
	if (DigitalOutDriver_getState(pSelf, &state) != DigitalOutDriver_Status_OK){
 80030c2:	f107 030f 	add.w	r3, r7, #15
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff ffaa 	bl	8003022 <DigitalOutDriver_getState>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <DigitalOutDriver_toggle+0x2a>
		return DigitalOutDriver_Status_Errror;
 80030d4:	2302      	movs	r3, #2
 80030d6:	e010      	b.n	80030fa <DigitalOutDriver_toggle+0x4c>
	}

	if (state == DigitalOutDriver_State_High_Stady){
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d104      	bne.n	80030e8 <DigitalOutDriver_toggle+0x3a>
		return DigitalOutDriver_setLow(pSelf);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff ffca 	bl	8003078 <DigitalOutDriver_setLow>
 80030e4:	4603      	mov	r3, r0
 80030e6:	e008      	b.n	80030fa <DigitalOutDriver_toggle+0x4c>
	} else if (state == DigitalOutDriver_State_Low){
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d104      	bne.n	80030f8 <DigitalOutDriver_toggle+0x4a>
		return DigitalOutDriver_setHigh(pSelf);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa7 	bl	8003042 <DigitalOutDriver_setHigh>
 80030f4:	4603      	mov	r3, r0
 80030f6:	e000      	b.n	80030fa <DigitalOutDriver_toggle+0x4c>
	} else {
		return DigitalOutDriver_Status_Errror;
 80030f8:	2302      	movs	r3, #2
	}
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <MX_GPIO_Init+0x228>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a87      	ldr	r2, [pc, #540]	; (800332c <MX_GPIO_Init+0x228>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b85      	ldr	r3, [pc, #532]	; (800332c <MX_GPIO_Init+0x228>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003122:	4b82      	ldr	r3, [pc, #520]	; (800332c <MX_GPIO_Init+0x228>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a81      	ldr	r2, [pc, #516]	; (800332c <MX_GPIO_Init+0x228>)
 8003128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <MX_GPIO_Init+0x228>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800313a:	4b7c      	ldr	r3, [pc, #496]	; (800332c <MX_GPIO_Init+0x228>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a7b      	ldr	r2, [pc, #492]	; (800332c <MX_GPIO_Init+0x228>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b79      	ldr	r3, [pc, #484]	; (800332c <MX_GPIO_Init+0x228>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <MX_GPIO_Init+0x228>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a75      	ldr	r2, [pc, #468]	; (800332c <MX_GPIO_Init+0x228>)
 8003158:	f043 0302 	orr.w	r3, r3, #2
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b73      	ldr	r3, [pc, #460]	; (800332c <MX_GPIO_Init+0x228>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800316a:	4b70      	ldr	r3, [pc, #448]	; (800332c <MX_GPIO_Init+0x228>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	4a6f      	ldr	r2, [pc, #444]	; (800332c <MX_GPIO_Init+0x228>)
 8003170:	f043 0308 	orr.w	r3, r3, #8
 8003174:	6313      	str	r3, [r2, #48]	; 0x30
 8003176:	4b6d      	ldr	r3, [pc, #436]	; (800332c <MX_GPIO_Init+0x228>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003182:	4b6a      	ldr	r3, [pc, #424]	; (800332c <MX_GPIO_Init+0x228>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a69      	ldr	r2, [pc, #420]	; (800332c <MX_GPIO_Init+0x228>)
 8003188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b67      	ldr	r3, [pc, #412]	; (800332c <MX_GPIO_Init+0x228>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DUBUG_OUT_0_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	f644 0181 	movw	r1, #18561	; 0x4881
 80031a0:	4863      	ldr	r0, [pc, #396]	; (8003330 <MX_GPIO_Init+0x22c>)
 80031a2:	f7fd feed 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC05_KEY_GPIO_Port, HC05_KEY_Pin, GPIO_PIN_SET);
 80031a6:	2201      	movs	r2, #1
 80031a8:	2102      	movs	r1, #2
 80031aa:	4861      	ldr	r0, [pc, #388]	; (8003330 <MX_GPIO_Init+0x22c>)
 80031ac:	f7fd fee8 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80031b0:	2200      	movs	r2, #0
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	485f      	ldr	r0, [pc, #380]	; (8003334 <MX_GPIO_Init+0x230>)
 80031b6:	f7fd fee3 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80031ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031c0:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <MX_GPIO_Init+0x234>)
 80031c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	4619      	mov	r1, r3
 80031ce:	485b      	ldr	r0, [pc, #364]	; (800333c <MX_GPIO_Init+0x238>)
 80031d0:	f7fd fc1e 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80031d4:	2332      	movs	r3, #50	; 0x32
 80031d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031e4:	230b      	movs	r3, #11
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	4619      	mov	r1, r3
 80031ee:	4853      	ldr	r0, [pc, #332]	; (800333c <MX_GPIO_Init+0x238>)
 80031f0:	f7fd fc0e 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80031f4:	2386      	movs	r3, #134	; 0x86
 80031f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003200:	2303      	movs	r3, #3
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003204:	230b      	movs	r3, #11
 8003206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	4619      	mov	r1, r3
 800320e:	484c      	ldr	r0, [pc, #304]	; (8003340 <MX_GPIO_Init+0x23c>)
 8003210:	f7fd fbfe 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DUBUG_OUT_0_Pin|LD3_Pin|LD2_Pin;
 8003214:	f644 0381 	movw	r3, #18561	; 0x4881
 8003218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800321a:	2301      	movs	r3, #1
 800321c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003222:	2300      	movs	r3, #0
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	4619      	mov	r1, r3
 800322c:	4840      	ldr	r0, [pc, #256]	; (8003330 <MX_GPIO_Init+0x22c>)
 800322e:	f7fd fbef 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC05_KEY_Pin;
 8003232:	2302      	movs	r3, #2
 8003234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003236:	2311      	movs	r3, #17
 8003238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800323a:	2301      	movs	r3, #1
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HC05_KEY_GPIO_Port, &GPIO_InitStruct);
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	4619      	mov	r1, r3
 8003248:	4839      	ldr	r0, [pc, #228]	; (8003330 <MX_GPIO_Init+0x22c>)
 800324a:	f7fd fbe1 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800324e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003260:	230b      	movs	r3, #11
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	4619      	mov	r1, r3
 800326a:	4831      	ldr	r0, [pc, #196]	; (8003330 <MX_GPIO_Init+0x22c>)
 800326c:	f7fd fbd0 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003270:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327e:	2303      	movs	r3, #3
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003282:	2307      	movs	r3, #7
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003286:	f107 031c 	add.w	r3, r7, #28
 800328a:	4619      	mov	r1, r3
 800328c:	482d      	ldr	r0, [pc, #180]	; (8003344 <MX_GPIO_Init+0x240>)
 800328e:	f7fd fbbf 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003296:	2301      	movs	r3, #1
 8003298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	4822      	ldr	r0, [pc, #136]	; (8003334 <MX_GPIO_Init+0x230>)
 80032aa:	f7fd fbb1 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80032ae:	2380      	movs	r3, #128	; 0x80
 80032b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	4619      	mov	r1, r3
 80032c0:	481c      	ldr	r0, [pc, #112]	; (8003334 <MX_GPIO_Init+0x230>)
 80032c2:	f7fd fba5 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80032c6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80032ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032cc:	2302      	movs	r3, #2
 80032ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032d8:	230a      	movs	r3, #10
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032dc:	f107 031c 	add.w	r3, r7, #28
 80032e0:	4619      	mov	r1, r3
 80032e2:	4817      	ldr	r0, [pc, #92]	; (8003340 <MX_GPIO_Init+0x23c>)
 80032e4:	f7fd fb94 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80032e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032f6:	f107 031c 	add.w	r3, r7, #28
 80032fa:	4619      	mov	r1, r3
 80032fc:	4810      	ldr	r0, [pc, #64]	; (8003340 <MX_GPIO_Init+0x23c>)
 80032fe:	f7fd fb87 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003302:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003310:	2303      	movs	r3, #3
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003314:	230b      	movs	r3, #11
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	4619      	mov	r1, r3
 800331e:	4805      	ldr	r0, [pc, #20]	; (8003334 <MX_GPIO_Init+0x230>)
 8003320:	f7fd fb76 	bl	8000a10 <HAL_GPIO_Init>

}
 8003324:	bf00      	nop
 8003326:	3730      	adds	r7, #48	; 0x30
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40023800 	.word	0x40023800
 8003330:	40020400 	.word	0x40020400
 8003334:	40021800 	.word	0x40021800
 8003338:	10110000 	.word	0x10110000
 800333c:	40020800 	.word	0x40020800
 8003340:	40020000 	.word	0x40020000
 8003344:	40020c00 	.word	0x40020c00

08003348 <HC05Driver_init>:
static HC05Driver_Status_TypeDef HC05Driver_setDataMode(HC05Driver_TypeDef* pSelf);

HC05Driver_State_TypeDef HC05Driver_init(HC05Driver_TypeDef* pSelf, HC05Driver_Role_TypeDef role, \
		UartDriver_TypeDef* pUartDriver, DigitalOutDriver_TypeDef* pKeyPinDriver, uint32_t baudRate,
		char* name, uint16_t password)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	460b      	mov	r3, r1
 8003356:	72fb      	strb	r3, [r7, #11]

	if (pSelf->state != HC05Driver_State_UnInitialized){
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	7a1b      	ldrb	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HC05Driver_init+0x1c>
		return HC05Driver_Status_Error;
 8003360:	2305      	movs	r3, #5
 8003362:	e0b1      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if (role != HC05Driver_Role_Slave){
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HC05Driver_init+0x26>
		return HC05Driver_Status_UnsuportedError;
 800336a:	2304      	movs	r3, #4
 800336c:	e0ac      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	HC05Driver_Status_TypeDef ret = HC05Driver_Status_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	757b      	strb	r3, [r7, #21]

	pSelf->state = HC05Driver_State_HardAT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	721a      	strb	r2, [r3, #8]
	pSelf->pUartDriver = pUartDriver;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
	pSelf->pKeyPinDriver = pKeyPinDriver;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	605a      	str	r2, [r3, #4]
	pSelf->dataBaudRate = baudRate;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	60da      	str	r2, [r3, #12]

	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 800338a:	2300      	movs	r3, #0
 800338c:	82fb      	strh	r3, [r7, #22]
 800338e:	e017      	b.n	80033c0 <HC05Driver_init+0x78>
		pSelf->callbacks[i] 			= NULL;
 8003390:	8afb      	ldrh	r3, [r7, #22]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	3324      	adds	r3, #36	; 0x24
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	2200      	movs	r2, #0
 800339c:	605a      	str	r2, [r3, #4]
		pSelf->callbackArgs[i] 			= NULL;
 800339e:	8afb      	ldrh	r3, [r7, #22]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	3326      	adds	r3, #38	; 0x26
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	605a      	str	r2, [r3, #4]
		pSelf->callbacksIterators[i] 	= -1;
 80033ac:	8afa      	ldrh	r2, [r7, #22]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3248      	adds	r2, #72	; 0x48
 80033b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80033ba:	8afb      	ldrh	r3, [r7, #22]
 80033bc:	3301      	adds	r3, #1
 80033be:	82fb      	strh	r3, [r7, #22]
 80033c0:	8afb      	ldrh	r3, [r7, #22]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d9e4      	bls.n	8003390 <HC05Driver_init+0x48>
	}

	memset(pSelf->buffer, 0, HC05_BUFFER_SIZE);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3310      	adds	r3, #16
 80033ca:	2280      	movs	r2, #128	; 0x80
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fd98 	bl	8004f04 <memset>

	uint32_t	tmpUartBaudRate;
	if (UartDriver_getBaudRate(pSelf->pUartDriver, &tmpUartBaudRate) != UartDriver_Status_OK){
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f107 0210 	add.w	r2, r7, #16
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 fa90 	bl	8004904 <UartDriver_getBaudRate>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HC05Driver_init+0xa6>
		return HC05Driver_Status_Error;
 80033ea:	2305      	movs	r3, #5
 80033ec:	e06c      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if (tmpUartBaudRate != HC05_HARD_AT_BAUDRATE){
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 80033f4:	d00b      	beq.n	800340e <HC05Driver_init+0xc6>
		if (UartDriver_setBaudRate(pSelf->pUartDriver, HC05_HARD_AT_BAUDRATE) != UartDriver_Status_OK){
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fa96 	bl	8004930 <UartDriver_setBaudRate>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HC05Driver_init+0xc6>
			return HC05Driver_Status_Error;
 800340a:	2305      	movs	r3, #5
 800340c:	e05c      	b.n	80034c8 <HC05Driver_init+0x180>
		}
	}

	HAL_Delay(HC05_START_UP_DELAY_MS);
 800340e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003412:	f7fd f957 	bl	80006c4 <HAL_Delay>

	if ((ret = HC05Driver_sendTestATCommand(pSelf)) != HC05Driver_Status_OK){
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f85a 	bl	80034d0 <HC05Driver_sendTestATCommand>
 800341c:	4603      	mov	r3, r0
 800341e:	757b      	strb	r3, [r7, #21]
 8003420:	7d7b      	ldrb	r3, [r7, #21]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HC05Driver_init+0xe2>
		return ret;
 8003426:	7d7b      	ldrb	r3, [r7, #21]
 8003428:	e04e      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setDeviceName(pSelf, name)) != HC05Driver_Status_OK){
 800342a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fb83 	bl	8003b38 <HC05Driver_setDeviceName>
 8003432:	4603      	mov	r3, r0
 8003434:	757b      	strb	r3, [r7, #21]
 8003436:	7d7b      	ldrb	r3, [r7, #21]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HC05Driver_init+0xf8>
		return ret;
 800343c:	7d7b      	ldrb	r3, [r7, #21]
 800343e:	e043      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setBaudRate(pSelf, pSelf->dataBaudRate)) != HC05Driver_Status_OK){
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4619      	mov	r1, r3
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f934 	bl	80036b4 <HC05Driver_setBaudRate>
 800344c:	4603      	mov	r3, r0
 800344e:	757b      	strb	r3, [r7, #21]
 8003450:	7d7b      	ldrb	r3, [r7, #21]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HC05Driver_init+0x112>
		return ret;
 8003456:	7d7b      	ldrb	r3, [r7, #21]
 8003458:	e036      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setPassword(pSelf, password)) != HC05Driver_Status_OK){
 800345a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800345c:	4619      	mov	r1, r3
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fa5a 	bl	8003918 <HC05Driver_setPassword>
 8003464:	4603      	mov	r3, r0
 8003466:	757b      	strb	r3, [r7, #21]
 8003468:	7d7b      	ldrb	r3, [r7, #21]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HC05Driver_init+0x12a>
		return ret;
 800346e:	7d7b      	ldrb	r3, [r7, #21]
 8003470:	e02a      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setDeviceRole(pSelf, role)) != HC05Driver_Status_OK){
 8003472:	7afb      	ldrb	r3, [r7, #11]
 8003474:	4619      	mov	r1, r3
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fc70 	bl	8003d5c <HC05Driver_setDeviceRole>
 800347c:	4603      	mov	r3, r0
 800347e:	757b      	strb	r3, [r7, #21]
 8003480:	7d7b      	ldrb	r3, [r7, #21]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HC05Driver_init+0x142>
		return ret;
 8003486:	7d7b      	ldrb	r3, [r7, #21]
 8003488:	e01e      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_resetNormalMode(pSelf)) != HC05Driver_Status_OK){
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 feb4 	bl	80041f8 <HC05Driver_resetNormalMode>
 8003490:	4603      	mov	r3, r0
 8003492:	757b      	strb	r3, [r7, #21]
 8003494:	7d7b      	ldrb	r3, [r7, #21]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HC05Driver_init+0x156>
		return ret;
 800349a:	7d7b      	ldrb	r3, [r7, #21]
 800349c:	e014      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_sendTestATCommand(pSelf)) != HC05Driver_Status_OK){
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f816 	bl	80034d0 <HC05Driver_sendTestATCommand>
 80034a4:	4603      	mov	r3, r0
 80034a6:	757b      	strb	r3, [r7, #21]
 80034a8:	7d7b      	ldrb	r3, [r7, #21]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HC05Driver_init+0x16a>
		return ret;
 80034ae:	7d7b      	ldrb	r3, [r7, #21]
 80034b0:	e00a      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setDataMode(pSelf)) != HC05Driver_Status_OK){
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fe52 	bl	800415c <HC05Driver_setDataMode>
 80034b8:	4603      	mov	r3, r0
 80034ba:	757b      	strb	r3, [r7, #21]
 80034bc:	7d7b      	ldrb	r3, [r7, #21]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HC05Driver_init+0x17e>
		return ret;
 80034c2:	7d7b      	ldrb	r3, [r7, #21]
 80034c4:	e000      	b.n	80034c8 <HC05Driver_init+0x180>
	}

	return HC05Driver_Status_OK;
 80034c6:	2300      	movs	r3, #0

}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HC05Driver_sendTestATCommand>:

HC05Driver_Status_TypeDef HC05Driver_sendTestATCommand(HC05Driver_TypeDef* pSelf){
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	6078      	str	r0, [r7, #4]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7a1b      	ldrb	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HC05Driver_sendTestATCommand+0x14>
		return HC05Driver_Status_UnInitializedError;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e045      	b.n	8003570 <HC05Driver_sendTestATCommand+0xa0>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 ff3b 	bl	8004360 <HC05Driver_setATMode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HC05Driver_sendTestATCommand+0x28>
		return ret;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	e03b      	b.n	8003570 <HC05Driver_sendTestATCommand+0xa0>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3310      	adds	r3, #16
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	491e      	ldr	r1, [pc, #120]	; (8003578 <HC05Driver_sendTestATCommand+0xa8>)
 8003500:	4618      	mov	r0, r3
 8003502:	f001 fd4a 	bl	8004f9a <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3310      	adds	r3, #16
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	491b      	ldr	r1, [pc, #108]	; (800357c <HC05Driver_sendTestATCommand+0xac>)
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fd20 	bl	8004f54 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f103 0510 	add.w	r5, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3310      	adds	r3, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7fc fe96 	bl	8000254 <strlen>
 8003528:	4603      	mov	r3, r0
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3310      	adds	r3, #16
 8003530:	210a      	movs	r1, #10
 8003532:	9101      	str	r1, [sp, #4]
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	9100      	str	r1, [sp, #0]
 8003538:	4629      	mov	r1, r5
 800353a:	4620      	mov	r0, r4
 800353c:	f001 faa1 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HC05Driver_sendTestATCommand+0x7a>
		return HC05Driver_Status_Error;
 8003546:	2305      	movs	r3, #5
 8003548:	e012      	b.n	8003570 <HC05Driver_sendTestATCommand+0xa0>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3310      	adds	r3, #16
 800354e:	490b      	ldr	r1, [pc, #44]	; (800357c <HC05Driver_sendTestATCommand+0xac>)
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fd5d 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3310      	adds	r3, #16
 800355a:	2202      	movs	r2, #2
 800355c:	4908      	ldr	r1, [pc, #32]	; (8003580 <HC05Driver_sendTestATCommand+0xb0>)
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fd30 	bl	8004fc4 <strncmp>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HC05Driver_sendTestATCommand+0x9e>
		return HC05Driver_Status_Error;
 800356a:	2305      	movs	r3, #5
 800356c:	e000      	b.n	8003570 <HC05Driver_sendTestATCommand+0xa0>
	}

	return HC05Driver_Status_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bdb0      	pop	{r4, r5, r7, pc}
 8003578:	08006590 	.word	0x08006590
 800357c:	08006594 	.word	0x08006594
 8003580:	08006598 	.word	0x08006598

08003584 <HC05Driver_getBaudRate>:
	}

	return HC05Driver_Status_OK;
}

HC05Driver_Status_TypeDef HC05Driver_getBaudRate(HC05Driver_TypeDef* pSelf, uint32_t* pRetBaudRate){
 8003584:	b5b0      	push	{r4, r5, r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7a1b      	ldrb	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HC05Driver_getBaudRate+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003596:	2301      	movs	r3, #1
 8003598:	e07c      	b.n	8003694 <HC05Driver_getBaudRate+0x110>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fee0 	bl	8004360 <HC05Driver_setATMode>
 80035a0:	4603      	mov	r3, r0
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HC05Driver_getBaudRate+0x2a>
		return ret;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	e072      	b.n	8003694 <HC05Driver_getBaudRate+0x110>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3310      	adds	r3, #16
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	4939      	ldr	r1, [pc, #228]	; (800369c <HC05Driver_getBaudRate+0x118>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 fcef 	bl	8004f9a <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_UART_AT_COMMNAND, HC05_BUFFER_SIZE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3310      	adds	r3, #16
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	4937      	ldr	r1, [pc, #220]	; (80036a0 <HC05Driver_getBaudRate+0x11c>)
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fcc5 	bl	8004f54 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3310      	adds	r3, #16
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	4934      	ldr	r1, [pc, #208]	; (80036a4 <HC05Driver_getBaudRate+0x120>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fcbe 	bl	8004f54 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681c      	ldr	r4, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f103 0510 	add.w	r5, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3310      	adds	r3, #16
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc fe34 	bl	8000254 <strlen>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3310      	adds	r3, #16
 80035f4:	210a      	movs	r1, #10
 80035f6:	9101      	str	r1, [sp, #4]
 80035f8:	2180      	movs	r1, #128	; 0x80
 80035fa:	9100      	str	r1, [sp, #0]
 80035fc:	4629      	mov	r1, r5
 80035fe:	4620      	mov	r0, r4
 8003600:	f001 fa3f 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HC05Driver_getBaudRate+0x8a>
		return HC05Driver_Status_Error;
 800360a:	2305      	movs	r3, #5
 800360c:	e042      	b.n	8003694 <HC05Driver_getBaudRate+0x110>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3310      	adds	r3, #16
 8003612:	4924      	ldr	r1, [pc, #144]	; (80036a4 <HC05Driver_getBaudRate+0x120>)
 8003614:	4618      	mov	r0, r3
 8003616:	f001 fcfb 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_UART_AT_COMMNAND_RESPONSE, strlen(HC05_GET_UART_AT_COMMNAND_RESPONSE)) != 0){
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3310      	adds	r3, #16
 800361e:	2206      	movs	r2, #6
 8003620:	4921      	ldr	r1, [pc, #132]	; (80036a8 <HC05Driver_getBaudRate+0x124>)
 8003622:	4618      	mov	r0, r3
 8003624:	f001 fcce 	bl	8004fc4 <strncmp>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HC05Driver_getBaudRate+0xae>
		return HC05Driver_Status_Error;
 800362e:	2305      	movs	r3, #5
 8003630:	e030      	b.n	8003694 <HC05Driver_getBaudRate+0x110>
	}

	strtok ((char*)pSelf->buffer, ",");
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3310      	adds	r3, #16
 8003636:	491d      	ldr	r1, [pc, #116]	; (80036ac <HC05Driver_getBaudRate+0x128>)
 8003638:	4618      	mov	r0, r3
 800363a:	f001 fce9 	bl	8005010 <strtok>
	*pRetBaudRate = atoi((char*)(pSelf->buffer + strlen(HC05_GET_UART_AT_COMMNAND_RESPONSE)));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3310      	adds	r3, #16
 8003642:	3306      	adds	r3, #6
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fc34 	bl	8004eb2 <atoi>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	601a      	str	r2, [r3, #0]
	//TODO tutaj sprawdzic parity i bity stopu

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f103 0110 	add.w	r1, r3, #16
 800365c:	230a      	movs	r3, #10
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	f001 f9b6 	bl	80049d0 <UartDriver_receiveBytesTerminationSign>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HC05Driver_getBaudRate+0xea>
		return HC05Driver_Status_Error;
 800366a:	2305      	movs	r3, #5
 800366c:	e012      	b.n	8003694 <HC05Driver_getBaudRate+0x110>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3310      	adds	r3, #16
 8003672:	490c      	ldr	r1, [pc, #48]	; (80036a4 <HC05Driver_getBaudRate+0x120>)
 8003674:	4618      	mov	r0, r3
 8003676:	f001 fccb 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3310      	adds	r3, #16
 800367e:	2202      	movs	r2, #2
 8003680:	490b      	ldr	r1, [pc, #44]	; (80036b0 <HC05Driver_getBaudRate+0x12c>)
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fc9e 	bl	8004fc4 <strncmp>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HC05Driver_getBaudRate+0x10e>
		return HC05Driver_Status_Error;
 800368e:	2305      	movs	r3, #5
 8003690:	e000      	b.n	8003694 <HC05Driver_getBaudRate+0x110>
	}

	return HC05Driver_Status_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bdb0      	pop	{r4, r5, r7, pc}
 800369c:	08006590 	.word	0x08006590
 80036a0:	080065a4 	.word	0x080065a4
 80036a4:	08006594 	.word	0x08006594
 80036a8:	080065ac 	.word	0x080065ac
 80036ac:	080065b4 	.word	0x080065b4
 80036b0:	08006598 	.word	0x08006598

080036b4 <HC05Driver_setBaudRate>:

HC05Driver_Status_TypeDef HC05Driver_setBaudRate(HC05Driver_TypeDef* pSelf, uint32_t baudRate){
 80036b4:	b5b0      	push	{r4, r5, r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7a1b      	ldrb	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HC05Driver_setBaudRate+0x16>
		return HC05Driver_Status_UnInitializedError;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e086      	b.n	80037d8 <HC05Driver_setBaudRate+0x124>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fe48 	bl	8004360 <HC05Driver_setATMode>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HC05Driver_setBaudRate+0x2a>
		return ret;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	e07c      	b.n	80037d8 <HC05Driver_setBaudRate+0x124>
	}

	uint32_t	currentBaudRate;
	if ((ret = HC05Driver_getBaudRate(pSelf, &currentBaudRate)) != HC05Driver_Status_OK){
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff4d 	bl	8003584 <HC05Driver_getBaudRate>
 80036ea:	4603      	mov	r3, r0
 80036ec:	73fb      	strb	r3, [r7, #15]
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HC05Driver_setBaudRate+0x44>
		return ret;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	e06f      	b.n	80037d8 <HC05Driver_setBaudRate+0x124>
	}

	if (baudRate != currentBaudRate){
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d06a      	beq.n	80037d6 <HC05Driver_setBaudRate+0x122>

							strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3310      	adds	r3, #16
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	4936      	ldr	r1, [pc, #216]	; (80037e0 <HC05Driver_setBaudRate+0x12c>)
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fc46 	bl	8004f9a <strlcpy>
		uint16_t length = 	strlcat((char*)pSelf->buffer, HC05_SET_UART_AT_COMMNAND, HC05_BUFFER_SIZE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3310      	adds	r3, #16
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	4933      	ldr	r1, [pc, #204]	; (80037e4 <HC05Driver_setBaudRate+0x130>)
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fc1c 	bl	8004f54 <strlcat>
 800371c:	4603      	mov	r3, r0
 800371e:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, "%lu", baudRate);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f103 0210 	add.w	r2, r3, #16
 8003726:	89bb      	ldrh	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	492e      	ldr	r1, [pc, #184]	; (80037e8 <HC05Driver_setBaudRate+0x134>)
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fbf0 	bl	8004f14 <siprintf>
 8003734:	4603      	mov	r3, r0
 8003736:	b29a      	uxth	r2, r3
 8003738:	89bb      	ldrh	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, ",%lu", HC05_STOP_BIT_SETUP);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f103 0210 	add.w	r2, r3, #16
 8003744:	89bb      	ldrh	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	2200      	movs	r2, #0
 800374a:	4928      	ldr	r1, [pc, #160]	; (80037ec <HC05Driver_setBaudRate+0x138>)
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fbe1 	bl	8004f14 <siprintf>
 8003752:	4603      	mov	r3, r0
 8003754:	b29a      	uxth	r2, r3
 8003756:	89bb      	ldrh	r3, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, ",%lu", HC05_PARITY_SETUP);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f103 0210 	add.w	r2, r3, #16
 8003762:	89bb      	ldrh	r3, [r7, #12]
 8003764:	4413      	add	r3, r2
 8003766:	2200      	movs	r2, #0
 8003768:	4920      	ldr	r1, [pc, #128]	; (80037ec <HC05Driver_setBaudRate+0x138>)
 800376a:	4618      	mov	r0, r3
 800376c:	f001 fbd2 	bl	8004f14 <siprintf>
 8003770:	4603      	mov	r3, r0
 8003772:	b29a      	uxth	r2, r3
 8003774:	89bb      	ldrh	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	81bb      	strh	r3, [r7, #12]
							strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3310      	adds	r3, #16
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	491b      	ldr	r1, [pc, #108]	; (80037f0 <HC05Driver_setBaudRate+0x13c>)
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fbe6 	bl	8004f54 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681c      	ldr	r4, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 0510 	add.w	r5, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3310      	adds	r3, #16
 8003796:	4618      	mov	r0, r3
 8003798:	f7fc fd5c 	bl	8000254 <strlen>
 800379c:	4603      	mov	r3, r0
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3310      	adds	r3, #16
 80037a4:	210a      	movs	r1, #10
 80037a6:	9101      	str	r1, [sp, #4]
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	9100      	str	r1, [sp, #0]
 80037ac:	4629      	mov	r1, r5
 80037ae:	4620      	mov	r0, r4
 80037b0:	f001 f967 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HC05Driver_setBaudRate+0x10a>
			return HC05Driver_Status_Error;
 80037ba:	2305      	movs	r3, #5
 80037bc:	e00c      	b.n	80037d8 <HC05Driver_setBaudRate+0x124>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3310      	adds	r3, #16
 80037c2:	2202      	movs	r2, #2
 80037c4:	490b      	ldr	r1, [pc, #44]	; (80037f4 <HC05Driver_setBaudRate+0x140>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 fbfc 	bl	8004fc4 <strncmp>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HC05Driver_setBaudRate+0x122>
			return HC05Driver_Status_Error;
 80037d2:	2305      	movs	r3, #5
 80037d4:	e000      	b.n	80037d8 <HC05Driver_setBaudRate+0x124>
		}
	}

	return HC05Driver_Status_OK;
 80037d6:	2300      	movs	r3, #0

}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bdb0      	pop	{r4, r5, r7, pc}
 80037e0:	08006590 	.word	0x08006590
 80037e4:	080065b8 	.word	0x080065b8
 80037e8:	080065c0 	.word	0x080065c0
 80037ec:	080065c4 	.word	0x080065c4
 80037f0:	08006594 	.word	0x08006594
 80037f4:	08006598 	.word	0x08006598

080037f8 <HC05Driver_getPassword>:

HC05Driver_Status_TypeDef HC05Driver_getPassword(HC05Driver_TypeDef* pSelf, uint32_t* pRetPassword){
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	7a1b      	ldrb	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HC05Driver_getPassword+0x16>
		return HC05Driver_Status_UnInitializedError;
 800380a:	2301      	movs	r3, #1
 800380c:	e076      	b.n	80038fc <HC05Driver_getPassword+0x104>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fda6 	bl	8004360 <HC05Driver_setATMode>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HC05Driver_getPassword+0x2a>
		return ret;
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	e06c      	b.n	80038fc <HC05Driver_getPassword+0x104>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3310      	adds	r3, #16
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	4936      	ldr	r1, [pc, #216]	; (8003904 <HC05Driver_getPassword+0x10c>)
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fbb5 	bl	8004f9a <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_PSWD_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3310      	adds	r3, #16
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	4934      	ldr	r1, [pc, #208]	; (8003908 <HC05Driver_getPassword+0x110>)
 8003838:	4618      	mov	r0, r3
 800383a:	f001 fb8b 	bl	8004f54 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3310      	adds	r3, #16
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	4931      	ldr	r1, [pc, #196]	; (800390c <HC05Driver_getPassword+0x114>)
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fb84 	bl	8004f54 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681c      	ldr	r4, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f103 0510 	add.w	r5, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3310      	adds	r3, #16
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fcfa 	bl	8000254 <strlen>
 8003860:	4603      	mov	r3, r0
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3310      	adds	r3, #16
 8003868:	210a      	movs	r1, #10
 800386a:	9101      	str	r1, [sp, #4]
 800386c:	2180      	movs	r1, #128	; 0x80
 800386e:	9100      	str	r1, [sp, #0]
 8003870:	4629      	mov	r1, r5
 8003872:	4620      	mov	r0, r4
 8003874:	f001 f905 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HC05Driver_getPassword+0x8a>
		return HC05Driver_Status_Error;
 800387e:	2305      	movs	r3, #5
 8003880:	e03c      	b.n	80038fc <HC05Driver_getPassword+0x104>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3310      	adds	r3, #16
 8003886:	4921      	ldr	r1, [pc, #132]	; (800390c <HC05Driver_getPassword+0x114>)
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fbc1 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_PSWD_AT_COMMNAND_RESPONSE, strlen(HC05_GET_PSWD_AT_COMMNAND_RESPONSE)) != 0){
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3310      	adds	r3, #16
 8003892:	2206      	movs	r2, #6
 8003894:	491e      	ldr	r1, [pc, #120]	; (8003910 <HC05Driver_getPassword+0x118>)
 8003896:	4618      	mov	r0, r3
 8003898:	f001 fb94 	bl	8004fc4 <strncmp>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HC05Driver_getPassword+0xae>
		return HC05Driver_Status_Error;
 80038a2:	2305      	movs	r3, #5
 80038a4:	e02a      	b.n	80038fc <HC05Driver_getPassword+0x104>
	}

	*pRetPassword = atoi((char*)(pSelf->buffer + strlen(HC05_GET_PSWD_AT_COMMNAND_RESPONSE)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3310      	adds	r3, #16
 80038aa:	3306      	adds	r3, #6
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 fb00 	bl	8004eb2 <atoi>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	601a      	str	r2, [r3, #0]

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f103 0110 	add.w	r1, r3, #16
 80038c4:	230a      	movs	r3, #10
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	f001 f882 	bl	80049d0 <UartDriver_receiveBytesTerminationSign>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HC05Driver_getPassword+0xde>
		return HC05Driver_Status_Error;
 80038d2:	2305      	movs	r3, #5
 80038d4:	e012      	b.n	80038fc <HC05Driver_getPassword+0x104>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3310      	adds	r3, #16
 80038da:	490c      	ldr	r1, [pc, #48]	; (800390c <HC05Driver_getPassword+0x114>)
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fb97 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3310      	adds	r3, #16
 80038e6:	2202      	movs	r2, #2
 80038e8:	490a      	ldr	r1, [pc, #40]	; (8003914 <HC05Driver_getPassword+0x11c>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fb6a 	bl	8004fc4 <strncmp>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HC05Driver_getPassword+0x102>
		return HC05Driver_Status_Error;
 80038f6:	2305      	movs	r3, #5
 80038f8:	e000      	b.n	80038fc <HC05Driver_getPassword+0x104>
	}

	return HC05Driver_Status_OK;
 80038fa:	2300      	movs	r3, #0

}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bdb0      	pop	{r4, r5, r7, pc}
 8003904:	08006590 	.word	0x08006590
 8003908:	080065cc 	.word	0x080065cc
 800390c:	08006594 	.word	0x08006594
 8003910:	080065d4 	.word	0x080065d4
 8003914:	08006598 	.word	0x08006598

08003918 <HC05Driver_setPassword>:

HC05Driver_Status_TypeDef HC05Driver_setPassword(HC05Driver_TypeDef* pSelf, uint32_t password){
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	7a1b      	ldrb	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HC05Driver_setPassword+0x16>
		return HC05Driver_Status_UnInitializedError;
 800392a:	2301      	movs	r3, #1
 800392c:	e068      	b.n	8003a00 <HC05Driver_setPassword+0xe8>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fd16 	bl	8004360 <HC05Driver_setATMode>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HC05Driver_setPassword+0x2a>
		return ret;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	e05e      	b.n	8003a00 <HC05Driver_setPassword+0xe8>
	}

	uint32_t	currentPassword;
	if ((ret = HC05Driver_getPassword(pSelf, &currentPassword)) != HC05Driver_Status_OK){
 8003942:	f107 0308 	add.w	r3, r7, #8
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff55 	bl	80037f8 <HC05Driver_getPassword>
 800394e:	4603      	mov	r3, r0
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HC05Driver_setPassword+0x44>
		return ret;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	e051      	b.n	8003a00 <HC05Driver_setPassword+0xe8>
	}

	if (password != currentPassword){
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d04c      	beq.n	80039fe <HC05Driver_setPassword+0xe6>

							strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3310      	adds	r3, #16
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	4927      	ldr	r1, [pc, #156]	; (8003a08 <HC05Driver_setPassword+0xf0>)
 800396c:	4618      	mov	r0, r3
 800396e:	f001 fb14 	bl	8004f9a <strlcpy>
		uint16_t length = 	strlcat((char*)pSelf->buffer, HC05_SET_PSWD_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3310      	adds	r3, #16
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	4924      	ldr	r1, [pc, #144]	; (8003a0c <HC05Driver_setPassword+0xf4>)
 800397a:	4618      	mov	r0, r3
 800397c:	f001 faea 	bl	8004f54 <strlcat>
 8003980:	4603      	mov	r3, r0
 8003982:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, "%lu", password);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f103 0210 	add.w	r2, r3, #16
 800398a:	89bb      	ldrh	r3, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	491f      	ldr	r1, [pc, #124]	; (8003a10 <HC05Driver_setPassword+0xf8>)
 8003992:	4618      	mov	r0, r3
 8003994:	f001 fabe 	bl	8004f14 <siprintf>
 8003998:	4603      	mov	r3, r0
 800399a:	b29a      	uxth	r2, r3
 800399c:	89bb      	ldrh	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	81bb      	strh	r3, [r7, #12]
							strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3310      	adds	r3, #16
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	491a      	ldr	r1, [pc, #104]	; (8003a14 <HC05Driver_setPassword+0xfc>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 fad2 	bl	8004f54 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681c      	ldr	r4, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f103 0510 	add.w	r5, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3310      	adds	r3, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fc48 	bl	8000254 <strlen>
 80039c4:	4603      	mov	r3, r0
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3310      	adds	r3, #16
 80039cc:	210a      	movs	r1, #10
 80039ce:	9101      	str	r1, [sp, #4]
 80039d0:	2180      	movs	r1, #128	; 0x80
 80039d2:	9100      	str	r1, [sp, #0]
 80039d4:	4629      	mov	r1, r5
 80039d6:	4620      	mov	r0, r4
 80039d8:	f001 f853 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HC05Driver_setPassword+0xce>
			return HC05Driver_Status_Error;
 80039e2:	2305      	movs	r3, #5
 80039e4:	e00c      	b.n	8003a00 <HC05Driver_setPassword+0xe8>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3310      	adds	r3, #16
 80039ea:	2202      	movs	r2, #2
 80039ec:	490a      	ldr	r1, [pc, #40]	; (8003a18 <HC05Driver_setPassword+0x100>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fae8 	bl	8004fc4 <strncmp>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HC05Driver_setPassword+0xe6>
			return HC05Driver_Status_Error;
 80039fa:	2305      	movs	r3, #5
 80039fc:	e000      	b.n	8003a00 <HC05Driver_setPassword+0xe8>
		}
	}

	return HC05Driver_Status_OK;
 80039fe:	2300      	movs	r3, #0

}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdb0      	pop	{r4, r5, r7, pc}
 8003a08:	08006590 	.word	0x08006590
 8003a0c:	080065dc 	.word	0x080065dc
 8003a10:	080065c0 	.word	0x080065c0
 8003a14:	08006594 	.word	0x08006594
 8003a18:	08006598 	.word	0x08006598

08003a1c <HC05Driver_getDeviceName>:

HC05Driver_Status_TypeDef HC05Driver_getDeviceName(HC05Driver_TypeDef* pSelf, char* pRetDeviceName){
 8003a1c:	b5b0      	push	{r4, r5, r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7a1b      	ldrb	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HC05Driver_getDeviceName+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e074      	b.n	8003b1c <HC05Driver_getDeviceName+0x100>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fc94 	bl	8004360 <HC05Driver_setATMode>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HC05Driver_getDeviceName+0x2a>
		return ret;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	e06a      	b.n	8003b1c <HC05Driver_getDeviceName+0x100>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3310      	adds	r3, #16
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	4935      	ldr	r1, [pc, #212]	; (8003b24 <HC05Driver_getDeviceName+0x108>)
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 faa3 	bl	8004f9a <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_NAME_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3310      	adds	r3, #16
 8003a58:	2280      	movs	r2, #128	; 0x80
 8003a5a:	4933      	ldr	r1, [pc, #204]	; (8003b28 <HC05Driver_getDeviceName+0x10c>)
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 fa79 	bl	8004f54 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3310      	adds	r3, #16
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	4930      	ldr	r1, [pc, #192]	; (8003b2c <HC05Driver_getDeviceName+0x110>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fa72 	bl	8004f54 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681c      	ldr	r4, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 0510 	add.w	r5, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3310      	adds	r3, #16
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fbe8 	bl	8000254 <strlen>
 8003a84:	4603      	mov	r3, r0
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3310      	adds	r3, #16
 8003a8c:	210a      	movs	r1, #10
 8003a8e:	9101      	str	r1, [sp, #4]
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	9100      	str	r1, [sp, #0]
 8003a94:	4629      	mov	r1, r5
 8003a96:	4620      	mov	r0, r4
 8003a98:	f000 fff3 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HC05Driver_getDeviceName+0x8a>
		return HC05Driver_Status_Error;
 8003aa2:	2305      	movs	r3, #5
 8003aa4:	e03a      	b.n	8003b1c <HC05Driver_getDeviceName+0x100>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3310      	adds	r3, #16
 8003aaa:	4920      	ldr	r1, [pc, #128]	; (8003b2c <HC05Driver_getDeviceName+0x110>)
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 faaf 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_NAME_AT_COMMNAND_RESPONSE, strlen(HC05_GET_NAME_AT_COMMNAND_RESPONSE)) != 0){
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3310      	adds	r3, #16
 8003ab6:	2206      	movs	r2, #6
 8003ab8:	491d      	ldr	r1, [pc, #116]	; (8003b30 <HC05Driver_getDeviceName+0x114>)
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fa82 	bl	8004fc4 <strncmp>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HC05Driver_getDeviceName+0xae>
		return HC05Driver_Status_Error;
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	e028      	b.n	8003b1c <HC05Driver_getDeviceName+0x100>
	}

	strncpy(pRetDeviceName, (char*)(pSelf->buffer+strlen(HC05_GET_NAME_AT_COMMNAND_RESPONSE)), HC05_MAX_NAME_LENGTH);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3310      	adds	r3, #16
 8003ace:	3306      	adds	r3, #6
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6838      	ldr	r0, [r7, #0]
 8003ad6:	f001 fa87 	bl	8004fe8 <strncpy>

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f103 0110 	add.w	r1, r3, #16
 8003ae4:	230a      	movs	r3, #10
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	f000 ff72 	bl	80049d0 <UartDriver_receiveBytesTerminationSign>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HC05Driver_getDeviceName+0xda>
		return HC05Driver_Status_Error;
 8003af2:	2305      	movs	r3, #5
 8003af4:	e012      	b.n	8003b1c <HC05Driver_getDeviceName+0x100>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3310      	adds	r3, #16
 8003afa:	490c      	ldr	r1, [pc, #48]	; (8003b2c <HC05Driver_getDeviceName+0x110>)
 8003afc:	4618      	mov	r0, r3
 8003afe:	f001 fa87 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3310      	adds	r3, #16
 8003b06:	2202      	movs	r2, #2
 8003b08:	490a      	ldr	r1, [pc, #40]	; (8003b34 <HC05Driver_getDeviceName+0x118>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fa5a 	bl	8004fc4 <strncmp>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HC05Driver_getDeviceName+0xfe>
		return HC05Driver_Status_Error;
 8003b16:	2305      	movs	r3, #5
 8003b18:	e000      	b.n	8003b1c <HC05Driver_getDeviceName+0x100>
	}

	return HC05Driver_Status_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bdb0      	pop	{r4, r5, r7, pc}
 8003b24:	08006590 	.word	0x08006590
 8003b28:	080065e4 	.word	0x080065e4
 8003b2c:	08006594 	.word	0x08006594
 8003b30:	080065ec 	.word	0x080065ec
 8003b34:	08006598 	.word	0x08006598

08003b38 <HC05Driver_setDeviceName>:

HC05Driver_Status_TypeDef HC05Driver_setDeviceName(HC05Driver_TypeDef* pSelf, char* deviceName){
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b08e      	sub	sp, #56	; 0x38
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7a1b      	ldrb	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HC05Driver_setDeviceName+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e069      	b.n	8003c22 <HC05Driver_setDeviceName+0xea>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fc06 	bl	8004360 <HC05Driver_setATMode>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HC05Driver_setDeviceName+0x30>
		return ret;
 8003b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b66:	e05c      	b.n	8003c22 <HC05Driver_setDeviceName+0xea>
	}

	char currentName[HC05_MAX_NAME_LENGTH];
	if ((ret = HC05Driver_getDeviceName(pSelf, currentName)) != HC05Driver_Status_OK){
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ff54 	bl	8003a1c <HC05Driver_getDeviceName>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HC05Driver_setDeviceName+0x50>
		return ret;
 8003b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b86:	e04c      	b.n	8003c22 <HC05Driver_setDeviceName+0xea>
	}

	if (strcmp(currentName, deviceName) != 0){
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fb56 	bl	8000240 <strcmp>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d042      	beq.n	8003c20 <HC05Driver_setDeviceName+0xe8>

		strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3310      	adds	r3, #16
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	4922      	ldr	r1, [pc, #136]	; (8003c2c <HC05Driver_setDeviceName+0xf4>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 f9f9 	bl	8004f9a <strlcpy>
		strlcat((char*)pSelf->buffer, HC05_SET_NAME_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3310      	adds	r3, #16
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	4920      	ldr	r1, [pc, #128]	; (8003c30 <HC05Driver_setDeviceName+0xf8>)
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f9cf 	bl	8004f54 <strlcat>
		strlcat((char*)pSelf->buffer, deviceName,  HC05_BUFFER_SIZE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3310      	adds	r3, #16
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f9c8 	bl	8004f54 <strlcat>
		strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3310      	adds	r3, #16
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	491a      	ldr	r1, [pc, #104]	; (8003c34 <HC05Driver_setDeviceName+0xfc>)
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 f9c1 	bl	8004f54 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681c      	ldr	r4, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f103 0510 	add.w	r5, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3310      	adds	r3, #16
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fb37 	bl	8000254 <strlen>
 8003be6:	4603      	mov	r3, r0
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3310      	adds	r3, #16
 8003bee:	210a      	movs	r1, #10
 8003bf0:	9101      	str	r1, [sp, #4]
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	9100      	str	r1, [sp, #0]
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f000 ff42 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HC05Driver_setDeviceName+0xd0>
			return HC05Driver_Status_Error;
 8003c04:	2305      	movs	r3, #5
 8003c06:	e00c      	b.n	8003c22 <HC05Driver_setDeviceName+0xea>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3310      	adds	r3, #16
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	490a      	ldr	r1, [pc, #40]	; (8003c38 <HC05Driver_setDeviceName+0x100>)
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 f9d7 	bl	8004fc4 <strncmp>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HC05Driver_setDeviceName+0xe8>
			return HC05Driver_Status_Error;
 8003c1c:	2305      	movs	r3, #5
 8003c1e:	e000      	b.n	8003c22 <HC05Driver_setDeviceName+0xea>
		}
	}

	return HC05Driver_Status_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3730      	adds	r7, #48	; 0x30
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08006590 	.word	0x08006590
 8003c30:	080065f4 	.word	0x080065f4
 8003c34:	08006594 	.word	0x08006594
 8003c38:	08006598 	.word	0x08006598

08003c3c <HC05Driver_getDeviceRole>:

HC05Driver_Status_TypeDef HC05Driver_getDeviceRole(HC05Driver_TypeDef* pSelf, HC05Driver_Role_TypeDef* pRetRole){
 8003c3c:	b5b0      	push	{r4, r5, r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7a1b      	ldrb	r3, [r3, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HC05Driver_getDeviceRole+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e076      	b.n	8003d40 <HC05Driver_getDeviceRole+0x104>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fb84 	bl	8004360 <HC05Driver_setATMode>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HC05Driver_getDeviceRole+0x2a>
		return ret;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	e06c      	b.n	8003d40 <HC05Driver_getDeviceRole+0x104>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3310      	adds	r3, #16
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	4936      	ldr	r1, [pc, #216]	; (8003d48 <HC05Driver_getDeviceRole+0x10c>)
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f993 	bl	8004f9a <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_ROLE_AT_COMMAND, HC05_BUFFER_SIZE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3310      	adds	r3, #16
 8003c78:	2280      	movs	r2, #128	; 0x80
 8003c7a:	4934      	ldr	r1, [pc, #208]	; (8003d4c <HC05Driver_getDeviceRole+0x110>)
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 f969 	bl	8004f54 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3310      	adds	r3, #16
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	4931      	ldr	r1, [pc, #196]	; (8003d50 <HC05Driver_getDeviceRole+0x114>)
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 f962 	bl	8004f54 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681c      	ldr	r4, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f103 0510 	add.w	r5, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3310      	adds	r3, #16
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fad8 	bl	8000254 <strlen>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3310      	adds	r3, #16
 8003cac:	210a      	movs	r1, #10
 8003cae:	9101      	str	r1, [sp, #4]
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	9100      	str	r1, [sp, #0]
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 fee3 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HC05Driver_getDeviceRole+0x8a>
		return HC05Driver_Status_Error;
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	e03c      	b.n	8003d40 <HC05Driver_getDeviceRole+0x104>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3310      	adds	r3, #16
 8003cca:	4921      	ldr	r1, [pc, #132]	; (8003d50 <HC05Driver_getDeviceRole+0x114>)
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f99f 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_ROLE_AT_COMMNAND_RESPONSE, strlen(HC05_GET_ROLE_AT_COMMNAND_RESPONSE)) != 0){
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	2206      	movs	r2, #6
 8003cd8:	491e      	ldr	r1, [pc, #120]	; (8003d54 <HC05Driver_getDeviceRole+0x118>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 f972 	bl	8004fc4 <strncmp>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HC05Driver_getDeviceRole+0xae>
		return HC05Driver_Status_Error;
 8003ce6:	2305      	movs	r3, #5
 8003ce8:	e02a      	b.n	8003d40 <HC05Driver_getDeviceRole+0x104>
	}

	*pRetRole = atoi((char*)(pSelf->buffer + strlen(HC05_GET_ROLE_AT_COMMNAND_RESPONSE)));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3310      	adds	r3, #16
 8003cee:	3306      	adds	r3, #6
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f8de 	bl	8004eb2 <atoi>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	701a      	strb	r2, [r3, #0]

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f103 0110 	add.w	r1, r3, #16
 8003d08:	230a      	movs	r3, #10
 8003d0a:	2280      	movs	r2, #128	; 0x80
 8003d0c:	f000 fe60 	bl	80049d0 <UartDriver_receiveBytesTerminationSign>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HC05Driver_getDeviceRole+0xde>
		return HC05Driver_Status_Error;
 8003d16:	2305      	movs	r3, #5
 8003d18:	e012      	b.n	8003d40 <HC05Driver_getDeviceRole+0x104>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	490c      	ldr	r1, [pc, #48]	; (8003d50 <HC05Driver_getDeviceRole+0x114>)
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f975 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3310      	adds	r3, #16
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	490a      	ldr	r1, [pc, #40]	; (8003d58 <HC05Driver_getDeviceRole+0x11c>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 f948 	bl	8004fc4 <strncmp>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HC05Driver_getDeviceRole+0x102>
		return HC05Driver_Status_Error;
 8003d3a:	2305      	movs	r3, #5
 8003d3c:	e000      	b.n	8003d40 <HC05Driver_getDeviceRole+0x104>
	}

	return HC05Driver_Status_OK;
 8003d3e:	2300      	movs	r3, #0

}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bdb0      	pop	{r4, r5, r7, pc}
 8003d48:	08006590 	.word	0x08006590
 8003d4c:	080065fc 	.word	0x080065fc
 8003d50:	08006594 	.word	0x08006594
 8003d54:	08006604 	.word	0x08006604
 8003d58:	08006598 	.word	0x08006598

08003d5c <HC05Driver_setDeviceRole>:

HC05Driver_Status_TypeDef HC05Driver_setDeviceRole(HC05Driver_TypeDef* pSelf, HC05Driver_Role_TypeDef role){
 8003d5c:	b5b0      	push	{r4, r5, r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7a1b      	ldrb	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HC05Driver_setDeviceRole+0x18>
		return HC05Driver_Status_UnInitializedError;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e068      	b.n	8003e46 <HC05Driver_setDeviceRole+0xea>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 faf3 	bl	8004360 <HC05Driver_setATMode>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	73fb      	strb	r3, [r7, #15]
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HC05Driver_setDeviceRole+0x2c>
		return ret;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	e05e      	b.n	8003e46 <HC05Driver_setDeviceRole+0xea>
	}

	HC05Driver_Role_TypeDef	currentRole;
	if ((ret = HC05Driver_getDeviceRole(pSelf, &currentRole)) != HC05Driver_Status_OK){
 8003d88:	f107 030b 	add.w	r3, r7, #11
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ff54 	bl	8003c3c <HC05Driver_getDeviceRole>
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HC05Driver_setDeviceRole+0x46>
		return ret;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	e051      	b.n	8003e46 <HC05Driver_setDeviceRole+0xea>
	}

	if (role != currentRole){
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d04c      	beq.n	8003e44 <HC05Driver_setDeviceRole+0xe8>

							strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3310      	adds	r3, #16
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	4927      	ldr	r1, [pc, #156]	; (8003e50 <HC05Driver_setDeviceRole+0xf4>)
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f8f1 	bl	8004f9a <strlcpy>
		uint16_t length = 	strlcat((char*)pSelf->buffer, HC05_SET_PSWD_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3310      	adds	r3, #16
 8003dbc:	2280      	movs	r2, #128	; 0x80
 8003dbe:	4925      	ldr	r1, [pc, #148]	; (8003e54 <HC05Driver_setDeviceRole+0xf8>)
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 f8c7 	bl	8004f54 <strlcat>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, "%du", role);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f103 0210 	add.w	r2, r3, #16
 8003dd0:	89bb      	ldrh	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	4920      	ldr	r1, [pc, #128]	; (8003e58 <HC05Driver_setDeviceRole+0xfc>)
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f89b 	bl	8004f14 <siprintf>
 8003dde:	4603      	mov	r3, r0
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	89bb      	ldrh	r3, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	81bb      	strh	r3, [r7, #12]
							strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3310      	adds	r3, #16
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	491b      	ldr	r1, [pc, #108]	; (8003e5c <HC05Driver_setDeviceRole+0x100>)
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 f8af 	bl	8004f54 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681c      	ldr	r4, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f103 0510 	add.w	r5, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3310      	adds	r3, #16
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fc fa25 	bl	8000254 <strlen>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3310      	adds	r3, #16
 8003e12:	210a      	movs	r1, #10
 8003e14:	9101      	str	r1, [sp, #4]
 8003e16:	2180      	movs	r1, #128	; 0x80
 8003e18:	9100      	str	r1, [sp, #0]
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	f000 fe30 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HC05Driver_setDeviceRole+0xd0>
			return HC05Driver_Status_Error;
 8003e28:	2305      	movs	r3, #5
 8003e2a:	e00c      	b.n	8003e46 <HC05Driver_setDeviceRole+0xea>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3310      	adds	r3, #16
 8003e30:	2202      	movs	r2, #2
 8003e32:	490b      	ldr	r1, [pc, #44]	; (8003e60 <HC05Driver_setDeviceRole+0x104>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 f8c5 	bl	8004fc4 <strncmp>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HC05Driver_setDeviceRole+0xe8>
			return HC05Driver_Status_Error;
 8003e40:	2305      	movs	r3, #5
 8003e42:	e000      	b.n	8003e46 <HC05Driver_setDeviceRole+0xea>
		}
	}

	return HC05Driver_Status_OK;
 8003e44:	2300      	movs	r3, #0

}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	08006590 	.word	0x08006590
 8003e54:	080065dc 	.word	0x080065dc
 8003e58:	0800660c 	.word	0x0800660c
 8003e5c:	08006594 	.word	0x08006594
 8003e60:	08006598 	.word	0x08006598

08003e64 <HC05Driver_getState>:

HC05Driver_Status_TypeDef HC05Driver_getState(HC05Driver_TypeDef* pSelf, HC05Driver_State_TypeDef* pRetState){
 8003e64:	b5b0      	push	{r4, r5, r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized || pSelf->state == HC05Driver_State_HardAT){
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7a1b      	ldrb	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HC05Driver_getState+0x1a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7a1b      	ldrb	r3, [r3, #8]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <HC05Driver_getState+0x26>
		*pRetState = pSelf->state;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	7a1a      	ldrb	r2, [r3, #8]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
		return HC05Driver_Status_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e0e6      	b.n	8004058 <HC05Driver_getState+0x1f4>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa68 	bl	8004360 <HC05Driver_setATMode>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HC05Driver_getState+0x3a>
		return ret;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
 8003e9c:	e0dc      	b.n	8004058 <HC05Driver_getState+0x1f4>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3310      	adds	r3, #16
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	496e      	ldr	r1, [pc, #440]	; (8004060 <HC05Driver_getState+0x1fc>)
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f877 	bl	8004f9a <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_STATE_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3310      	adds	r3, #16
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	496c      	ldr	r1, [pc, #432]	; (8004064 <HC05Driver_getState+0x200>)
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f84d 	bl	8004f54 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	4969      	ldr	r1, [pc, #420]	; (8004068 <HC05Driver_getState+0x204>)
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 f846 	bl	8004f54 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681c      	ldr	r4, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f103 0510 	add.w	r5, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3310      	adds	r3, #16
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc f9bc 	bl	8000254 <strlen>
 8003edc:	4603      	mov	r3, r0
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3310      	adds	r3, #16
 8003ee4:	210a      	movs	r1, #10
 8003ee6:	9101      	str	r1, [sp, #4]
 8003ee8:	2180      	movs	r1, #128	; 0x80
 8003eea:	9100      	str	r1, [sp, #0]
 8003eec:	4629      	mov	r1, r5
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 fdc7 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HC05Driver_getState+0x9a>
		return HC05Driver_Status_Error;
 8003efa:	2305      	movs	r3, #5
 8003efc:	e0ac      	b.n	8004058 <HC05Driver_getState+0x1f4>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3310      	adds	r3, #16
 8003f02:	4959      	ldr	r1, [pc, #356]	; (8004068 <HC05Driver_getState+0x204>)
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 f883 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_STATE_AT_COMMNAND_RESPONSE, strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)) != 0){
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	2207      	movs	r2, #7
 8003f10:	4956      	ldr	r1, [pc, #344]	; (800406c <HC05Driver_getState+0x208>)
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f856 	bl	8004fc4 <strncmp>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HC05Driver_getState+0xbe>
		return HC05Driver_Status_Error;
 8003f1e:	2305      	movs	r3, #5
 8003f20:	e09a      	b.n	8004058 <HC05Driver_getState+0x1f4>
	}

	if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_INITIALIZED_RESPONSE, strlen(HC05_INITIALIZED_RESPONSE)) == 0){
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3310      	adds	r3, #16
 8003f26:	3307      	adds	r3, #7
 8003f28:	220b      	movs	r2, #11
 8003f2a:	4951      	ldr	r1, [pc, #324]	; (8004070 <HC05Driver_getState+0x20c>)
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f849 	bl	8004fc4 <strncmp>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <HC05Driver_getState+0xdc>
		*pRetState = HC05Driver_State_Initialized;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e06a      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_READY_RESPONSE, strlen(HC05_READY_RESPONSE)) == 0){
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3310      	adds	r3, #16
 8003f44:	3307      	adds	r3, #7
 8003f46:	2205      	movs	r2, #5
 8003f48:	494a      	ldr	r1, [pc, #296]	; (8004074 <HC05Driver_getState+0x210>)
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f83a 	bl	8004fc4 <strncmp>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HC05Driver_getState+0xfa>
		*pRetState = HC05Driver_State_Ready;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e05b      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_PAIRABLE_RESPONSE, strlen(HC05_PAIRABLE_RESPONSE)) == 0){
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3310      	adds	r3, #16
 8003f62:	3307      	adds	r3, #7
 8003f64:	2208      	movs	r2, #8
 8003f66:	4944      	ldr	r1, [pc, #272]	; (8004078 <HC05Driver_getState+0x214>)
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 f82b 	bl	8004fc4 <strncmp>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <HC05Driver_getState+0x118>
		*pRetState = HC05Driver_State_Pairable;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2205      	movs	r2, #5
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e04c      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_PAIRED_RESPONSE, strlen(HC05_PAIRED_RESPONSE)) == 0){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	3307      	adds	r3, #7
 8003f82:	2206      	movs	r2, #6
 8003f84:	493d      	ldr	r1, [pc, #244]	; (800407c <HC05Driver_getState+0x218>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 f81c 	bl	8004fc4 <strncmp>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HC05Driver_getState+0x136>
		*pRetState = HC05Driver_State_Paired;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2206      	movs	r2, #6
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e03d      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_INQUIRING_RESPONSE, strlen(HC05_PAIRED_RESPONSE)) == 0){
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	3307      	adds	r3, #7
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	4937      	ldr	r1, [pc, #220]	; (8004080 <HC05Driver_getState+0x21c>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 f80d 	bl	8004fc4 <strncmp>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <HC05Driver_getState+0x154>
		*pRetState = HC05Driver_State_Inquiring;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2207      	movs	r2, #7
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e02e      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_CONNECTING_RESPONSE, strlen(HC05_CONNECTING_RESPONSE)) == 0){
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3310      	adds	r3, #16
 8003fbc:	3307      	adds	r3, #7
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	4930      	ldr	r1, [pc, #192]	; (8004084 <HC05Driver_getState+0x220>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fffe 	bl	8004fc4 <strncmp>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HC05Driver_getState+0x172>
		*pRetState = HC05Driver_State_Connecting;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e01f      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_CONNECTED_RESPONSE, strlen(HC05_CONNECTED_RESPONSE)) == 0){
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3310      	adds	r3, #16
 8003fda:	3307      	adds	r3, #7
 8003fdc:	2209      	movs	r2, #9
 8003fde:	492a      	ldr	r1, [pc, #168]	; (8004088 <HC05Driver_getState+0x224>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 ffef 	bl	8004fc4 <strncmp>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d103      	bne.n	8003ff4 <HC05Driver_getState+0x190>
		*pRetState = HC05Driver_State_Connected;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2209      	movs	r2, #9
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e010      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_DISCONNECTED_RESPONSE, strlen(HC05_DISCONNECTED_RESPONSE)) == 0){
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3310      	adds	r3, #16
 8003ff8:	3307      	adds	r3, #7
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	4923      	ldr	r1, [pc, #140]	; (800408c <HC05Driver_getState+0x228>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 ffe0 	bl	8004fc4 <strncmp>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HC05Driver_getState+0x1ae>
		*pRetState = HC05Driver_State_Disconnected;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	220a      	movs	r2, #10
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e001      	b.n	8004016 <HC05Driver_getState+0x1b2>
	} else {
		return HC05Driver_Status_Error;
 8004012:	2305      	movs	r3, #5
 8004014:	e020      	b.n	8004058 <HC05Driver_getState+0x1f4>
	}

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0110 	add.w	r1, r3, #16
 8004020:	230a      	movs	r3, #10
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	f000 fcd4 	bl	80049d0 <UartDriver_receiveBytesTerminationSign>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HC05Driver_getState+0x1ce>
		return HC05Driver_Status_Error;
 800402e:	2305      	movs	r3, #5
 8004030:	e012      	b.n	8004058 <HC05Driver_getState+0x1f4>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3310      	adds	r3, #16
 8004036:	490c      	ldr	r1, [pc, #48]	; (8004068 <HC05Driver_getState+0x204>)
 8004038:	4618      	mov	r0, r3
 800403a:	f000 ffe9 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3310      	adds	r3, #16
 8004042:	2202      	movs	r2, #2
 8004044:	4912      	ldr	r1, [pc, #72]	; (8004090 <HC05Driver_getState+0x22c>)
 8004046:	4618      	mov	r0, r3
 8004048:	f000 ffbc 	bl	8004fc4 <strncmp>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HC05Driver_getState+0x1f2>
		return HC05Driver_Status_Error;
 8004052:	2305      	movs	r3, #5
 8004054:	e000      	b.n	8004058 <HC05Driver_getState+0x1f4>
	}

	return HC05Driver_Status_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bdb0      	pop	{r4, r5, r7, pc}
 8004060:	08006590 	.word	0x08006590
 8004064:	08006610 	.word	0x08006610
 8004068:	08006594 	.word	0x08006594
 800406c:	08006618 	.word	0x08006618
 8004070:	08006620 	.word	0x08006620
 8004074:	0800662c 	.word	0x0800662c
 8004078:	08006634 	.word	0x08006634
 800407c:	08006640 	.word	0x08006640
 8004080:	08006648 	.word	0x08006648
 8004084:	08006654 	.word	0x08006654
 8004088:	08006660 	.word	0x08006660
 800408c:	0800666c 	.word	0x0800666c
 8004090:	08006598 	.word	0x08006598

08004094 <HC05Driver_setReceiveDataCallback>:

	return HC05Driver_Status_OK;

}

HC05Driver_Status_TypeDef HC05Driver_setReceiveDataCallback(HC05Driver_TypeDef* pSelf, void (*foo)(uint8_t byte, void* pArgs), void* pArgs, HC05Driver_CallbackIterator_TypeDef* pRetCallbackIterator){
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	7a1b      	ldrb	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HC05Driver_setReceiveDataCallback+0x1a>
		return HC05Driver_Status_UnInitializedError;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e052      	b.n	8004154 <HC05Driver_setReceiveDataCallback+0xc0>
	}

	DigitalOutDriver_State_TypeDef	keyState;
	if (DigitalOutDriver_getState(pSelf->pKeyPinDriver, &keyState) != DigitalOutDriver_Status_OK){
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f107 0215 	add.w	r2, r7, #21
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe ffb2 	bl	8003022 <DigitalOutDriver_getState>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HC05Driver_setReceiveDataCallback+0x34>
		return HC05Driver_Status_Error;
 80040c4:	2305      	movs	r3, #5
 80040c6:	e045      	b.n	8004154 <HC05Driver_setReceiveDataCallback+0xc0>
	}

	uint16_t i;
	for (i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80040c8:	2300      	movs	r3, #0
 80040ca:	82fb      	strh	r3, [r7, #22]
 80040cc:	e020      	b.n	8004110 <HC05Driver_setReceiveDataCallback+0x7c>
		if (pSelf->callbacks[i] == NULL){
 80040ce:	8afb      	ldrh	r3, [r7, #22]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	3324      	adds	r3, #36	; 0x24
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d115      	bne.n	800410a <HC05Driver_setReceiveDataCallback+0x76>
			pSelf->callbacks[i] = foo;
 80040de:	8afb      	ldrh	r3, [r7, #22]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	605a      	str	r2, [r3, #4]
			pSelf->callbackArgs[i] = pArgs;
 80040ec:	8afb      	ldrh	r3, [r7, #22]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	3326      	adds	r3, #38	; 0x26
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	605a      	str	r2, [r3, #4]
			pSelf->callbacksIterators[i] = -1;
 80040fa:	8afa      	ldrh	r2, [r7, #22]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3248      	adds	r2, #72	; 0x48
 8004100:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004104:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			break;
 8004108:	e005      	b.n	8004116 <HC05Driver_setReceiveDataCallback+0x82>
	for (i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	3301      	adds	r3, #1
 800410e:	82fb      	strh	r3, [r7, #22]
 8004110:	8afb      	ldrh	r3, [r7, #22]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d9db      	bls.n	80040ce <HC05Driver_setReceiveDataCallback+0x3a>
		}
	}

	if (pRetCallbackIterator != NULL){
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HC05Driver_setReceiveDataCallback+0x90>
		*pRetCallbackIterator = (HC05Driver_CallbackIterator_TypeDef)i;
 800411c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	801a      	strh	r2, [r3, #0]
	}

	if (!(pSelf->state == HC05Driver_State_HardAT || keyState == DigitalOutDriver_State_High_Stady)){
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	7a1b      	ldrb	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d012      	beq.n	8004152 <HC05Driver_setReceiveDataCallback+0xbe>
 800412c:	7d7b      	ldrb	r3, [r7, #21]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d00f      	beq.n	8004152 <HC05Driver_setReceiveDataCallback+0xbe>

		if (UartDriver_setReceiveDataCallback(pSelf->pUartDriver, foo, pArgs, &pSelf->callbacksIterators[i]) != UartDriver_Status_OK){
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	8afb      	ldrh	r3, [r7, #22]
 8004138:	3348      	adds	r3, #72	; 0x48
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	f000 fccc 	bl	8004ae0 <UartDriver_setReceiveDataCallback>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HC05Driver_setReceiveDataCallback+0xbe>
			return HC05Driver_Status_Error;
 800414e:	2305      	movs	r3, #5
 8004150:	e000      	b.n	8004154 <HC05Driver_setReceiveDataCallback+0xc0>
		}
	}

	return HC05Driver_Status_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HC05Driver_setDataMode>:
	}

	return HC05Driver_Status_OK;
}

static HC05Driver_Status_TypeDef HC05Driver_setDataMode(HC05Driver_TypeDef* pSelf){
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7a1b      	ldrb	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HC05Driver_setDataMode+0x14>
		return HC05Driver_Status_UnInitializedError;
 800416c:	2301      	movs	r3, #1
 800416e:	e03f      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	}

	if (pSelf->state == HC05Driver_State_HardAT){
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7a1b      	ldrb	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HC05Driver_setDataMode+0x20>
		return HC05Driver_Status_Error;
 8004178:	2305      	movs	r3, #5
 800417a:	e039      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	}

	if (DigitalOutDriver_setLow(pSelf->pKeyPinDriver) != DigitalOutDriver_Status_OK){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe ff79 	bl	8003078 <DigitalOutDriver_setLow>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HC05Driver_setDataMode+0x34>
		return HC05Driver_Status_Error;
 800418c:	2305      	movs	r3, #5
 800418e:	e02f      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	}

	HAL_Delay(HC05_AT_MODE_DELAY_MS);
 8004190:	201e      	movs	r0, #30
 8004192:	f7fc fa97 	bl	80006c4 <HAL_Delay>

	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8004196:	2300      	movs	r3, #0
 8004198:	81fb      	strh	r3, [r7, #14]
 800419a:	e025      	b.n	80041e8 <HC05Driver_setDataMode+0x8c>
		if (pSelf->callbacks[i] != NULL){
 800419c:	89fb      	ldrh	r3, [r7, #14]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	3324      	adds	r3, #36	; 0x24
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01a      	beq.n	80041e2 <HC05Driver_setDataMode+0x86>
			if (UartDriver_setReceiveDataCallback(pSelf->pUartDriver, pSelf->callbacks[i], pSelf->callbackArgs[i], &pSelf->callbacksIterators[i]) != UartDriver_Status_OK){
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	89fb      	ldrh	r3, [r7, #14]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	3324      	adds	r3, #36	; 0x24
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	3326      	adds	r3, #38	; 0x26
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	685c      	ldr	r4, [r3, #4]
 80041c8:	89fb      	ldrh	r3, [r7, #14]
 80041ca:	3348      	adds	r3, #72	; 0x48
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	4622      	mov	r2, r4
 80041d4:	f000 fc84 	bl	8004ae0 <UartDriver_setReceiveDataCallback>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HC05Driver_setDataMode+0x86>
				return HC05Driver_Status_Error;
 80041de:	2305      	movs	r3, #5
 80041e0:	e006      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	3301      	adds	r3, #1
 80041e6:	81fb      	strh	r3, [r7, #14]
 80041e8:	89fb      	ldrh	r3, [r7, #14]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d9d6      	bls.n	800419c <HC05Driver_setDataMode+0x40>
			}
		}
	}

	return HC05Driver_Status_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}

080041f8 <HC05Driver_resetNormalMode>:

static HC05Driver_Status_TypeDef HC05Driver_resetNormalMode(HC05Driver_TypeDef* pSelf){
 80041f8:	b5b0      	push	{r4, r5, r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]

	// assume module initialized
	HC05Driver_State_TypeDef state;
	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_getState(pSelf, &state)) != HC05Driver_Status_OK){
 8004200:	f107 030e 	add.w	r3, r7, #14
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fe2c 	bl	8003e64 <HC05Driver_getState>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HC05Driver_resetNormalMode+0x22>
		return ret;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	e096      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	if (state != HC05Driver_State_HardAT){
 800421a:	7bbb      	ldrb	r3, [r7, #14]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HC05Driver_resetNormalMode+0x2c>
		return HC05Driver_Status_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e091      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	if (DigitalOutDriver_setLow(pSelf->pKeyPinDriver) != DigitalOutDriver_Status_OK){
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe ff25 	bl	8003078 <DigitalOutDriver_setLow>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HC05Driver_resetNormalMode+0x40>
		return HC05Driver_Status_Error;
 8004234:	2305      	movs	r3, #5
 8004236:	e087      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3310      	adds	r3, #16
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	4944      	ldr	r1, [pc, #272]	; (8004350 <HC05Driver_resetNormalMode+0x158>)
 8004240:	4618      	mov	r0, r3
 8004242:	f000 feaa 	bl	8004f9a <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_AT_RESET_COMMAND, HC05_BUFFER_SIZE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3310      	adds	r3, #16
 800424a:	2280      	movs	r2, #128	; 0x80
 800424c:	4941      	ldr	r1, [pc, #260]	; (8004354 <HC05Driver_resetNormalMode+0x15c>)
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fe80 	bl	8004f54 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3310      	adds	r3, #16
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	493f      	ldr	r1, [pc, #252]	; (8004358 <HC05Driver_resetNormalMode+0x160>)
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe79 	bl	8004f54 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681c      	ldr	r4, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f103 0510 	add.w	r5, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3310      	adds	r3, #16
 8004270:	4618      	mov	r0, r3
 8004272:	f7fb ffef 	bl	8000254 <strlen>
 8004276:	4603      	mov	r3, r0
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3310      	adds	r3, #16
 800427e:	210a      	movs	r1, #10
 8004280:	9101      	str	r1, [sp, #4]
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	9100      	str	r1, [sp, #0]
 8004286:	4629      	mov	r1, r5
 8004288:	4620      	mov	r0, r4
 800428a:	f000 fbfa 	bl	8004a82 <UartDriver_sendAndReceiveTerminationSign>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HC05Driver_resetNormalMode+0xa0>
		return HC05Driver_Status_Error;
 8004294:	2305      	movs	r3, #5
 8004296:	e057      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3310      	adds	r3, #16
 800429c:	492e      	ldr	r1, [pc, #184]	; (8004358 <HC05Driver_resetNormalMode+0x160>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 feb6 	bl	8005010 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3310      	adds	r3, #16
 80042a8:	2202      	movs	r2, #2
 80042aa:	492c      	ldr	r1, [pc, #176]	; (800435c <HC05Driver_resetNormalMode+0x164>)
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fe89 	bl	8004fc4 <strncmp>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HC05Driver_resetNormalMode+0xc4>
		return HC05Driver_Status_Error;
 80042b8:	2305      	movs	r3, #5
 80042ba:	e045      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	pSelf->state = HC05Driver_State_Data;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	721a      	strb	r2, [r3, #8]

	uint32_t	tmpUartBaudRate;
	if (UartDriver_getBaudRate(pSelf->pUartDriver, &tmpUartBaudRate) != UartDriver_Status_OK){
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f107 0208 	add.w	r2, r7, #8
 80042ca:	4611      	mov	r1, r2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fb19 	bl	8004904 <UartDriver_getBaudRate>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HC05Driver_resetNormalMode+0xe4>
		return HC05Driver_Status_Error;
 80042d8:	2305      	movs	r3, #5
 80042da:	e035      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	if (tmpUartBaudRate != pSelf->dataBaudRate){
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d00c      	beq.n	8004300 <HC05Driver_resetNormalMode+0x108>
		if (UartDriver_setBaudRate(pSelf->pUartDriver, pSelf->dataBaudRate) != UartDriver_Status_OK){
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f000 fb1d 	bl	8004930 <UartDriver_setBaudRate>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HC05Driver_resetNormalMode+0x108>
			return ret;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	e023      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
		}
	}

	HAL_Delay(HC05_START_UP_DELAY_MS); //TODO Zamiast delay zrobic while'a ktory bedzie wysylal komende z timeoutem kilka razy i czekal az w koncu dostanie odpowiedz
 8004300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004304:	f7fc f9de 	bl	80006c4 <HAL_Delay>

	if ((ret = HC05Driver_sendTestATCommand(pSelf)) != HC05Driver_Status_OK){
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff f8e1 	bl	80034d0 <HC05Driver_sendTestATCommand>
 800430e:	4603      	mov	r3, r0
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HC05Driver_resetNormalMode+0x124>
		return ret;
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	e015      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	if ((ret = HC05Driver_getState(pSelf, &state)) != HC05Driver_Status_OK){
 800431c:	f107 030e 	add.w	r3, r7, #14
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff fd9e 	bl	8003e64 <HC05Driver_getState>
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HC05Driver_resetNormalMode+0x13e>
		return ret;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	e008      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	if (state == HC05Driver_State_HardAT){
 8004336:	7bbb      	ldrb	r3, [r7, #14]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HC05Driver_resetNormalMode+0x148>
		return HC05Driver_Status_Error;
 800433c:	2305      	movs	r3, #5
 800433e:	e003      	b.n	8004348 <HC05Driver_resetNormalMode+0x150>
	}

	return HC05Driver_setDataMode(pSelf);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ff0b 	bl	800415c <HC05Driver_setDataMode>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bdb0      	pop	{r4, r5, r7, pc}
 8004350:	08006590 	.word	0x08006590
 8004354:	0800667c 	.word	0x0800667c
 8004358:	08006594 	.word	0x08006594
 800435c:	08006598 	.word	0x08006598

08004360 <HC05Driver_setATMode>:

static HC05Driver_Status_TypeDef HC05Driver_setATMode(HC05Driver_TypeDef* pSelf){
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

	if (pSelf->state != HC05Driver_State_HardAT){
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	7a1b      	ldrb	r3, [r3, #8]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d00c      	beq.n	800438a <HC05Driver_setATMode+0x2a>
		if (DigitalOutDriver_setHigh(pSelf->pKeyPinDriver) != DigitalOutDriver_Status_OK){
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4618      	mov	r0, r3
 8004376:	f7fe fe64 	bl	8003042 <DigitalOutDriver_setHigh>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HC05Driver_setATMode+0x24>
			return HC05Driver_Status_Error;
 8004380:	2305      	movs	r3, #5
 8004382:	e02a      	b.n	80043da <HC05Driver_setATMode+0x7a>
		}
		HAL_Delay(HC05_AT_MODE_DELAY_MS);
 8004384:	201e      	movs	r0, #30
 8004386:	f7fc f99d 	bl	80006c4 <HAL_Delay>
	}

	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 800438a:	2300      	movs	r3, #0
 800438c:	81fb      	strh	r3, [r7, #14]
 800438e:	e020      	b.n	80043d2 <HC05Driver_setATMode+0x72>
		if (pSelf->callbacks[i] != NULL && pSelf->callbacksIterators[i] >= 0){
 8004390:	89fb      	ldrh	r3, [r7, #14]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	3324      	adds	r3, #36	; 0x24
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HC05Driver_setATMode+0x6c>
 80043a0:	89fa      	ldrh	r2, [r7, #14]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3248      	adds	r2, #72	; 0x48
 80043a6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	db0e      	blt.n	80043cc <HC05Driver_setATMode+0x6c>
			if (UartDriver_removeReceiveDataCallback(pSelf->pUartDriver, pSelf->callbacksIterators[i]) != UartDriver_Status_OK){
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	89fa      	ldrh	r2, [r7, #14]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3248      	adds	r2, #72	; 0x48
 80043b8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80043bc:	4619      	mov	r1, r3
 80043be:	f000 fbde 	bl	8004b7e <UartDriver_removeReceiveDataCallback>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HC05Driver_setATMode+0x6c>
				return HC05Driver_Status_Error;
 80043c8:	2305      	movs	r3, #5
 80043ca:	e006      	b.n	80043da <HC05Driver_setATMode+0x7a>
	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	3301      	adds	r3, #1
 80043d0:	81fb      	strh	r3, [r7, #14]
 80043d2:	89fb      	ldrh	r3, [r7, #14]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d9db      	bls.n	8004390 <HC05Driver_setATMode+0x30>
			}
		}
	}

	return HC05Driver_Status_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 0 */

extern UART_HandleTypeDef huart1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	DigitalOutDriver_setHigh(&debugOut0);
 80043ec:	480b      	ldr	r0, [pc, #44]	; (800441c <HAL_UART_RxCpltCallback+0x38>)
 80043ee:	f7fe fe28 	bl	8003042 <DigitalOutDriver_setHigh>
	if (huart == (&huart1)){
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <HAL_UART_RxCpltCallback+0x3c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d109      	bne.n	800440e <HAL_UART_RxCpltCallback+0x2a>
		if (UartDriver_receivedBytesCallback(&uart1Driver) != UartDriver_Status_OK){
 80043fa:	480a      	ldr	r0, [pc, #40]	; (8004424 <HAL_UART_RxCpltCallback+0x40>)
 80043fc:	f000 fbfb 	bl	8004bf6 <UartDriver_receivedBytesCallback>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_UART_RxCpltCallback+0x2a>
			Error_Handler();
 8004406:	2165      	movs	r1, #101	; 0x65
 8004408:	4807      	ldr	r0, [pc, #28]	; (8004428 <HAL_UART_RxCpltCallback+0x44>)
 800440a:	f000 f94f 	bl	80046ac <_Error_Handler>
		}
	}
	DigitalOutDriver_setLow(&debugOut0);
 800440e:	4803      	ldr	r0, [pc, #12]	; (800441c <HAL_UART_RxCpltCallback+0x38>)
 8004410:	f7fe fe32 	bl	8003078 <DigitalOutDriver_setLow>
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	200000ec 	.word	0x200000ec
 8004420:	200002f8 	.word	0x200002f8
 8004424:	200001c0 	.word	0x200001c0
 8004428:	08006684 	.word	0x08006684

0800442c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	if (huart == (&huart1)){
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <HAL_UART_TxCpltCallback+0x2c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d109      	bne.n	8004450 <HAL_UART_TxCpltCallback+0x24>
		if (UartDriver_transmitCompleteCallback(&uart1Driver) != UartDriver_Status_OK){
 800443c:	4807      	ldr	r0, [pc, #28]	; (800445c <HAL_UART_TxCpltCallback+0x30>)
 800443e:	f000 fbfb 	bl	8004c38 <UartDriver_transmitCompleteCallback>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_UART_TxCpltCallback+0x24>
			Error_Handler();
 8004448:	216e      	movs	r1, #110	; 0x6e
 800444a:	4805      	ldr	r0, [pc, #20]	; (8004460 <HAL_UART_TxCpltCallback+0x34>)
 800444c:	f000 f92e 	bl	80046ac <_Error_Handler>
		}
	}
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	200002f8 	.word	0x200002f8
 800445c:	200001c0 	.word	0x200001c0
 8004460:	08006684 	.word	0x08006684

08004464 <foo>:

void foo(uint8_t byte, void* dummy){
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	6039      	str	r1, [r7, #0]
 800446e:	71fb      	strb	r3, [r7, #7]

	DigitalOutDriver_toggle(&led3Driver);
 8004470:	4803      	ldr	r0, [pc, #12]	; (8004480 <foo+0x1c>)
 8004472:	f7fe fe1c 	bl	80030ae <DigitalOutDriver_toggle>

}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200000d4 	.word	0x200000d4

08004484 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800448a:	f7fc f8bd 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800448e:	f000 f873 	bl	8004578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004492:	f7fe fe37 	bl	8003104 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004496:	f000 fc45 	bl	8004d24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DigitalOutDriver_init(&led1Driver, (DigitalOutDriver_Port_TypeDef*)LD1_GPIO_Port, &ledDebug1Pin, DigitalOutDriver_StartLevel_High);
 800449a:	2301      	movs	r3, #1
 800449c:	4a26      	ldr	r2, [pc, #152]	; (8004538 <main+0xb4>)
 800449e:	4927      	ldr	r1, [pc, #156]	; (800453c <main+0xb8>)
 80044a0:	4827      	ldr	r0, [pc, #156]	; (8004540 <main+0xbc>)
 80044a2:	f7fe fd80 	bl	8002fa6 <DigitalOutDriver_init>
  DigitalOutDriver_init(&led2Driver, (DigitalOutDriver_Port_TypeDef*)LD2_GPIO_Port, &ledDebug2Pin, DigitalOutDriver_StartLevel_High);
 80044a6:	2301      	movs	r3, #1
 80044a8:	4a26      	ldr	r2, [pc, #152]	; (8004544 <main+0xc0>)
 80044aa:	4924      	ldr	r1, [pc, #144]	; (800453c <main+0xb8>)
 80044ac:	4826      	ldr	r0, [pc, #152]	; (8004548 <main+0xc4>)
 80044ae:	f7fe fd7a 	bl	8002fa6 <DigitalOutDriver_init>
  DigitalOutDriver_init(&led3Driver, (DigitalOutDriver_Port_TypeDef*)LD3_GPIO_Port, &ledDebug3Pin, DigitalOutDriver_StartLevel_High);
 80044b2:	2301      	movs	r3, #1
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <main+0xc8>)
 80044b6:	4921      	ldr	r1, [pc, #132]	; (800453c <main+0xb8>)
 80044b8:	4825      	ldr	r0, [pc, #148]	; (8004550 <main+0xcc>)
 80044ba:	f7fe fd74 	bl	8002fa6 <DigitalOutDriver_init>

  DigitalOutDriver_init(&debugOut0, (DigitalOutDriver_Port_TypeDef*)DUBUG_OUT_0_GPIO_Port, &debugOut0Pin, DigitalOutDriver_StartLevel_High);
 80044be:	2301      	movs	r3, #1
 80044c0:	4a24      	ldr	r2, [pc, #144]	; (8004554 <main+0xd0>)
 80044c2:	491e      	ldr	r1, [pc, #120]	; (800453c <main+0xb8>)
 80044c4:	4824      	ldr	r0, [pc, #144]	; (8004558 <main+0xd4>)
 80044c6:	f7fe fd6e 	bl	8002fa6 <DigitalOutDriver_init>

  DigitalOutDriver_init(&hc05KeyDriver, (DigitalOutDriver_Port_TypeDef*)HC05_KEY_GPIO_Port, &hc05KeyPin, DigitalOutDriver_StartLevel_High);
 80044ca:	2301      	movs	r3, #1
 80044cc:	4a23      	ldr	r2, [pc, #140]	; (800455c <main+0xd8>)
 80044ce:	491b      	ldr	r1, [pc, #108]	; (800453c <main+0xb8>)
 80044d0:	4823      	ldr	r0, [pc, #140]	; (8004560 <main+0xdc>)
 80044d2:	f7fe fd68 	bl	8002fa6 <DigitalOutDriver_init>

  UartDriver_init(&uart1Driver, &huart1, 38400);
 80044d6:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80044da:	4922      	ldr	r1, [pc, #136]	; (8004564 <main+0xe0>)
 80044dc:	4822      	ldr	r0, [pc, #136]	; (8004568 <main+0xe4>)
 80044de:	f000 f9b9 	bl	8004854 <UartDriver_init>

  HC05Driver_init(&hc05Driver, HC05Driver_Role_Slave, &uart1Driver, &hc05KeyDriver, HC05_DATA_BAUDRATE, HC05_DEVICE_NAME, HC05_PASSWORD);
 80044e2:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 80044e6:	9302      	str	r3, [sp, #8]
 80044e8:	4b20      	ldr	r3, [pc, #128]	; (800456c <main+0xe8>)
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <main+0xdc>)
 80044f4:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <main+0xe4>)
 80044f6:	2100      	movs	r1, #0
 80044f8:	481d      	ldr	r0, [pc, #116]	; (8004570 <main+0xec>)
 80044fa:	f7fe ff25 	bl	8003348 <HC05Driver_init>

//  BluetoothProtocolMiddleware_init(&btMiddleware, &hc05Driver);

  HC05Driver_Status_TypeDef st = HC05Driver_setReceiveDataCallback(&hc05Driver, foo, NULL, NULL);
 80044fe:	2300      	movs	r3, #0
 8004500:	2200      	movs	r2, #0
 8004502:	491c      	ldr	r1, [pc, #112]	; (8004574 <main+0xf0>)
 8004504:	481a      	ldr	r0, [pc, #104]	; (8004570 <main+0xec>)
 8004506:	f7ff fdc5 	bl	8004094 <HC05Driver_setReceiveDataCallback>
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DigitalOutDriver_setHigh(&led2Driver);
 800450e:	480e      	ldr	r0, [pc, #56]	; (8004548 <main+0xc4>)
 8004510:	f7fe fd97 	bl	8003042 <DigitalOutDriver_setHigh>
	  HAL_Delay(200);
 8004514:	20c8      	movs	r0, #200	; 0xc8
 8004516:	f7fc f8d5 	bl	80006c4 <HAL_Delay>
	  DigitalOutDriver_setLow(&led2Driver);
 800451a:	480b      	ldr	r0, [pc, #44]	; (8004548 <main+0xc4>)
 800451c:	f7fe fdac 	bl	8003078 <DigitalOutDriver_setLow>
	  HAL_Delay(400);
 8004520:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004524:	f7fc f8ce 	bl	80006c4 <HAL_Delay>
	  DigitalOutDriver_toggle(&led1Driver);
 8004528:	4805      	ldr	r0, [pc, #20]	; (8004540 <main+0xbc>)
 800452a:	f7fe fdc0 	bl	80030ae <DigitalOutDriver_toggle>
	  HAL_Delay(100);
 800452e:	2064      	movs	r0, #100	; 0x64
 8004530:	f7fc f8c8 	bl	80006c4 <HAL_Delay>
	  DigitalOutDriver_setHigh(&led2Driver);
 8004534:	e7eb      	b.n	800450e <main+0x8a>
 8004536:	bf00      	nop
 8004538:	20000008 	.word	0x20000008
 800453c:	40020400 	.word	0x40020400
 8004540:	200000bc 	.word	0x200000bc
 8004544:	2000000a 	.word	0x2000000a
 8004548:	200000a4 	.word	0x200000a4
 800454c:	2000000c 	.word	0x2000000c
 8004550:	200000d4 	.word	0x200000d4
 8004554:	2000000e 	.word	0x2000000e
 8004558:	200000ec 	.word	0x200000ec
 800455c:	20000006 	.word	0x20000006
 8004560:	200001a8 	.word	0x200001a8
 8004564:	200002f8 	.word	0x200002f8
 8004568:	200001c0 	.word	0x200001c0
 800456c:	08006694 	.word	0x08006694
 8004570:	20000104 	.word	0x20000104
 8004574:	08004465 	.word	0x08004465

08004578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b0b8      	sub	sp, #224	; 0xe0
 800457c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	4b47      	ldr	r3, [pc, #284]	; (800469c <SystemClock_Config+0x124>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a46      	ldr	r2, [pc, #280]	; (800469c <SystemClock_Config+0x124>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
 800458a:	4b44      	ldr	r3, [pc, #272]	; (800469c <SystemClock_Config+0x124>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004596:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <SystemClock_Config+0x128>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800459e:	4a40      	ldr	r2, [pc, #256]	; (80046a0 <SystemClock_Config+0x128>)
 80045a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <SystemClock_Config+0x128>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c0:	2302      	movs	r3, #2
 80045c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80045ce:	2304      	movs	r3, #4
 80045d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80045d4:	2360      	movs	r3, #96	; 0x60
 80045d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045da:	2302      	movs	r3, #2
 80045dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045e0:	2304      	movs	r3, #4
 80045e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fd32 	bl	8001054 <HAL_RCC_OscConfig>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 80045f6:	21e4      	movs	r1, #228	; 0xe4
 80045f8:	482a      	ldr	r0, [pc, #168]	; (80046a4 <SystemClock_Config+0x12c>)
 80045fa:	f000 f857 	bl	80046ac <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045fe:	f7fc fcd9 	bl	8000fb4 <HAL_PWREx_EnableOverDrive>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <SystemClock_Config+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004608:	21eb      	movs	r1, #235	; 0xeb
 800460a:	4826      	ldr	r0, [pc, #152]	; (80046a4 <SystemClock_Config+0x12c>)
 800460c:	f000 f84e 	bl	80046ac <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004610:	230f      	movs	r3, #15
 8004612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004616:	2302      	movs	r3, #2
 8004618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004630:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004634:	2103      	movs	r1, #3
 8004636:	4618      	mov	r0, r3
 8004638:	f7fc ff7e 	bl	8001538 <HAL_RCC_ClockConfig>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004642:	21f9      	movs	r1, #249	; 0xf9
 8004644:	4817      	ldr	r0, [pc, #92]	; (80046a4 <SystemClock_Config+0x12c>)
 8004646:	f000 f831 	bl	80046ac <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800464a:	2340      	movs	r3, #64	; 0x40
 800464c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800464e:	2300      	movs	r3, #0
 8004650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd f96c 	bl	8001934 <HAL_RCCEx_PeriphCLKConfig>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <SystemClock_Config+0xf4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004666:	480f      	ldr	r0, [pc, #60]	; (80046a4 <SystemClock_Config+0x12c>)
 8004668:	f000 f820 	bl	80046ac <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800466c:	f7fd f92e 	bl	80018cc <HAL_RCC_GetHCLKFreq>
 8004670:	4603      	mov	r3, r0
 8004672:	4a0d      	ldr	r2, [pc, #52]	; (80046a8 <SystemClock_Config+0x130>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc f96f 	bl	800095e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004680:	2004      	movs	r0, #4
 8004682:	f7fc f979 	bl	8000978 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004686:	2200      	movs	r2, #0
 8004688:	2100      	movs	r1, #0
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	f7fc f92e 	bl	80008ee <HAL_NVIC_SetPriority>
}
 8004692:	bf00      	nop
 8004694:	37e0      	adds	r7, #224	; 0xe0
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	40007000 	.word	0x40007000
 80046a4:	08006684 	.word	0x08006684
 80046a8:	10624dd3 	.word	0x10624dd3

080046ac <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80046b6:	e7fe      	b.n	80046b6 <_Error_Handler+0xa>

080046b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <HAL_MspInit+0xa8>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4a27      	ldr	r2, [pc, #156]	; (8004760 <HAL_MspInit+0xa8>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ca:	4b25      	ldr	r3, [pc, #148]	; (8004760 <HAL_MspInit+0xa8>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d6:	4b22      	ldr	r3, [pc, #136]	; (8004760 <HAL_MspInit+0xa8>)
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	4a21      	ldr	r2, [pc, #132]	; (8004760 <HAL_MspInit+0xa8>)
 80046dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e0:	6453      	str	r3, [r2, #68]	; 0x44
 80046e2:	4b1f      	ldr	r3, [pc, #124]	; (8004760 <HAL_MspInit+0xa8>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ee:	2003      	movs	r0, #3
 80046f0:	f7fc f8f2 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80046f4:	2200      	movs	r2, #0
 80046f6:	2100      	movs	r1, #0
 80046f8:	f06f 000b 	mvn.w	r0, #11
 80046fc:	f7fc f8f7 	bl	80008ee <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	f06f 000a 	mvn.w	r0, #10
 8004708:	f7fc f8f1 	bl	80008ee <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800470c:	2200      	movs	r2, #0
 800470e:	2100      	movs	r1, #0
 8004710:	f06f 0009 	mvn.w	r0, #9
 8004714:	f7fc f8eb 	bl	80008ee <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004718:	2200      	movs	r2, #0
 800471a:	2100      	movs	r1, #0
 800471c:	f06f 0004 	mvn.w	r0, #4
 8004720:	f7fc f8e5 	bl	80008ee <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004724:	2200      	movs	r2, #0
 8004726:	2100      	movs	r1, #0
 8004728:	f06f 0003 	mvn.w	r0, #3
 800472c:	f7fc f8df 	bl	80008ee <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004730:	2200      	movs	r2, #0
 8004732:	2100      	movs	r1, #0
 8004734:	f06f 0001 	mvn.w	r0, #1
 8004738:	f7fc f8d9 	bl	80008ee <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800473c:	2200      	movs	r2, #0
 800473e:	2100      	movs	r1, #0
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	f7fc f8d3 	bl	80008ee <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	2005      	movs	r0, #5
 800474e:	f7fc f8ce 	bl	80008ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004752:	2005      	movs	r0, #5
 8004754:	f7fc f8e7 	bl	8000926 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800

08004764 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004776:	e7fe      	b.n	8004776 <HardFault_Handler+0x4>

08004778 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800477c:	e7fe      	b.n	800477c <MemManage_Handler+0x4>

0800477e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800477e:	b480      	push	{r7}
 8004780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004782:	e7fe      	b.n	8004782 <BusFault_Handler+0x4>

08004784 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004788:	e7fe      	b.n	8004788 <UsageFault_Handler+0x4>

0800478a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800479c:	bf00      	nop
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047b8:	f7fb ff64 	bl	8000684 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80047bc:	f7fc f8f8 	bl	80009b0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047d8:	4802      	ldr	r0, [pc, #8]	; (80047e4 <USART1_IRQHandler+0x10>)
 80047da:	f7fd fe29 	bl	8002430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047de:	bf00      	nop
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200002f8 	.word	0x200002f8

080047e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <SystemInit+0x5c>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	4a14      	ldr	r2, [pc, #80]	; (8004844 <SystemInit+0x5c>)
 80047f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <SystemInit+0x60>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a11      	ldr	r2, [pc, #68]	; (8004848 <SystemInit+0x60>)
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004808:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <SystemInit+0x60>)
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800480e:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <SystemInit+0x60>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	490d      	ldr	r1, [pc, #52]	; (8004848 <SystemInit+0x60>)
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <SystemInit+0x64>)
 8004816:	4013      	ands	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <SystemInit+0x60>)
 800481c:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <SystemInit+0x68>)
 800481e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <SystemInit+0x60>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a08      	ldr	r2, [pc, #32]	; (8004848 <SystemInit+0x60>)
 8004826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <SystemInit+0x60>)
 800482e:	2200      	movs	r2, #0
 8004830:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004832:	4b04      	ldr	r3, [pc, #16]	; (8004844 <SystemInit+0x5c>)
 8004834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004838:	609a      	str	r2, [r3, #8]
#endif
}
 800483a:	bf00      	nop
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00
 8004848:	40023800 	.word	0x40023800
 800484c:	fef6ffff 	.word	0xfef6ffff
 8004850:	24003010 	.word	0x24003010

08004854 <UartDriver_init>:

static UartDriver_Status_TypeDef UartDriver_TransmitBytes(UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t bytes);
static UartDriver_Status_TypeDef UartDriver_startReceiver(UartDriver_TypeDef* pSelf);
static UartDriver_Status_TypeDef UartDriver_stopReceiver(UartDriver_TypeDef* pSelf);

UartDriver_Status_TypeDef UartDriver_init(UartDriver_TypeDef* pSelf, UART_HandleTypeDef* pUartHandler, uint32_t baudRate){
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]

	if (pSelf->state != UartDriver_State_UnInitialized){
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <UartDriver_init+0x18>
		return UartDriver_Status_Error;
 8004868:	2308      	movs	r3, #8
 800486a:	e047      	b.n	80048fc <UartDriver_init+0xa8>
	}

	pSelf->pUartHandler = pUartHandler;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	605a      	str	r2, [r3, #4]
	pSelf->receiveBufferIterator = 0;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	81da      	strh	r2, [r3, #14]
	pSelf->transmitInProgress = 0;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	731a      	strb	r2, [r3, #12]
	memset((char*)pSelf->receiveBuffer, 0, UART_DRIVER_BUFFER_SIZE);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3310      	adds	r3, #16
 8004882:	2280      	movs	r2, #128	; 0x80
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fb3c 	bl	8004f04 <memset>

	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 800488c:	2300      	movs	r3, #0
 800488e:	82fb      	strh	r3, [r7, #22]
 8004890:	e014      	b.n	80048bc <UartDriver_init+0x68>
		pSelf->callbacks[i] = NULL;
 8004892:	8afa      	ldrh	r2, [r7, #22]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3224      	adds	r2, #36	; 0x24
 8004898:	2100      	movs	r1, #0
 800489a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pSelf->callbackArgs[i] = NULL;
 800489e:	8afa      	ldrh	r2, [r7, #22]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3226      	adds	r2, #38	; 0x26
 80048a4:	2100      	movs	r1, #0
 80048a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pSelf->readIterators[i] = 0;
 80048aa:	8afa      	ldrh	r2, [r7, #22]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3250      	adds	r2, #80	; 0x50
 80048b0:	2100      	movs	r1, #0
 80048b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80048b6:	8afb      	ldrh	r3, [r7, #22]
 80048b8:	3301      	adds	r3, #1
 80048ba:	82fb      	strh	r3, [r7, #22]
 80048bc:	8afb      	ldrh	r3, [r7, #22]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d9e7      	bls.n	8004892 <UartDriver_init+0x3e>
	}

	if (pSelf->pUartHandler->gState == HAL_UART_STATE_RESET){
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <UartDriver_init+0x80>
		return UartDriver_Status_Error;
 80048d0:	2308      	movs	r3, #8
 80048d2:	e013      	b.n	80048fc <UartDriver_init+0xa8>
	}

	pSelf->state = UartDriver_State_Ready; //Because UartDriver_setBaudRate() needs state to be UartDriver_State_Initialized.
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]

	if (pSelf->pUartHandler->Init.BaudRate != baudRate){
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d003      	beq.n	80048ee <UartDriver_init+0x9a>
		UartDriver_setBaudRate(pSelf, baudRate);
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f821 	bl	8004930 <UartDriver_setBaudRate>
	}

	pSelf->baudRate = baudRate;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	609a      	str	r2, [r3, #8]

	return UartDriver_startReceiver(pSelf);
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f9db 	bl	8004cb0 <UartDriver_startReceiver>
 80048fa:	4603      	mov	r3, r0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <UartDriver_getBaudRate>:

UartDriver_Status_TypeDef UartDriver_getBaudRate(UartDriver_TypeDef* pSelf, uint32_t* pRetBaudRate){
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]

	if (pSelf->state == UartDriver_State_UnInitialized){
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <UartDriver_getBaudRate+0x16>
		return UartDriver_Status_UnInitializedErrror;
 8004916:	2301      	movs	r3, #1
 8004918:	e004      	b.n	8004924 <UartDriver_getBaudRate+0x20>
	}

	*pRetBaudRate = pSelf->baudRate;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	601a      	str	r2, [r3, #0]

	return UartDriver_Status_OK;
 8004922:	2300      	movs	r3, #0

}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <UartDriver_setBaudRate>:

UartDriver_Status_TypeDef UartDriver_setBaudRate(UartDriver_TypeDef* pSelf, uint32_t baudRate){
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]

	if (pSelf->state == UartDriver_State_UnInitialized){
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <UartDriver_setBaudRate+0x16>
		return UartDriver_Status_UnInitializedErrror;
 8004942:	2301      	movs	r3, #1
 8004944:	e040      	b.n	80049c8 <UartDriver_setBaudRate+0x98>
	}

	UartDriver_Status_TypeDef ret;
	UartDriver_State_TypeDef prevState = pSelf->state;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	73fb      	strb	r3, [r7, #15]

	if (pSelf->state == UartDriver_State_Receiving){
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d109      	bne.n	8004968 <UartDriver_setBaudRate+0x38>
		if ((ret = UartDriver_stopReceiver(pSelf)) != UartDriver_Status_OK){
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f9ce 	bl	8004cf6 <UartDriver_stopReceiver>
 800495a:	4603      	mov	r3, r0
 800495c:	73bb      	strb	r3, [r7, #14]
 800495e:	7bbb      	ldrb	r3, [r7, #14]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <UartDriver_setBaudRate+0x38>
			return ret;
 8004964:	7bbb      	ldrb	r3, [r7, #14]
 8004966:	e02f      	b.n	80049c8 <UartDriver_setBaudRate+0x98>
		}
	}

	if (pSelf->state != UartDriver_State_Ready){
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d001      	beq.n	8004974 <UartDriver_setBaudRate+0x44>
		return UartDriver_Status_Error;
 8004970:	2308      	movs	r3, #8
 8004972:	e029      	b.n	80049c8 <UartDriver_setBaudRate+0x98>
	}

	pSelf->state = UartDriver_State_ChangingSettings;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_DeInit(pSelf->pUartHandler) != HAL_OK){
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd fc4f 	bl	8002222 <HAL_UART_DeInit>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <UartDriver_setBaudRate+0x5e>
		return UartDriver_Status_Error;
 800498a:	2308      	movs	r3, #8
 800498c:	e01c      	b.n	80049c8 <UartDriver_setBaudRate+0x98>
	}

	pSelf->pUartHandler->Init.BaudRate = baudRate;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	605a      	str	r2, [r3, #4]

	if (HAL_UART_Init(pSelf->pUartHandler) != HAL_OK){
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd fbf0 	bl	8002180 <HAL_UART_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <UartDriver_setBaudRate+0x7a>
		return UartDriver_Status_Error;
 80049a6:	2308      	movs	r3, #8
 80049a8:	e00e      	b.n	80049c8 <UartDriver_setBaudRate+0x98>
	}

	pSelf->baudRate = baudRate;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	609a      	str	r2, [r3, #8]
	pSelf->state = UartDriver_State_Ready;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	701a      	strb	r2, [r3, #0]

	if (prevState == UartDriver_State_Receiving){
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d104      	bne.n	80049c6 <UartDriver_setBaudRate+0x96>
		return UartDriver_startReceiver(pSelf);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f977 	bl	8004cb0 <UartDriver_startReceiver>
 80049c2:	4603      	mov	r3, r0
 80049c4:	e000      	b.n	80049c8 <UartDriver_setBaudRate+0x98>
	}

	return UartDriver_Status_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UartDriver_receiveBytesTerminationSign>:
	}

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_receiveBytesTerminationSign(UartDriver_TypeDef* pSelf, uint8_t* pReceiveBuffer, uint16_t bufferSize, uint8_t terminationSign){
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	460b      	mov	r3, r1
 80049e0:	80fb      	strh	r3, [r7, #6]
 80049e2:	4613      	mov	r3, r2
 80049e4:	717b      	strb	r3, [r7, #5]

	if (pSelf->state == UartDriver_State_UnInitialized){
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <UartDriver_receiveBytesTerminationSign+0x22>
		return UartDriver_Status_UnInitializedErrror;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e041      	b.n	8004a76 <UartDriver_receiveBytesTerminationSign+0xa6>
	}

	if (pSelf->state != UartDriver_State_Receiving){
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d001      	beq.n	80049fe <UartDriver_receiveBytesTerminationSign+0x2e>
		return UartDriver_Status_Error;
 80049fa:	2308      	movs	r3, #8
 80049fc:	e03b      	b.n	8004a76 <UartDriver_receiveBytesTerminationSign+0xa6>
	}

	uint16_t tmpIterator = pSelf->receiveBufferIterator;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	89db      	ldrh	r3, [r3, #14]
 8004a02:	82fb      	strh	r3, [r7, #22]
	uint16_t charCounter = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	82bb      	strh	r3, [r7, #20]

	while (charCounter < bufferSize){
 8004a08:	e021      	b.n	8004a4e <UartDriver_receiveBytesTerminationSign+0x7e>
		if (pSelf->receiveBufferIterator != tmpIterator){
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	89db      	ldrh	r3, [r3, #14]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8afa      	ldrh	r2, [r7, #22]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d01b      	beq.n	8004a4e <UartDriver_receiveBytesTerminationSign+0x7e>
			pReceiveBuffer[charCounter] = pSelf->receiveBuffer[tmpIterator];
 8004a16:	8afa      	ldrh	r2, [r7, #22]
 8004a18:	8abb      	ldrh	r3, [r7, #20]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	440b      	add	r3, r1
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	7c12      	ldrb	r2, [r2, #16]
 8004a24:	701a      	strb	r2, [r3, #0]
			if (pReceiveBuffer[charCounter++] == terminationSign){
 8004a26:	8abb      	ldrh	r3, [r7, #20]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	82ba      	strh	r2, [r7, #20]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4413      	add	r3, r2
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	797a      	ldrb	r2, [r7, #5]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d00e      	beq.n	8004a58 <UartDriver_receiveBytesTerminationSign+0x88>
				break;
			} else {
				tmpIterator = (tmpIterator+1) % UART_DRIVER_BUFFER_SIZE;
 8004a3a:	8afb      	ldrh	r3, [r7, #22]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	425a      	negs	r2, r3
 8004a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a48:	bf58      	it	pl
 8004a4a:	4253      	negpl	r3, r2
 8004a4c:	82fb      	strh	r3, [r7, #22]
	while (charCounter < bufferSize){
 8004a4e:	8aba      	ldrh	r2, [r7, #20]
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d3d9      	bcc.n	8004a0a <UartDriver_receiveBytesTerminationSign+0x3a>
 8004a56:	e000      	b.n	8004a5a <UartDriver_receiveBytesTerminationSign+0x8a>
				break;
 8004a58:	bf00      	nop
			}
		}
	}

	if (charCounter == UART_DRIVER_BUFFER_SIZE && pReceiveBuffer[charCounter-1] != terminationSign){
 8004a5a:	8abb      	ldrh	r3, [r7, #20]
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d109      	bne.n	8004a74 <UartDriver_receiveBytesTerminationSign+0xa4>
 8004a60:	8abb      	ldrh	r3, [r7, #20]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	797a      	ldrb	r2, [r7, #5]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <UartDriver_receiveBytesTerminationSign+0xa4>
		return UartDriver_Status_BufferOverflowError;
 8004a70:	2304      	movs	r3, #4
 8004a72:	e000      	b.n	8004a76 <UartDriver_receiveBytesTerminationSign+0xa6>
	}

	return UartDriver_Status_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <UartDriver_sendAndReceiveTerminationSign>:

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_sendAndReceiveTerminationSign(UartDriver_TypeDef* pSelf, uint8_t* pSendBuffer, uint16_t bytesToSend, \
		uint8_t* pReceiveBuffer, uint16_t bufferSize, uint8_t terminationSign){
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <UartDriver_sendAndReceiveTerminationSign+0x1c>
		return UartDriver_Status_UnInitializedErrror;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e01c      	b.n	8004ad8 <UartDriver_sendAndReceiveTerminationSign+0x56>
	}

	if (pSelf->state != UartDriver_State_Receiving){
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d001      	beq.n	8004aaa <UartDriver_sendAndReceiveTerminationSign+0x28>
		return UartDriver_Status_Error;
 8004aa6:	2308      	movs	r3, #8
 8004aa8:	e016      	b.n	8004ad8 <UartDriver_sendAndReceiveTerminationSign+0x56>
	}

	UartDriver_Status_TypeDef ret = UartDriver_Status_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
	if ((ret = UartDriver_TransmitBytes(pSelf, pSendBuffer, bytesToSend)) != UartDriver_Status_OK){
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f8da 	bl	8004c6e <UartDriver_TransmitBytes>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <UartDriver_sendAndReceiveTerminationSign+0x46>
		return ret;
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	e007      	b.n	8004ad8 <UartDriver_sendAndReceiveTerminationSign+0x56>
	}

	return UartDriver_receiveBytesTerminationSign(pSelf, pReceiveBuffer, bufferSize, terminationSign);
 8004ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004acc:	8c3a      	ldrh	r2, [r7, #32]
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff ff7d 	bl	80049d0 <UartDriver_receiveBytesTerminationSign>
 8004ad6:	4603      	mov	r3, r0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UartDriver_setReceiveDataCallback>:
	}

	return UartDriver_receiveNBytes(pSelf, pReceiveBuffer, bytesToRead);
}

UartDriver_Status_TypeDef UartDriver_setReceiveDataCallback(UartDriver_TypeDef* pSelf, void (*foo)(uint8_t byte, void* pArgs), void* pArgs, UartDriver_CallbackIterator_TypeDef* pRetCallbackIterator){
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <UartDriver_setReceiveDataCallback+0x1a>
		return UartDriver_Status_UnInitializedErrror;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e03b      	b.n	8004b72 <UartDriver_setReceiveDataCallback+0x92>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d005      	beq.n	8004b0e <UartDriver_setReceiveDataCallback+0x2e>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d001      	beq.n	8004b0e <UartDriver_setReceiveDataCallback+0x2e>
		return UartDriver_Status_Error;
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	e031      	b.n	8004b72 <UartDriver_setReceiveDataCallback+0x92>
	}

	uint16_t i;
	for (i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8004b0e:	2300      	movs	r3, #0
 8004b10:	82fb      	strh	r3, [r7, #22]
 8004b12:	e01e      	b.n	8004b52 <UartDriver_setReceiveDataCallback+0x72>
		if (pSelf->callbacks[i] == NULL){
 8004b14:	8afa      	ldrh	r2, [r7, #22]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3224      	adds	r2, #36	; 0x24
 8004b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d114      	bne.n	8004b4c <UartDriver_setReceiveDataCallback+0x6c>
			pSelf->callbacks[i] = foo;
 8004b22:	8afa      	ldrh	r2, [r7, #22]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3224      	adds	r2, #36	; 0x24
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pSelf->callbackArgs[i] = pArgs;
 8004b2e:	8afa      	ldrh	r2, [r7, #22]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3226      	adds	r2, #38	; 0x26
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pSelf->readIterators[i] = pSelf->receiveBufferIterator;
 8004b3a:	8afa      	ldrh	r2, [r7, #22]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	89db      	ldrh	r3, [r3, #14]
 8004b40:	b299      	uxth	r1, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3250      	adds	r2, #80	; 0x50
 8004b46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			break;
 8004b4a:	e005      	b.n	8004b58 <UartDriver_setReceiveDataCallback+0x78>
	for (i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8004b4c:	8afb      	ldrh	r3, [r7, #22]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	82fb      	strh	r3, [r7, #22]
 8004b52:	8afb      	ldrh	r3, [r7, #22]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d9dd      	bls.n	8004b14 <UartDriver_setReceiveDataCallback+0x34>
		}
	}

	if (i == UART_DRIVER_MAX_CALLBACK_NUMBER){
 8004b58:	8afb      	ldrh	r3, [r7, #22]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d101      	bne.n	8004b62 <UartDriver_setReceiveDataCallback+0x82>
		return UartDriver_Status_TooManyCallbacksError;
 8004b5e:	2307      	movs	r3, #7
 8004b60:	e007      	b.n	8004b72 <UartDriver_setReceiveDataCallback+0x92>
	}

	if (pRetCallbackIterator != NULL){
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <UartDriver_setReceiveDataCallback+0x90>
		*pRetCallbackIterator = (UartDriver_CallbackIterator_TypeDef)i;
 8004b68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	801a      	strh	r2, [r3, #0]
	}


	return UartDriver_Status_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <UartDriver_removeReceiveDataCallback>:

UartDriver_Status_TypeDef UartDriver_removeReceiveDataCallback(UartDriver_TypeDef* pSelf, UartDriver_CallbackIterator_TypeDef callbackIterator){
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	807b      	strh	r3, [r7, #2]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <UartDriver_removeReceiveDataCallback+0x18>
		return UartDriver_Status_UnInitializedErrror;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e029      	b.n	8004bea <UartDriver_removeReceiveDataCallback+0x6c>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d005      	beq.n	8004baa <UartDriver_removeReceiveDataCallback+0x2c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d001      	beq.n	8004baa <UartDriver_removeReceiveDataCallback+0x2c>
		return UartDriver_Status_Error;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	e01f      	b.n	8004bea <UartDriver_removeReceiveDataCallback+0x6c>
	}

	if (pSelf->callbacks[callbackIterator] == NULL){
 8004baa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3224      	adds	r2, #36	; 0x24
 8004bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <UartDriver_removeReceiveDataCallback+0x40>
		return UartDriver_Status_Error;
 8004bba:	2308      	movs	r3, #8
 8004bbc:	e015      	b.n	8004bea <UartDriver_removeReceiveDataCallback+0x6c>
	}

	pSelf->callbacks[callbackIterator] = NULL;
 8004bbe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3224      	adds	r2, #36	; 0x24
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pSelf->callbackArgs[callbackIterator] = NULL;
 8004bcc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3226      	adds	r2, #38	; 0x26
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pSelf->readIterators[callbackIterator] = 0;
 8004bda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3250      	adds	r2, #80	; 0x50
 8004be2:	2100      	movs	r1, #0
 8004be4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	return UartDriver_Status_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <UartDriver_receivedBytesCallback>:

UartDriver_Status_TypeDef UartDriver_receivedBytesCallback(UartDriver_TypeDef* pSelf){
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Receiving){
		return UartDriver_Status_NotReceivingErrror;
	}
*/
	pSelf->receiveBufferIterator++;// = (pSelf->receiveBufferIterator + 1) % UART_DRIVER_BUFFER_SIZE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	89db      	ldrh	r3, [r3, #14]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	81da      	strh	r2, [r3, #14]

	if (HAL_UART_Receive_IT(pSelf->pUartHandler, pSelf->receiveBuffer+pSelf->receiveBufferIterator, 1) != HAL_OK){
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6858      	ldr	r0, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3310      	adds	r3, #16
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	89d2      	ldrh	r2, [r2, #14]
 8004c18:	b292      	uxth	r2, r2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f7fd fb7e 	bl	8002320 <HAL_UART_Receive_IT>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <UartDriver_receivedBytesCallback+0x38>
		return UartDriver_Status_Error;
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	e000      	b.n	8004c30 <UartDriver_receivedBytesCallback+0x3a>
		}
	}	//TODO wywalic to stad i wrzucic do jakiegos thread'a
*/


	return UartDriver_Status_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UartDriver_transmitCompleteCallback>:

UartDriver_Status_TypeDef UartDriver_transmitCompleteCallback(UartDriver_TypeDef* pSelf){
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <UartDriver_transmitCompleteCallback+0x14>
		return UartDriver_Status_UnInitializedErrror;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e00a      	b.n	8004c62 <UartDriver_transmitCompleteCallback+0x2a>
	}

	if (pSelf->transmitInProgress == 0){
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	7b1b      	ldrb	r3, [r3, #12]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <UartDriver_transmitCompleteCallback+0x22>
		return UartDriver_Status_NotTransmitingErrror;
 8004c56:	2306      	movs	r3, #6
 8004c58:	e003      	b.n	8004c62 <UartDriver_transmitCompleteCallback+0x2a>
	}

	pSelf->transmitInProgress = 0;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	731a      	strb	r2, [r3, #12]

	return UartDriver_Status_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <UartDriver_TransmitBytes>:

static UartDriver_Status_TypeDef UartDriver_TransmitBytes(UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t bytes){
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	80fb      	strh	r3, [r7, #6]

	while (pSelf->transmitInProgress != 0){ }
 8004c7c:	bf00      	nop
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	7b1b      	ldrb	r3, [r3, #12]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1fa      	bne.n	8004c7e <UartDriver_TransmitBytes+0x10>

	if (HAL_UART_Transmit_IT(pSelf->pUartHandler, pBuffer, bytes) != HAL_OK){
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	68b9      	ldr	r1, [r7, #8]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd fafe 	bl	8002292 <HAL_UART_Transmit_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <UartDriver_TransmitBytes+0x32>
		return UartDriver_Status_Error;
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	e003      	b.n	8004ca8 <UartDriver_TransmitBytes+0x3a>
	}

	pSelf->transmitInProgress = 1;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	731a      	strb	r2, [r3, #12]

	return UartDriver_Status_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UartDriver_startReceiver>:

static UartDriver_Status_TypeDef UartDriver_startReceiver(UartDriver_TypeDef* pSelf){
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Ready){
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <UartDriver_startReceiver+0x14>
		return UartDriver_Status_Error;
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	e014      	b.n	8004cee <UartDriver_startReceiver+0x3e>
	}

	if (HAL_UART_Receive_IT(pSelf->pUartHandler, pSelf->receiveBuffer+pSelf->receiveBufferIterator, 1) != HAL_OK){
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6858      	ldr	r0, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3310      	adds	r3, #16
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	89d2      	ldrh	r2, [r2, #14]
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	f7fd fb22 	bl	8002320 <HAL_UART_Receive_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <UartDriver_startReceiver+0x36>
		return UartDriver_Status_Error;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	e003      	b.n	8004cee <UartDriver_startReceiver+0x3e>
	}

	pSelf->state = UartDriver_State_Receiving;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2203      	movs	r2, #3
 8004cea:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <UartDriver_stopReceiver>:

static UartDriver_Status_TypeDef UartDriver_stopReceiver(UartDriver_TypeDef* pSelf){
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Receiving){
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d001      	beq.n	8004d0a <UartDriver_stopReceiver+0x14>
		return UartDriver_Status_NotReceivingErrror;
 8004d06:	2305      	movs	r3, #5
 8004d08:	e008      	b.n	8004d1c <UartDriver_stopReceiver+0x26>
	}

	HAL_UART_IRQHandler(pSelf->pUartHandler);	//TODO do sprawdzenia
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fd fb8e 	bl	8002430 <HAL_UART_IRQHandler>

	pSelf->state = UartDriver_State_Ready;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <MX_USART1_UART_Init+0x5c>)
 8004d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1382400;
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d30:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <MX_USART1_UART_Init+0x60>)
 8004d32:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d46:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d48:	220c      	movs	r2, #12
 8004d4a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d64:	4805      	ldr	r0, [pc, #20]	; (8004d7c <MX_USART1_UART_Init+0x58>)
 8004d66:	f7fd fa0b 	bl	8002180 <HAL_UART_Init>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <MX_USART1_UART_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004d70:	2144      	movs	r1, #68	; 0x44
 8004d72:	4805      	ldr	r0, [pc, #20]	; (8004d88 <MX_USART1_UART_Init+0x64>)
 8004d74:	f7ff fc9a 	bl	80046ac <_Error_Handler>
  }

}
 8004d78:	bf00      	nop
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	200002f8 	.word	0x200002f8
 8004d80:	40011000 	.word	0x40011000
 8004d84:	00151800 	.word	0x00151800
 8004d88:	080066a8 	.word	0x080066a8

08004d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <HAL_UART_MspInit+0x84>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d134      	bne.n	8004e08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <HAL_UART_MspInit+0x88>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <HAL_UART_MspInit+0x88>)
 8004da4:	f043 0310 	orr.w	r3, r3, #16
 8004da8:	6453      	str	r3, [r2, #68]	; 0x44
 8004daa:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <HAL_UART_MspInit+0x88>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004dc8:	2304      	movs	r3, #4
 8004dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dcc:	f107 030c 	add.w	r3, r7, #12
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4811      	ldr	r0, [pc, #68]	; (8004e18 <HAL_UART_MspInit+0x8c>)
 8004dd4:	f7fb fe1c 	bl	8000a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de4:	2303      	movs	r3, #3
 8004de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004de8:	2307      	movs	r3, #7
 8004dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dec:	f107 030c 	add.w	r3, r7, #12
 8004df0:	4619      	mov	r1, r3
 8004df2:	4809      	ldr	r0, [pc, #36]	; (8004e18 <HAL_UART_MspInit+0x8c>)
 8004df4:	f7fb fe0c 	bl	8000a10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2025      	movs	r0, #37	; 0x25
 8004dfe:	f7fb fd76 	bl	80008ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e02:	2025      	movs	r0, #37	; 0x25
 8004e04:	f7fb fd8f 	bl	8000926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004e08:	bf00      	nop
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40011000 	.word	0x40011000
 8004e14:	40023800 	.word	0x40023800
 8004e18:	40020400 	.word	0x40020400

08004e1c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <HAL_UART_MspDeInit+0x38>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10d      	bne.n	8004e4a <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <HAL_UART_MspDeInit+0x3c>)
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <HAL_UART_MspDeInit+0x3c>)
 8004e34:	f023 0310 	bic.w	r3, r3, #16
 8004e38:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_6);
 8004e3a:	f248 0140 	movw	r1, #32832	; 0x8040
 8004e3e:	4807      	ldr	r0, [pc, #28]	; (8004e5c <HAL_UART_MspDeInit+0x40>)
 8004e40:	f7fb ff92 	bl	8000d68 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004e44:	2025      	movs	r0, #37	; 0x25
 8004e46:	f7fb fd7c 	bl	8000942 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	40011000 	.word	0x40011000
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40020400 	.word	0x40020400

08004e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e66:	e003      	b.n	8004e70 <LoopCopyDataInit>

08004e68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e6e:	3104      	adds	r1, #4

08004e70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e70:	480b      	ldr	r0, [pc, #44]	; (8004ea0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e78:	d3f6      	bcc.n	8004e68 <CopyDataInit>
  ldr  r2, =_sbss
 8004e7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e7c:	e002      	b.n	8004e84 <LoopFillZerobss>

08004e7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e80:	f842 3b04 	str.w	r3, [r2], #4

08004e84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e88:	d3f9      	bcc.n	8004e7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e8a:	f7ff fcad 	bl	80047e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e8e:	f000 f815 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e92:	f7ff faf7 	bl	8004484 <main>
  bx  lr    
 8004e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e98:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004e9c:	0800692c 	.word	0x0800692c
  ldr  r0, =_sdata
 8004ea0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ea4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8004ea8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8004eac:	20000378 	.word	0x20000378

08004eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eb0:	e7fe      	b.n	8004eb0 <ADC_IRQHandler>

08004eb2 <atoi>:
 8004eb2:	220a      	movs	r2, #10
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	f000 b98b 	b.w	80051d0 <strtol>
	...

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4d0d      	ldr	r5, [pc, #52]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec0:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec2:	1b64      	subs	r4, r4, r5
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	42a6      	cmp	r6, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	4d0b      	ldr	r5, [pc, #44]	; (8004efc <__libc_init_array+0x40>)
 8004ece:	4c0c      	ldr	r4, [pc, #48]	; (8004f00 <__libc_init_array+0x44>)
 8004ed0:	f001 fb52 	bl	8006578 <_init>
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	2600      	movs	r6, #0
 8004eda:	42a6      	cmp	r6, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee4:	4798      	blx	r3
 8004ee6:	3601      	adds	r6, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eee:	4798      	blx	r3
 8004ef0:	3601      	adds	r6, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	08006924 	.word	0x08006924
 8004ef8:	08006924 	.word	0x08006924
 8004efc:	08006924 	.word	0x08006924
 8004f00:	08006928 	.word	0x08006928

08004f04 <memset>:
 8004f04:	4402      	add	r2, r0
 8004f06:	4603      	mov	r3, r0
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d100      	bne.n	8004f0e <memset+0xa>
 8004f0c:	4770      	bx	lr
 8004f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f12:	e7f9      	b.n	8004f08 <memset+0x4>

08004f14 <siprintf>:
 8004f14:	b40e      	push	{r1, r2, r3}
 8004f16:	b500      	push	{lr}
 8004f18:	b09c      	sub	sp, #112	; 0x70
 8004f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f1c:	9002      	str	r0, [sp, #8]
 8004f1e:	9006      	str	r0, [sp, #24]
 8004f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f24:	4809      	ldr	r0, [pc, #36]	; (8004f4c <siprintf+0x38>)
 8004f26:	9107      	str	r1, [sp, #28]
 8004f28:	9104      	str	r1, [sp, #16]
 8004f2a:	4909      	ldr	r1, [pc, #36]	; (8004f50 <siprintf+0x3c>)
 8004f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f30:	9105      	str	r1, [sp, #20]
 8004f32:	6800      	ldr	r0, [r0, #0]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	a902      	add	r1, sp, #8
 8004f38:	f000 fa98 	bl	800546c <_svfiprintf_r>
 8004f3c:	9b02      	ldr	r3, [sp, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	b01c      	add	sp, #112	; 0x70
 8004f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f48:	b003      	add	sp, #12
 8004f4a:	4770      	bx	lr
 8004f4c:	20000014 	.word	0x20000014
 8004f50:	ffff0208 	.word	0xffff0208

08004f54 <strlcat>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	4604      	mov	r4, r0
 8004f58:	1916      	adds	r6, r2, r4
 8004f5a:	4608      	mov	r0, r1
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	42b1      	cmp	r1, r6
 8004f60:	460b      	mov	r3, r1
 8004f62:	d106      	bne.n	8004f72 <strlcat+0x1e>
 8004f64:	1b1c      	subs	r4, r3, r4
 8004f66:	1b12      	subs	r2, r2, r4
 8004f68:	d108      	bne.n	8004f7c <strlcat+0x28>
 8004f6a:	f7fb f973 	bl	8000254 <strlen>
 8004f6e:	4420      	add	r0, r4
 8004f70:	bd70      	pop	{r4, r5, r6, pc}
 8004f72:	781d      	ldrb	r5, [r3, #0]
 8004f74:	3101      	adds	r1, #1
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	d1f1      	bne.n	8004f5e <strlcat+0xa>
 8004f7a:	e7f3      	b.n	8004f64 <strlcat+0x10>
 8004f7c:	4606      	mov	r6, r0
 8004f7e:	4631      	mov	r1, r6
 8004f80:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f84:	b915      	cbnz	r5, 8004f8c <strlcat+0x38>
 8004f86:	701d      	strb	r5, [r3, #0]
 8004f88:	1a08      	subs	r0, r1, r0
 8004f8a:	e7f0      	b.n	8004f6e <strlcat+0x1a>
 8004f8c:	2a01      	cmp	r2, #1
 8004f8e:	bf1c      	itt	ne
 8004f90:	f803 5b01 	strbne.w	r5, [r3], #1
 8004f94:	f102 32ff 	addne.w	r2, r2, #4294967295
 8004f98:	e7f1      	b.n	8004f7e <strlcat+0x2a>

08004f9a <strlcpy>:
 8004f9a:	b510      	push	{r4, lr}
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	b162      	cbz	r2, 8004fba <strlcpy+0x20>
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	d008      	beq.n	8004fb6 <strlcpy+0x1c>
 8004fa4:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004fa8:	f800 4b01 	strb.w	r4, [r0], #1
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	d1f7      	bne.n	8004fa0 <strlcpy+0x6>
 8004fb0:	1a58      	subs	r0, r3, r1
 8004fb2:	3801      	subs	r0, #1
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	7002      	strb	r2, [r0, #0]
 8004fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d1fb      	bne.n	8004fba <strlcpy+0x20>
 8004fc2:	e7f5      	b.n	8004fb0 <strlcpy+0x16>

08004fc4 <strncmp>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	b16a      	cbz	r2, 8004fe4 <strncmp+0x20>
 8004fc8:	3901      	subs	r1, #1
 8004fca:	1884      	adds	r4, r0, r2
 8004fcc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004fd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <strncmp+0x1c>
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d001      	beq.n	8004fe0 <strncmp+0x1c>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f5      	bne.n	8004fcc <strncmp+0x8>
 8004fe0:	1a98      	subs	r0, r3, r2
 8004fe2:	bd10      	pop	{r4, pc}
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	e7fc      	b.n	8004fe2 <strncmp+0x1e>

08004fe8 <strncpy>:
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	3901      	subs	r1, #1
 8004fec:	4603      	mov	r3, r0
 8004fee:	b132      	cbz	r2, 8004ffe <strncpy+0x16>
 8004ff0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ff4:	f803 4b01 	strb.w	r4, [r3], #1
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	2c00      	cmp	r4, #0
 8004ffc:	d1f7      	bne.n	8004fee <strncpy+0x6>
 8004ffe:	441a      	add	r2, r3
 8005000:	2100      	movs	r1, #0
 8005002:	4293      	cmp	r3, r2
 8005004:	d100      	bne.n	8005008 <strncpy+0x20>
 8005006:	bd10      	pop	{r4, pc}
 8005008:	f803 1b01 	strb.w	r1, [r3], #1
 800500c:	e7f9      	b.n	8005002 <strncpy+0x1a>
	...

08005010 <strtok>:
 8005010:	4b16      	ldr	r3, [pc, #88]	; (800506c <strtok+0x5c>)
 8005012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005014:	681e      	ldr	r6, [r3, #0]
 8005016:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005018:	4605      	mov	r5, r0
 800501a:	b9fc      	cbnz	r4, 800505c <strtok+0x4c>
 800501c:	2050      	movs	r0, #80	; 0x50
 800501e:	9101      	str	r1, [sp, #4]
 8005020:	f000 f916 	bl	8005250 <malloc>
 8005024:	9901      	ldr	r1, [sp, #4]
 8005026:	65b0      	str	r0, [r6, #88]	; 0x58
 8005028:	4602      	mov	r2, r0
 800502a:	b920      	cbnz	r0, 8005036 <strtok+0x26>
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <strtok+0x60>)
 800502e:	4811      	ldr	r0, [pc, #68]	; (8005074 <strtok+0x64>)
 8005030:	2157      	movs	r1, #87	; 0x57
 8005032:	f000 f8d7 	bl	80051e4 <__assert_func>
 8005036:	e9c0 4400 	strd	r4, r4, [r0]
 800503a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800503e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005042:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005046:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800504a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800504e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005052:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005056:	6184      	str	r4, [r0, #24]
 8005058:	7704      	strb	r4, [r0, #28]
 800505a:	6244      	str	r4, [r0, #36]	; 0x24
 800505c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800505e:	2301      	movs	r3, #1
 8005060:	4628      	mov	r0, r5
 8005062:	b002      	add	sp, #8
 8005064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005068:	f000 b806 	b.w	8005078 <__strtok_r>
 800506c:	20000014 	.word	0x20000014
 8005070:	080066d4 	.word	0x080066d4
 8005074:	080066eb 	.word	0x080066eb

08005078 <__strtok_r>:
 8005078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507a:	b908      	cbnz	r0, 8005080 <__strtok_r+0x8>
 800507c:	6810      	ldr	r0, [r2, #0]
 800507e:	b188      	cbz	r0, 80050a4 <__strtok_r+0x2c>
 8005080:	4604      	mov	r4, r0
 8005082:	4620      	mov	r0, r4
 8005084:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005088:	460f      	mov	r7, r1
 800508a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800508e:	b91e      	cbnz	r6, 8005098 <__strtok_r+0x20>
 8005090:	b965      	cbnz	r5, 80050ac <__strtok_r+0x34>
 8005092:	6015      	str	r5, [r2, #0]
 8005094:	4628      	mov	r0, r5
 8005096:	e005      	b.n	80050a4 <__strtok_r+0x2c>
 8005098:	42b5      	cmp	r5, r6
 800509a:	d1f6      	bne.n	800508a <__strtok_r+0x12>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <__strtok_r+0xa>
 80050a0:	6014      	str	r4, [r2, #0]
 80050a2:	7003      	strb	r3, [r0, #0]
 80050a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a6:	461c      	mov	r4, r3
 80050a8:	e00c      	b.n	80050c4 <__strtok_r+0x4c>
 80050aa:	b915      	cbnz	r5, 80050b2 <__strtok_r+0x3a>
 80050ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050b0:	460e      	mov	r6, r1
 80050b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80050b6:	42ab      	cmp	r3, r5
 80050b8:	d1f7      	bne.n	80050aa <__strtok_r+0x32>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f3      	beq.n	80050a6 <__strtok_r+0x2e>
 80050be:	2300      	movs	r3, #0
 80050c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80050c4:	6014      	str	r4, [r2, #0]
 80050c6:	e7ed      	b.n	80050a4 <__strtok_r+0x2c>

080050c8 <_strtol_l.isra.0>:
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ce:	d001      	beq.n	80050d4 <_strtol_l.isra.0+0xc>
 80050d0:	2b24      	cmp	r3, #36	; 0x24
 80050d2:	d906      	bls.n	80050e2 <_strtol_l.isra.0+0x1a>
 80050d4:	f000 f8a4 	bl	8005220 <__errno>
 80050d8:	2316      	movs	r3, #22
 80050da:	6003      	str	r3, [r0, #0]
 80050dc:	2000      	movs	r0, #0
 80050de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e2:	4f3a      	ldr	r7, [pc, #232]	; (80051cc <_strtol_l.isra.0+0x104>)
 80050e4:	468e      	mov	lr, r1
 80050e6:	4676      	mov	r6, lr
 80050e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80050ec:	5de5      	ldrb	r5, [r4, r7]
 80050ee:	f015 0508 	ands.w	r5, r5, #8
 80050f2:	d1f8      	bne.n	80050e6 <_strtol_l.isra.0+0x1e>
 80050f4:	2c2d      	cmp	r4, #45	; 0x2d
 80050f6:	d134      	bne.n	8005162 <_strtol_l.isra.0+0x9a>
 80050f8:	f89e 4000 	ldrb.w	r4, [lr]
 80050fc:	f04f 0801 	mov.w	r8, #1
 8005100:	f106 0e02 	add.w	lr, r6, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05c      	beq.n	80051c2 <_strtol_l.isra.0+0xfa>
 8005108:	2b10      	cmp	r3, #16
 800510a:	d10c      	bne.n	8005126 <_strtol_l.isra.0+0x5e>
 800510c:	2c30      	cmp	r4, #48	; 0x30
 800510e:	d10a      	bne.n	8005126 <_strtol_l.isra.0+0x5e>
 8005110:	f89e 4000 	ldrb.w	r4, [lr]
 8005114:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005118:	2c58      	cmp	r4, #88	; 0x58
 800511a:	d14d      	bne.n	80051b8 <_strtol_l.isra.0+0xf0>
 800511c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005120:	2310      	movs	r3, #16
 8005122:	f10e 0e02 	add.w	lr, lr, #2
 8005126:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800512a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800512e:	2600      	movs	r6, #0
 8005130:	fbbc f9f3 	udiv	r9, ip, r3
 8005134:	4635      	mov	r5, r6
 8005136:	fb03 ca19 	mls	sl, r3, r9, ip
 800513a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800513e:	2f09      	cmp	r7, #9
 8005140:	d818      	bhi.n	8005174 <_strtol_l.isra.0+0xac>
 8005142:	463c      	mov	r4, r7
 8005144:	42a3      	cmp	r3, r4
 8005146:	dd24      	ble.n	8005192 <_strtol_l.isra.0+0xca>
 8005148:	2e00      	cmp	r6, #0
 800514a:	db1f      	blt.n	800518c <_strtol_l.isra.0+0xc4>
 800514c:	45a9      	cmp	r9, r5
 800514e:	d31d      	bcc.n	800518c <_strtol_l.isra.0+0xc4>
 8005150:	d101      	bne.n	8005156 <_strtol_l.isra.0+0x8e>
 8005152:	45a2      	cmp	sl, r4
 8005154:	db1a      	blt.n	800518c <_strtol_l.isra.0+0xc4>
 8005156:	fb05 4503 	mla	r5, r5, r3, r4
 800515a:	2601      	movs	r6, #1
 800515c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005160:	e7eb      	b.n	800513a <_strtol_l.isra.0+0x72>
 8005162:	2c2b      	cmp	r4, #43	; 0x2b
 8005164:	bf08      	it	eq
 8005166:	f89e 4000 	ldrbeq.w	r4, [lr]
 800516a:	46a8      	mov	r8, r5
 800516c:	bf08      	it	eq
 800516e:	f106 0e02 	addeq.w	lr, r6, #2
 8005172:	e7c7      	b.n	8005104 <_strtol_l.isra.0+0x3c>
 8005174:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005178:	2f19      	cmp	r7, #25
 800517a:	d801      	bhi.n	8005180 <_strtol_l.isra.0+0xb8>
 800517c:	3c37      	subs	r4, #55	; 0x37
 800517e:	e7e1      	b.n	8005144 <_strtol_l.isra.0+0x7c>
 8005180:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005184:	2f19      	cmp	r7, #25
 8005186:	d804      	bhi.n	8005192 <_strtol_l.isra.0+0xca>
 8005188:	3c57      	subs	r4, #87	; 0x57
 800518a:	e7db      	b.n	8005144 <_strtol_l.isra.0+0x7c>
 800518c:	f04f 36ff 	mov.w	r6, #4294967295
 8005190:	e7e4      	b.n	800515c <_strtol_l.isra.0+0x94>
 8005192:	2e00      	cmp	r6, #0
 8005194:	da05      	bge.n	80051a2 <_strtol_l.isra.0+0xda>
 8005196:	2322      	movs	r3, #34	; 0x22
 8005198:	6003      	str	r3, [r0, #0]
 800519a:	4665      	mov	r5, ip
 800519c:	b942      	cbnz	r2, 80051b0 <_strtol_l.isra.0+0xe8>
 800519e:	4628      	mov	r0, r5
 80051a0:	e79d      	b.n	80050de <_strtol_l.isra.0+0x16>
 80051a2:	f1b8 0f00 	cmp.w	r8, #0
 80051a6:	d000      	beq.n	80051aa <_strtol_l.isra.0+0xe2>
 80051a8:	426d      	negs	r5, r5
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	d0f7      	beq.n	800519e <_strtol_l.isra.0+0xd6>
 80051ae:	b10e      	cbz	r6, 80051b4 <_strtol_l.isra.0+0xec>
 80051b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80051b4:	6011      	str	r1, [r2, #0]
 80051b6:	e7f2      	b.n	800519e <_strtol_l.isra.0+0xd6>
 80051b8:	2430      	movs	r4, #48	; 0x30
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1b3      	bne.n	8005126 <_strtol_l.isra.0+0x5e>
 80051be:	2308      	movs	r3, #8
 80051c0:	e7b1      	b.n	8005126 <_strtol_l.isra.0+0x5e>
 80051c2:	2c30      	cmp	r4, #48	; 0x30
 80051c4:	d0a4      	beq.n	8005110 <_strtol_l.isra.0+0x48>
 80051c6:	230a      	movs	r3, #10
 80051c8:	e7ad      	b.n	8005126 <_strtol_l.isra.0+0x5e>
 80051ca:	bf00      	nop
 80051cc:	08006789 	.word	0x08006789

080051d0 <strtol>:
 80051d0:	4613      	mov	r3, r2
 80051d2:	460a      	mov	r2, r1
 80051d4:	4601      	mov	r1, r0
 80051d6:	4802      	ldr	r0, [pc, #8]	; (80051e0 <strtol+0x10>)
 80051d8:	6800      	ldr	r0, [r0, #0]
 80051da:	f7ff bf75 	b.w	80050c8 <_strtol_l.isra.0>
 80051de:	bf00      	nop
 80051e0:	20000014 	.word	0x20000014

080051e4 <__assert_func>:
 80051e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051e6:	4614      	mov	r4, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <__assert_func+0x2c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4605      	mov	r5, r0
 80051f0:	68d8      	ldr	r0, [r3, #12]
 80051f2:	b14c      	cbz	r4, 8005208 <__assert_func+0x24>
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <__assert_func+0x30>)
 80051f6:	9100      	str	r1, [sp, #0]
 80051f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051fc:	4906      	ldr	r1, [pc, #24]	; (8005218 <__assert_func+0x34>)
 80051fe:	462b      	mov	r3, r5
 8005200:	f000 f814 	bl	800522c <fiprintf>
 8005204:	f000 fdf0 	bl	8005de8 <abort>
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <__assert_func+0x38>)
 800520a:	461c      	mov	r4, r3
 800520c:	e7f3      	b.n	80051f6 <__assert_func+0x12>
 800520e:	bf00      	nop
 8005210:	20000014 	.word	0x20000014
 8005214:	0800674c 	.word	0x0800674c
 8005218:	08006759 	.word	0x08006759
 800521c:	08006787 	.word	0x08006787

08005220 <__errno>:
 8005220:	4b01      	ldr	r3, [pc, #4]	; (8005228 <__errno+0x8>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000014 	.word	0x20000014

0800522c <fiprintf>:
 800522c:	b40e      	push	{r1, r2, r3}
 800522e:	b503      	push	{r0, r1, lr}
 8005230:	4601      	mov	r1, r0
 8005232:	ab03      	add	r3, sp, #12
 8005234:	4805      	ldr	r0, [pc, #20]	; (800524c <fiprintf+0x20>)
 8005236:	f853 2b04 	ldr.w	r2, [r3], #4
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	f000 fa3f 	bl	80056c0 <_vfiprintf_r>
 8005242:	b002      	add	sp, #8
 8005244:	f85d eb04 	ldr.w	lr, [sp], #4
 8005248:	b003      	add	sp, #12
 800524a:	4770      	bx	lr
 800524c:	20000014 	.word	0x20000014

08005250 <malloc>:
 8005250:	4b02      	ldr	r3, [pc, #8]	; (800525c <malloc+0xc>)
 8005252:	4601      	mov	r1, r0
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	f000 b853 	b.w	8005300 <_malloc_r>
 800525a:	bf00      	nop
 800525c:	20000014 	.word	0x20000014

08005260 <_free_r>:
 8005260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005262:	2900      	cmp	r1, #0
 8005264:	d048      	beq.n	80052f8 <_free_r+0x98>
 8005266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526a:	9001      	str	r0, [sp, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f1a1 0404 	sub.w	r4, r1, #4
 8005272:	bfb8      	it	lt
 8005274:	18e4      	addlt	r4, r4, r3
 8005276:	f001 f805 	bl	8006284 <__malloc_lock>
 800527a:	4a20      	ldr	r2, [pc, #128]	; (80052fc <_free_r+0x9c>)
 800527c:	9801      	ldr	r0, [sp, #4]
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	4615      	mov	r5, r2
 8005282:	b933      	cbnz	r3, 8005292 <_free_r+0x32>
 8005284:	6063      	str	r3, [r4, #4]
 8005286:	6014      	str	r4, [r2, #0]
 8005288:	b003      	add	sp, #12
 800528a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800528e:	f000 bfff 	b.w	8006290 <__malloc_unlock>
 8005292:	42a3      	cmp	r3, r4
 8005294:	d90b      	bls.n	80052ae <_free_r+0x4e>
 8005296:	6821      	ldr	r1, [r4, #0]
 8005298:	1862      	adds	r2, r4, r1
 800529a:	4293      	cmp	r3, r2
 800529c:	bf04      	itt	eq
 800529e:	681a      	ldreq	r2, [r3, #0]
 80052a0:	685b      	ldreq	r3, [r3, #4]
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	bf04      	itt	eq
 80052a6:	1852      	addeq	r2, r2, r1
 80052a8:	6022      	streq	r2, [r4, #0]
 80052aa:	602c      	str	r4, [r5, #0]
 80052ac:	e7ec      	b.n	8005288 <_free_r+0x28>
 80052ae:	461a      	mov	r2, r3
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	b10b      	cbz	r3, 80052b8 <_free_r+0x58>
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d9fa      	bls.n	80052ae <_free_r+0x4e>
 80052b8:	6811      	ldr	r1, [r2, #0]
 80052ba:	1855      	adds	r5, r2, r1
 80052bc:	42a5      	cmp	r5, r4
 80052be:	d10b      	bne.n	80052d8 <_free_r+0x78>
 80052c0:	6824      	ldr	r4, [r4, #0]
 80052c2:	4421      	add	r1, r4
 80052c4:	1854      	adds	r4, r2, r1
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	d1dd      	bne.n	8005288 <_free_r+0x28>
 80052cc:	681c      	ldr	r4, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	6053      	str	r3, [r2, #4]
 80052d2:	4421      	add	r1, r4
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	e7d7      	b.n	8005288 <_free_r+0x28>
 80052d8:	d902      	bls.n	80052e0 <_free_r+0x80>
 80052da:	230c      	movs	r3, #12
 80052dc:	6003      	str	r3, [r0, #0]
 80052de:	e7d3      	b.n	8005288 <_free_r+0x28>
 80052e0:	6825      	ldr	r5, [r4, #0]
 80052e2:	1961      	adds	r1, r4, r5
 80052e4:	428b      	cmp	r3, r1
 80052e6:	bf04      	itt	eq
 80052e8:	6819      	ldreq	r1, [r3, #0]
 80052ea:	685b      	ldreq	r3, [r3, #4]
 80052ec:	6063      	str	r3, [r4, #4]
 80052ee:	bf04      	itt	eq
 80052f0:	1949      	addeq	r1, r1, r5
 80052f2:	6021      	streq	r1, [r4, #0]
 80052f4:	6054      	str	r4, [r2, #4]
 80052f6:	e7c7      	b.n	8005288 <_free_r+0x28>
 80052f8:	b003      	add	sp, #12
 80052fa:	bd30      	pop	{r4, r5, pc}
 80052fc:	20000094 	.word	0x20000094

08005300 <_malloc_r>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	1ccd      	adds	r5, r1, #3
 8005304:	f025 0503 	bic.w	r5, r5, #3
 8005308:	3508      	adds	r5, #8
 800530a:	2d0c      	cmp	r5, #12
 800530c:	bf38      	it	cc
 800530e:	250c      	movcc	r5, #12
 8005310:	2d00      	cmp	r5, #0
 8005312:	4606      	mov	r6, r0
 8005314:	db01      	blt.n	800531a <_malloc_r+0x1a>
 8005316:	42a9      	cmp	r1, r5
 8005318:	d903      	bls.n	8005322 <_malloc_r+0x22>
 800531a:	230c      	movs	r3, #12
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	2000      	movs	r0, #0
 8005320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005322:	f000 ffaf 	bl	8006284 <__malloc_lock>
 8005326:	4921      	ldr	r1, [pc, #132]	; (80053ac <_malloc_r+0xac>)
 8005328:	680a      	ldr	r2, [r1, #0]
 800532a:	4614      	mov	r4, r2
 800532c:	b99c      	cbnz	r4, 8005356 <_malloc_r+0x56>
 800532e:	4f20      	ldr	r7, [pc, #128]	; (80053b0 <_malloc_r+0xb0>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	b923      	cbnz	r3, 800533e <_malloc_r+0x3e>
 8005334:	4621      	mov	r1, r4
 8005336:	4630      	mov	r0, r6
 8005338:	f000 fc86 	bl	8005c48 <_sbrk_r>
 800533c:	6038      	str	r0, [r7, #0]
 800533e:	4629      	mov	r1, r5
 8005340:	4630      	mov	r0, r6
 8005342:	f000 fc81 	bl	8005c48 <_sbrk_r>
 8005346:	1c43      	adds	r3, r0, #1
 8005348:	d123      	bne.n	8005392 <_malloc_r+0x92>
 800534a:	230c      	movs	r3, #12
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	4630      	mov	r0, r6
 8005350:	f000 ff9e 	bl	8006290 <__malloc_unlock>
 8005354:	e7e3      	b.n	800531e <_malloc_r+0x1e>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	1b5b      	subs	r3, r3, r5
 800535a:	d417      	bmi.n	800538c <_malloc_r+0x8c>
 800535c:	2b0b      	cmp	r3, #11
 800535e:	d903      	bls.n	8005368 <_malloc_r+0x68>
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	441c      	add	r4, r3
 8005364:	6025      	str	r5, [r4, #0]
 8005366:	e004      	b.n	8005372 <_malloc_r+0x72>
 8005368:	6863      	ldr	r3, [r4, #4]
 800536a:	42a2      	cmp	r2, r4
 800536c:	bf0c      	ite	eq
 800536e:	600b      	streq	r3, [r1, #0]
 8005370:	6053      	strne	r3, [r2, #4]
 8005372:	4630      	mov	r0, r6
 8005374:	f000 ff8c 	bl	8006290 <__malloc_unlock>
 8005378:	f104 000b 	add.w	r0, r4, #11
 800537c:	1d23      	adds	r3, r4, #4
 800537e:	f020 0007 	bic.w	r0, r0, #7
 8005382:	1ac2      	subs	r2, r0, r3
 8005384:	d0cc      	beq.n	8005320 <_malloc_r+0x20>
 8005386:	1a1b      	subs	r3, r3, r0
 8005388:	50a3      	str	r3, [r4, r2]
 800538a:	e7c9      	b.n	8005320 <_malloc_r+0x20>
 800538c:	4622      	mov	r2, r4
 800538e:	6864      	ldr	r4, [r4, #4]
 8005390:	e7cc      	b.n	800532c <_malloc_r+0x2c>
 8005392:	1cc4      	adds	r4, r0, #3
 8005394:	f024 0403 	bic.w	r4, r4, #3
 8005398:	42a0      	cmp	r0, r4
 800539a:	d0e3      	beq.n	8005364 <_malloc_r+0x64>
 800539c:	1a21      	subs	r1, r4, r0
 800539e:	4630      	mov	r0, r6
 80053a0:	f000 fc52 	bl	8005c48 <_sbrk_r>
 80053a4:	3001      	adds	r0, #1
 80053a6:	d1dd      	bne.n	8005364 <_malloc_r+0x64>
 80053a8:	e7cf      	b.n	800534a <_malloc_r+0x4a>
 80053aa:	bf00      	nop
 80053ac:	20000094 	.word	0x20000094
 80053b0:	20000098 	.word	0x20000098

080053b4 <__ssputs_r>:
 80053b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b8:	688e      	ldr	r6, [r1, #8]
 80053ba:	429e      	cmp	r6, r3
 80053bc:	4682      	mov	sl, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	4690      	mov	r8, r2
 80053c2:	461f      	mov	r7, r3
 80053c4:	d838      	bhi.n	8005438 <__ssputs_r+0x84>
 80053c6:	898a      	ldrh	r2, [r1, #12]
 80053c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053cc:	d032      	beq.n	8005434 <__ssputs_r+0x80>
 80053ce:	6825      	ldr	r5, [r4, #0]
 80053d0:	6909      	ldr	r1, [r1, #16]
 80053d2:	eba5 0901 	sub.w	r9, r5, r1
 80053d6:	6965      	ldr	r5, [r4, #20]
 80053d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053e0:	3301      	adds	r3, #1
 80053e2:	444b      	add	r3, r9
 80053e4:	106d      	asrs	r5, r5, #1
 80053e6:	429d      	cmp	r5, r3
 80053e8:	bf38      	it	cc
 80053ea:	461d      	movcc	r5, r3
 80053ec:	0553      	lsls	r3, r2, #21
 80053ee:	d531      	bpl.n	8005454 <__ssputs_r+0xa0>
 80053f0:	4629      	mov	r1, r5
 80053f2:	f7ff ff85 	bl	8005300 <_malloc_r>
 80053f6:	4606      	mov	r6, r0
 80053f8:	b950      	cbnz	r0, 8005410 <__ssputs_r+0x5c>
 80053fa:	230c      	movs	r3, #12
 80053fc:	f8ca 3000 	str.w	r3, [sl]
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005410:	6921      	ldr	r1, [r4, #16]
 8005412:	464a      	mov	r2, r9
 8005414:	f000 ff0e 	bl	8006234 <memcpy>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	6126      	str	r6, [r4, #16]
 8005426:	6165      	str	r5, [r4, #20]
 8005428:	444e      	add	r6, r9
 800542a:	eba5 0509 	sub.w	r5, r5, r9
 800542e:	6026      	str	r6, [r4, #0]
 8005430:	60a5      	str	r5, [r4, #8]
 8005432:	463e      	mov	r6, r7
 8005434:	42be      	cmp	r6, r7
 8005436:	d900      	bls.n	800543a <__ssputs_r+0x86>
 8005438:	463e      	mov	r6, r7
 800543a:	4632      	mov	r2, r6
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	4641      	mov	r1, r8
 8005440:	f000 ff06 	bl	8006250 <memmove>
 8005444:	68a3      	ldr	r3, [r4, #8]
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	1b9b      	subs	r3, r3, r6
 800544a:	4432      	add	r2, r6
 800544c:	60a3      	str	r3, [r4, #8]
 800544e:	6022      	str	r2, [r4, #0]
 8005450:	2000      	movs	r0, #0
 8005452:	e7db      	b.n	800540c <__ssputs_r+0x58>
 8005454:	462a      	mov	r2, r5
 8005456:	f000 ff21 	bl	800629c <_realloc_r>
 800545a:	4606      	mov	r6, r0
 800545c:	2800      	cmp	r0, #0
 800545e:	d1e1      	bne.n	8005424 <__ssputs_r+0x70>
 8005460:	6921      	ldr	r1, [r4, #16]
 8005462:	4650      	mov	r0, sl
 8005464:	f7ff fefc 	bl	8005260 <_free_r>
 8005468:	e7c7      	b.n	80053fa <__ssputs_r+0x46>
	...

0800546c <_svfiprintf_r>:
 800546c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005470:	4698      	mov	r8, r3
 8005472:	898b      	ldrh	r3, [r1, #12]
 8005474:	061b      	lsls	r3, r3, #24
 8005476:	b09d      	sub	sp, #116	; 0x74
 8005478:	4607      	mov	r7, r0
 800547a:	460d      	mov	r5, r1
 800547c:	4614      	mov	r4, r2
 800547e:	d50e      	bpl.n	800549e <_svfiprintf_r+0x32>
 8005480:	690b      	ldr	r3, [r1, #16]
 8005482:	b963      	cbnz	r3, 800549e <_svfiprintf_r+0x32>
 8005484:	2140      	movs	r1, #64	; 0x40
 8005486:	f7ff ff3b 	bl	8005300 <_malloc_r>
 800548a:	6028      	str	r0, [r5, #0]
 800548c:	6128      	str	r0, [r5, #16]
 800548e:	b920      	cbnz	r0, 800549a <_svfiprintf_r+0x2e>
 8005490:	230c      	movs	r3, #12
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	e0d1      	b.n	800563e <_svfiprintf_r+0x1d2>
 800549a:	2340      	movs	r3, #64	; 0x40
 800549c:	616b      	str	r3, [r5, #20]
 800549e:	2300      	movs	r3, #0
 80054a0:	9309      	str	r3, [sp, #36]	; 0x24
 80054a2:	2320      	movs	r3, #32
 80054a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ac:	2330      	movs	r3, #48	; 0x30
 80054ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005658 <_svfiprintf_r+0x1ec>
 80054b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b6:	f04f 0901 	mov.w	r9, #1
 80054ba:	4623      	mov	r3, r4
 80054bc:	469a      	mov	sl, r3
 80054be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054c2:	b10a      	cbz	r2, 80054c8 <_svfiprintf_r+0x5c>
 80054c4:	2a25      	cmp	r2, #37	; 0x25
 80054c6:	d1f9      	bne.n	80054bc <_svfiprintf_r+0x50>
 80054c8:	ebba 0b04 	subs.w	fp, sl, r4
 80054cc:	d00b      	beq.n	80054e6 <_svfiprintf_r+0x7a>
 80054ce:	465b      	mov	r3, fp
 80054d0:	4622      	mov	r2, r4
 80054d2:	4629      	mov	r1, r5
 80054d4:	4638      	mov	r0, r7
 80054d6:	f7ff ff6d 	bl	80053b4 <__ssputs_r>
 80054da:	3001      	adds	r0, #1
 80054dc:	f000 80aa 	beq.w	8005634 <_svfiprintf_r+0x1c8>
 80054e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e2:	445a      	add	r2, fp
 80054e4:	9209      	str	r2, [sp, #36]	; 0x24
 80054e6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80a2 	beq.w	8005634 <_svfiprintf_r+0x1c8>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295
 80054f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054fa:	f10a 0a01 	add.w	sl, sl, #1
 80054fe:	9304      	str	r3, [sp, #16]
 8005500:	9307      	str	r3, [sp, #28]
 8005502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005506:	931a      	str	r3, [sp, #104]	; 0x68
 8005508:	4654      	mov	r4, sl
 800550a:	2205      	movs	r2, #5
 800550c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005510:	4851      	ldr	r0, [pc, #324]	; (8005658 <_svfiprintf_r+0x1ec>)
 8005512:	f7fa fead 	bl	8000270 <memchr>
 8005516:	9a04      	ldr	r2, [sp, #16]
 8005518:	b9d8      	cbnz	r0, 8005552 <_svfiprintf_r+0xe6>
 800551a:	06d0      	lsls	r0, r2, #27
 800551c:	bf44      	itt	mi
 800551e:	2320      	movmi	r3, #32
 8005520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005524:	0711      	lsls	r1, r2, #28
 8005526:	bf44      	itt	mi
 8005528:	232b      	movmi	r3, #43	; 0x2b
 800552a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800552e:	f89a 3000 	ldrb.w	r3, [sl]
 8005532:	2b2a      	cmp	r3, #42	; 0x2a
 8005534:	d015      	beq.n	8005562 <_svfiprintf_r+0xf6>
 8005536:	9a07      	ldr	r2, [sp, #28]
 8005538:	4654      	mov	r4, sl
 800553a:	2000      	movs	r0, #0
 800553c:	f04f 0c0a 	mov.w	ip, #10
 8005540:	4621      	mov	r1, r4
 8005542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005546:	3b30      	subs	r3, #48	; 0x30
 8005548:	2b09      	cmp	r3, #9
 800554a:	d94e      	bls.n	80055ea <_svfiprintf_r+0x17e>
 800554c:	b1b0      	cbz	r0, 800557c <_svfiprintf_r+0x110>
 800554e:	9207      	str	r2, [sp, #28]
 8005550:	e014      	b.n	800557c <_svfiprintf_r+0x110>
 8005552:	eba0 0308 	sub.w	r3, r0, r8
 8005556:	fa09 f303 	lsl.w	r3, r9, r3
 800555a:	4313      	orrs	r3, r2
 800555c:	9304      	str	r3, [sp, #16]
 800555e:	46a2      	mov	sl, r4
 8005560:	e7d2      	b.n	8005508 <_svfiprintf_r+0x9c>
 8005562:	9b03      	ldr	r3, [sp, #12]
 8005564:	1d19      	adds	r1, r3, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	9103      	str	r1, [sp, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	bfbb      	ittet	lt
 800556e:	425b      	neglt	r3, r3
 8005570:	f042 0202 	orrlt.w	r2, r2, #2
 8005574:	9307      	strge	r3, [sp, #28]
 8005576:	9307      	strlt	r3, [sp, #28]
 8005578:	bfb8      	it	lt
 800557a:	9204      	strlt	r2, [sp, #16]
 800557c:	7823      	ldrb	r3, [r4, #0]
 800557e:	2b2e      	cmp	r3, #46	; 0x2e
 8005580:	d10c      	bne.n	800559c <_svfiprintf_r+0x130>
 8005582:	7863      	ldrb	r3, [r4, #1]
 8005584:	2b2a      	cmp	r3, #42	; 0x2a
 8005586:	d135      	bne.n	80055f4 <_svfiprintf_r+0x188>
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	9203      	str	r2, [sp, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	bfb8      	it	lt
 8005594:	f04f 33ff 	movlt.w	r3, #4294967295
 8005598:	3402      	adds	r4, #2
 800559a:	9305      	str	r3, [sp, #20]
 800559c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005668 <_svfiprintf_r+0x1fc>
 80055a0:	7821      	ldrb	r1, [r4, #0]
 80055a2:	2203      	movs	r2, #3
 80055a4:	4650      	mov	r0, sl
 80055a6:	f7fa fe63 	bl	8000270 <memchr>
 80055aa:	b140      	cbz	r0, 80055be <_svfiprintf_r+0x152>
 80055ac:	2340      	movs	r3, #64	; 0x40
 80055ae:	eba0 000a 	sub.w	r0, r0, sl
 80055b2:	fa03 f000 	lsl.w	r0, r3, r0
 80055b6:	9b04      	ldr	r3, [sp, #16]
 80055b8:	4303      	orrs	r3, r0
 80055ba:	3401      	adds	r4, #1
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c2:	4826      	ldr	r0, [pc, #152]	; (800565c <_svfiprintf_r+0x1f0>)
 80055c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055c8:	2206      	movs	r2, #6
 80055ca:	f7fa fe51 	bl	8000270 <memchr>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d038      	beq.n	8005644 <_svfiprintf_r+0x1d8>
 80055d2:	4b23      	ldr	r3, [pc, #140]	; (8005660 <_svfiprintf_r+0x1f4>)
 80055d4:	bb1b      	cbnz	r3, 800561e <_svfiprintf_r+0x1b2>
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	3307      	adds	r3, #7
 80055da:	f023 0307 	bic.w	r3, r3, #7
 80055de:	3308      	adds	r3, #8
 80055e0:	9303      	str	r3, [sp, #12]
 80055e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e4:	4433      	add	r3, r6
 80055e6:	9309      	str	r3, [sp, #36]	; 0x24
 80055e8:	e767      	b.n	80054ba <_svfiprintf_r+0x4e>
 80055ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ee:	460c      	mov	r4, r1
 80055f0:	2001      	movs	r0, #1
 80055f2:	e7a5      	b.n	8005540 <_svfiprintf_r+0xd4>
 80055f4:	2300      	movs	r3, #0
 80055f6:	3401      	adds	r4, #1
 80055f8:	9305      	str	r3, [sp, #20]
 80055fa:	4619      	mov	r1, r3
 80055fc:	f04f 0c0a 	mov.w	ip, #10
 8005600:	4620      	mov	r0, r4
 8005602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005606:	3a30      	subs	r2, #48	; 0x30
 8005608:	2a09      	cmp	r2, #9
 800560a:	d903      	bls.n	8005614 <_svfiprintf_r+0x1a8>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0c5      	beq.n	800559c <_svfiprintf_r+0x130>
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	e7c3      	b.n	800559c <_svfiprintf_r+0x130>
 8005614:	fb0c 2101 	mla	r1, ip, r1, r2
 8005618:	4604      	mov	r4, r0
 800561a:	2301      	movs	r3, #1
 800561c:	e7f0      	b.n	8005600 <_svfiprintf_r+0x194>
 800561e:	ab03      	add	r3, sp, #12
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	462a      	mov	r2, r5
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <_svfiprintf_r+0x1f8>)
 8005626:	a904      	add	r1, sp, #16
 8005628:	4638      	mov	r0, r7
 800562a:	f3af 8000 	nop.w
 800562e:	1c42      	adds	r2, r0, #1
 8005630:	4606      	mov	r6, r0
 8005632:	d1d6      	bne.n	80055e2 <_svfiprintf_r+0x176>
 8005634:	89ab      	ldrh	r3, [r5, #12]
 8005636:	065b      	lsls	r3, r3, #25
 8005638:	f53f af2c 	bmi.w	8005494 <_svfiprintf_r+0x28>
 800563c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800563e:	b01d      	add	sp, #116	; 0x74
 8005640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005644:	ab03      	add	r3, sp, #12
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	462a      	mov	r2, r5
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <_svfiprintf_r+0x1f8>)
 800564c:	a904      	add	r1, sp, #16
 800564e:	4638      	mov	r0, r7
 8005650:	f000 f9d4 	bl	80059fc <_printf_i>
 8005654:	e7eb      	b.n	800562e <_svfiprintf_r+0x1c2>
 8005656:	bf00      	nop
 8005658:	08006889 	.word	0x08006889
 800565c:	08006893 	.word	0x08006893
 8005660:	00000000 	.word	0x00000000
 8005664:	080053b5 	.word	0x080053b5
 8005668:	0800688f 	.word	0x0800688f

0800566c <__sfputc_r>:
 800566c:	6893      	ldr	r3, [r2, #8]
 800566e:	3b01      	subs	r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	b410      	push	{r4}
 8005674:	6093      	str	r3, [r2, #8]
 8005676:	da08      	bge.n	800568a <__sfputc_r+0x1e>
 8005678:	6994      	ldr	r4, [r2, #24]
 800567a:	42a3      	cmp	r3, r4
 800567c:	db01      	blt.n	8005682 <__sfputc_r+0x16>
 800567e:	290a      	cmp	r1, #10
 8005680:	d103      	bne.n	800568a <__sfputc_r+0x1e>
 8005682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005686:	f000 baef 	b.w	8005c68 <__swbuf_r>
 800568a:	6813      	ldr	r3, [r2, #0]
 800568c:	1c58      	adds	r0, r3, #1
 800568e:	6010      	str	r0, [r2, #0]
 8005690:	7019      	strb	r1, [r3, #0]
 8005692:	4608      	mov	r0, r1
 8005694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005698:	4770      	bx	lr

0800569a <__sfputs_r>:
 800569a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569c:	4606      	mov	r6, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	4614      	mov	r4, r2
 80056a2:	18d5      	adds	r5, r2, r3
 80056a4:	42ac      	cmp	r4, r5
 80056a6:	d101      	bne.n	80056ac <__sfputs_r+0x12>
 80056a8:	2000      	movs	r0, #0
 80056aa:	e007      	b.n	80056bc <__sfputs_r+0x22>
 80056ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b0:	463a      	mov	r2, r7
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7ff ffda 	bl	800566c <__sfputc_r>
 80056b8:	1c43      	adds	r3, r0, #1
 80056ba:	d1f3      	bne.n	80056a4 <__sfputs_r+0xa>
 80056bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056c0 <_vfiprintf_r>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	460d      	mov	r5, r1
 80056c6:	b09d      	sub	sp, #116	; 0x74
 80056c8:	4614      	mov	r4, r2
 80056ca:	4698      	mov	r8, r3
 80056cc:	4606      	mov	r6, r0
 80056ce:	b118      	cbz	r0, 80056d8 <_vfiprintf_r+0x18>
 80056d0:	6983      	ldr	r3, [r0, #24]
 80056d2:	b90b      	cbnz	r3, 80056d8 <_vfiprintf_r+0x18>
 80056d4:	f000 fcaa 	bl	800602c <__sinit>
 80056d8:	4b89      	ldr	r3, [pc, #548]	; (8005900 <_vfiprintf_r+0x240>)
 80056da:	429d      	cmp	r5, r3
 80056dc:	d11b      	bne.n	8005716 <_vfiprintf_r+0x56>
 80056de:	6875      	ldr	r5, [r6, #4]
 80056e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e2:	07d9      	lsls	r1, r3, #31
 80056e4:	d405      	bmi.n	80056f2 <_vfiprintf_r+0x32>
 80056e6:	89ab      	ldrh	r3, [r5, #12]
 80056e8:	059a      	lsls	r2, r3, #22
 80056ea:	d402      	bmi.n	80056f2 <_vfiprintf_r+0x32>
 80056ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ee:	f000 fd3b 	bl	8006168 <__retarget_lock_acquire_recursive>
 80056f2:	89ab      	ldrh	r3, [r5, #12]
 80056f4:	071b      	lsls	r3, r3, #28
 80056f6:	d501      	bpl.n	80056fc <_vfiprintf_r+0x3c>
 80056f8:	692b      	ldr	r3, [r5, #16]
 80056fa:	b9eb      	cbnz	r3, 8005738 <_vfiprintf_r+0x78>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4630      	mov	r0, r6
 8005700:	f000 fb04 	bl	8005d0c <__swsetup_r>
 8005704:	b1c0      	cbz	r0, 8005738 <_vfiprintf_r+0x78>
 8005706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005708:	07dc      	lsls	r4, r3, #31
 800570a:	d50e      	bpl.n	800572a <_vfiprintf_r+0x6a>
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	b01d      	add	sp, #116	; 0x74
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005716:	4b7b      	ldr	r3, [pc, #492]	; (8005904 <_vfiprintf_r+0x244>)
 8005718:	429d      	cmp	r5, r3
 800571a:	d101      	bne.n	8005720 <_vfiprintf_r+0x60>
 800571c:	68b5      	ldr	r5, [r6, #8]
 800571e:	e7df      	b.n	80056e0 <_vfiprintf_r+0x20>
 8005720:	4b79      	ldr	r3, [pc, #484]	; (8005908 <_vfiprintf_r+0x248>)
 8005722:	429d      	cmp	r5, r3
 8005724:	bf08      	it	eq
 8005726:	68f5      	ldreq	r5, [r6, #12]
 8005728:	e7da      	b.n	80056e0 <_vfiprintf_r+0x20>
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	0598      	lsls	r0, r3, #22
 800572e:	d4ed      	bmi.n	800570c <_vfiprintf_r+0x4c>
 8005730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005732:	f000 fd1a 	bl	800616a <__retarget_lock_release_recursive>
 8005736:	e7e9      	b.n	800570c <_vfiprintf_r+0x4c>
 8005738:	2300      	movs	r3, #0
 800573a:	9309      	str	r3, [sp, #36]	; 0x24
 800573c:	2320      	movs	r3, #32
 800573e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005742:	f8cd 800c 	str.w	r8, [sp, #12]
 8005746:	2330      	movs	r3, #48	; 0x30
 8005748:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800590c <_vfiprintf_r+0x24c>
 800574c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005750:	f04f 0901 	mov.w	r9, #1
 8005754:	4623      	mov	r3, r4
 8005756:	469a      	mov	sl, r3
 8005758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800575c:	b10a      	cbz	r2, 8005762 <_vfiprintf_r+0xa2>
 800575e:	2a25      	cmp	r2, #37	; 0x25
 8005760:	d1f9      	bne.n	8005756 <_vfiprintf_r+0x96>
 8005762:	ebba 0b04 	subs.w	fp, sl, r4
 8005766:	d00b      	beq.n	8005780 <_vfiprintf_r+0xc0>
 8005768:	465b      	mov	r3, fp
 800576a:	4622      	mov	r2, r4
 800576c:	4629      	mov	r1, r5
 800576e:	4630      	mov	r0, r6
 8005770:	f7ff ff93 	bl	800569a <__sfputs_r>
 8005774:	3001      	adds	r0, #1
 8005776:	f000 80aa 	beq.w	80058ce <_vfiprintf_r+0x20e>
 800577a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800577c:	445a      	add	r2, fp
 800577e:	9209      	str	r2, [sp, #36]	; 0x24
 8005780:	f89a 3000 	ldrb.w	r3, [sl]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a2 	beq.w	80058ce <_vfiprintf_r+0x20e>
 800578a:	2300      	movs	r3, #0
 800578c:	f04f 32ff 	mov.w	r2, #4294967295
 8005790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005794:	f10a 0a01 	add.w	sl, sl, #1
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	9307      	str	r3, [sp, #28]
 800579c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057a0:	931a      	str	r3, [sp, #104]	; 0x68
 80057a2:	4654      	mov	r4, sl
 80057a4:	2205      	movs	r2, #5
 80057a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057aa:	4858      	ldr	r0, [pc, #352]	; (800590c <_vfiprintf_r+0x24c>)
 80057ac:	f7fa fd60 	bl	8000270 <memchr>
 80057b0:	9a04      	ldr	r2, [sp, #16]
 80057b2:	b9d8      	cbnz	r0, 80057ec <_vfiprintf_r+0x12c>
 80057b4:	06d1      	lsls	r1, r2, #27
 80057b6:	bf44      	itt	mi
 80057b8:	2320      	movmi	r3, #32
 80057ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057be:	0713      	lsls	r3, r2, #28
 80057c0:	bf44      	itt	mi
 80057c2:	232b      	movmi	r3, #43	; 0x2b
 80057c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c8:	f89a 3000 	ldrb.w	r3, [sl]
 80057cc:	2b2a      	cmp	r3, #42	; 0x2a
 80057ce:	d015      	beq.n	80057fc <_vfiprintf_r+0x13c>
 80057d0:	9a07      	ldr	r2, [sp, #28]
 80057d2:	4654      	mov	r4, sl
 80057d4:	2000      	movs	r0, #0
 80057d6:	f04f 0c0a 	mov.w	ip, #10
 80057da:	4621      	mov	r1, r4
 80057dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057e0:	3b30      	subs	r3, #48	; 0x30
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d94e      	bls.n	8005884 <_vfiprintf_r+0x1c4>
 80057e6:	b1b0      	cbz	r0, 8005816 <_vfiprintf_r+0x156>
 80057e8:	9207      	str	r2, [sp, #28]
 80057ea:	e014      	b.n	8005816 <_vfiprintf_r+0x156>
 80057ec:	eba0 0308 	sub.w	r3, r0, r8
 80057f0:	fa09 f303 	lsl.w	r3, r9, r3
 80057f4:	4313      	orrs	r3, r2
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	46a2      	mov	sl, r4
 80057fa:	e7d2      	b.n	80057a2 <_vfiprintf_r+0xe2>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	1d19      	adds	r1, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	9103      	str	r1, [sp, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfbb      	ittet	lt
 8005808:	425b      	neglt	r3, r3
 800580a:	f042 0202 	orrlt.w	r2, r2, #2
 800580e:	9307      	strge	r3, [sp, #28]
 8005810:	9307      	strlt	r3, [sp, #28]
 8005812:	bfb8      	it	lt
 8005814:	9204      	strlt	r2, [sp, #16]
 8005816:	7823      	ldrb	r3, [r4, #0]
 8005818:	2b2e      	cmp	r3, #46	; 0x2e
 800581a:	d10c      	bne.n	8005836 <_vfiprintf_r+0x176>
 800581c:	7863      	ldrb	r3, [r4, #1]
 800581e:	2b2a      	cmp	r3, #42	; 0x2a
 8005820:	d135      	bne.n	800588e <_vfiprintf_r+0x1ce>
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	9203      	str	r2, [sp, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	bfb8      	it	lt
 800582e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005832:	3402      	adds	r4, #2
 8005834:	9305      	str	r3, [sp, #20]
 8005836:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800591c <_vfiprintf_r+0x25c>
 800583a:	7821      	ldrb	r1, [r4, #0]
 800583c:	2203      	movs	r2, #3
 800583e:	4650      	mov	r0, sl
 8005840:	f7fa fd16 	bl	8000270 <memchr>
 8005844:	b140      	cbz	r0, 8005858 <_vfiprintf_r+0x198>
 8005846:	2340      	movs	r3, #64	; 0x40
 8005848:	eba0 000a 	sub.w	r0, r0, sl
 800584c:	fa03 f000 	lsl.w	r0, r3, r0
 8005850:	9b04      	ldr	r3, [sp, #16]
 8005852:	4303      	orrs	r3, r0
 8005854:	3401      	adds	r4, #1
 8005856:	9304      	str	r3, [sp, #16]
 8005858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585c:	482c      	ldr	r0, [pc, #176]	; (8005910 <_vfiprintf_r+0x250>)
 800585e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005862:	2206      	movs	r2, #6
 8005864:	f7fa fd04 	bl	8000270 <memchr>
 8005868:	2800      	cmp	r0, #0
 800586a:	d03f      	beq.n	80058ec <_vfiprintf_r+0x22c>
 800586c:	4b29      	ldr	r3, [pc, #164]	; (8005914 <_vfiprintf_r+0x254>)
 800586e:	bb1b      	cbnz	r3, 80058b8 <_vfiprintf_r+0x1f8>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	3307      	adds	r3, #7
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	3308      	adds	r3, #8
 800587a:	9303      	str	r3, [sp, #12]
 800587c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587e:	443b      	add	r3, r7
 8005880:	9309      	str	r3, [sp, #36]	; 0x24
 8005882:	e767      	b.n	8005754 <_vfiprintf_r+0x94>
 8005884:	fb0c 3202 	mla	r2, ip, r2, r3
 8005888:	460c      	mov	r4, r1
 800588a:	2001      	movs	r0, #1
 800588c:	e7a5      	b.n	80057da <_vfiprintf_r+0x11a>
 800588e:	2300      	movs	r3, #0
 8005890:	3401      	adds	r4, #1
 8005892:	9305      	str	r3, [sp, #20]
 8005894:	4619      	mov	r1, r3
 8005896:	f04f 0c0a 	mov.w	ip, #10
 800589a:	4620      	mov	r0, r4
 800589c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a0:	3a30      	subs	r2, #48	; 0x30
 80058a2:	2a09      	cmp	r2, #9
 80058a4:	d903      	bls.n	80058ae <_vfiprintf_r+0x1ee>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0c5      	beq.n	8005836 <_vfiprintf_r+0x176>
 80058aa:	9105      	str	r1, [sp, #20]
 80058ac:	e7c3      	b.n	8005836 <_vfiprintf_r+0x176>
 80058ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80058b2:	4604      	mov	r4, r0
 80058b4:	2301      	movs	r3, #1
 80058b6:	e7f0      	b.n	800589a <_vfiprintf_r+0x1da>
 80058b8:	ab03      	add	r3, sp, #12
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	462a      	mov	r2, r5
 80058be:	4b16      	ldr	r3, [pc, #88]	; (8005918 <_vfiprintf_r+0x258>)
 80058c0:	a904      	add	r1, sp, #16
 80058c2:	4630      	mov	r0, r6
 80058c4:	f3af 8000 	nop.w
 80058c8:	4607      	mov	r7, r0
 80058ca:	1c78      	adds	r0, r7, #1
 80058cc:	d1d6      	bne.n	800587c <_vfiprintf_r+0x1bc>
 80058ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058d0:	07d9      	lsls	r1, r3, #31
 80058d2:	d405      	bmi.n	80058e0 <_vfiprintf_r+0x220>
 80058d4:	89ab      	ldrh	r3, [r5, #12]
 80058d6:	059a      	lsls	r2, r3, #22
 80058d8:	d402      	bmi.n	80058e0 <_vfiprintf_r+0x220>
 80058da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058dc:	f000 fc45 	bl	800616a <__retarget_lock_release_recursive>
 80058e0:	89ab      	ldrh	r3, [r5, #12]
 80058e2:	065b      	lsls	r3, r3, #25
 80058e4:	f53f af12 	bmi.w	800570c <_vfiprintf_r+0x4c>
 80058e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ea:	e711      	b.n	8005710 <_vfiprintf_r+0x50>
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	462a      	mov	r2, r5
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <_vfiprintf_r+0x258>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4630      	mov	r0, r6
 80058f8:	f000 f880 	bl	80059fc <_printf_i>
 80058fc:	e7e4      	b.n	80058c8 <_vfiprintf_r+0x208>
 80058fe:	bf00      	nop
 8005900:	080068dc 	.word	0x080068dc
 8005904:	080068fc 	.word	0x080068fc
 8005908:	080068bc 	.word	0x080068bc
 800590c:	08006889 	.word	0x08006889
 8005910:	08006893 	.word	0x08006893
 8005914:	00000000 	.word	0x00000000
 8005918:	0800569b 	.word	0x0800569b
 800591c:	0800688f 	.word	0x0800688f

08005920 <_printf_common>:
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	4616      	mov	r6, r2
 8005926:	4699      	mov	r9, r3
 8005928:	688a      	ldr	r2, [r1, #8]
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005930:	4293      	cmp	r3, r2
 8005932:	bfb8      	it	lt
 8005934:	4613      	movlt	r3, r2
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800593c:	4607      	mov	r7, r0
 800593e:	460c      	mov	r4, r1
 8005940:	b10a      	cbz	r2, 8005946 <_printf_common+0x26>
 8005942:	3301      	adds	r3, #1
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	0699      	lsls	r1, r3, #26
 800594a:	bf42      	ittt	mi
 800594c:	6833      	ldrmi	r3, [r6, #0]
 800594e:	3302      	addmi	r3, #2
 8005950:	6033      	strmi	r3, [r6, #0]
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	f015 0506 	ands.w	r5, r5, #6
 8005958:	d106      	bne.n	8005968 <_printf_common+0x48>
 800595a:	f104 0a19 	add.w	sl, r4, #25
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	6832      	ldr	r2, [r6, #0]
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	42ab      	cmp	r3, r5
 8005966:	dc26      	bgt.n	80059b6 <_printf_common+0x96>
 8005968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800596c:	1e13      	subs	r3, r2, #0
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	bf18      	it	ne
 8005972:	2301      	movne	r3, #1
 8005974:	0692      	lsls	r2, r2, #26
 8005976:	d42b      	bmi.n	80059d0 <_printf_common+0xb0>
 8005978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800597c:	4649      	mov	r1, r9
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	3001      	adds	r0, #1
 8005984:	d01e      	beq.n	80059c4 <_printf_common+0xa4>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	68e5      	ldr	r5, [r4, #12]
 800598a:	6832      	ldr	r2, [r6, #0]
 800598c:	f003 0306 	and.w	r3, r3, #6
 8005990:	2b04      	cmp	r3, #4
 8005992:	bf08      	it	eq
 8005994:	1aad      	subeq	r5, r5, r2
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	6922      	ldr	r2, [r4, #16]
 800599a:	bf0c      	ite	eq
 800599c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a0:	2500      	movne	r5, #0
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bfc4      	itt	gt
 80059a6:	1a9b      	subgt	r3, r3, r2
 80059a8:	18ed      	addgt	r5, r5, r3
 80059aa:	2600      	movs	r6, #0
 80059ac:	341a      	adds	r4, #26
 80059ae:	42b5      	cmp	r5, r6
 80059b0:	d11a      	bne.n	80059e8 <_printf_common+0xc8>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e008      	b.n	80059c8 <_printf_common+0xa8>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4652      	mov	r2, sl
 80059ba:	4649      	mov	r1, r9
 80059bc:	4638      	mov	r0, r7
 80059be:	47c0      	blx	r8
 80059c0:	3001      	adds	r0, #1
 80059c2:	d103      	bne.n	80059cc <_printf_common+0xac>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059cc:	3501      	adds	r5, #1
 80059ce:	e7c6      	b.n	800595e <_printf_common+0x3e>
 80059d0:	18e1      	adds	r1, r4, r3
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	2030      	movs	r0, #48	; 0x30
 80059d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059da:	4422      	add	r2, r4
 80059dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059e4:	3302      	adds	r3, #2
 80059e6:	e7c7      	b.n	8005978 <_printf_common+0x58>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4622      	mov	r2, r4
 80059ec:	4649      	mov	r1, r9
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c0      	blx	r8
 80059f2:	3001      	adds	r0, #1
 80059f4:	d0e6      	beq.n	80059c4 <_printf_common+0xa4>
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7d9      	b.n	80059ae <_printf_common+0x8e>
	...

080059fc <_printf_i>:
 80059fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	460c      	mov	r4, r1
 8005a02:	4691      	mov	r9, r2
 8005a04:	7e27      	ldrb	r7, [r4, #24]
 8005a06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a08:	2f78      	cmp	r7, #120	; 0x78
 8005a0a:	4680      	mov	r8, r0
 8005a0c:	469a      	mov	sl, r3
 8005a0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a12:	d807      	bhi.n	8005a24 <_printf_i+0x28>
 8005a14:	2f62      	cmp	r7, #98	; 0x62
 8005a16:	d80a      	bhi.n	8005a2e <_printf_i+0x32>
 8005a18:	2f00      	cmp	r7, #0
 8005a1a:	f000 80d8 	beq.w	8005bce <_printf_i+0x1d2>
 8005a1e:	2f58      	cmp	r7, #88	; 0x58
 8005a20:	f000 80a3 	beq.w	8005b6a <_printf_i+0x16e>
 8005a24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a2c:	e03a      	b.n	8005aa4 <_printf_i+0xa8>
 8005a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a32:	2b15      	cmp	r3, #21
 8005a34:	d8f6      	bhi.n	8005a24 <_printf_i+0x28>
 8005a36:	a001      	add	r0, pc, #4	; (adr r0, 8005a3c <_printf_i+0x40>)
 8005a38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005aa9 	.word	0x08005aa9
 8005a44:	08005a25 	.word	0x08005a25
 8005a48:	08005a25 	.word	0x08005a25
 8005a4c:	08005a25 	.word	0x08005a25
 8005a50:	08005a25 	.word	0x08005a25
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005a25 	.word	0x08005a25
 8005a5c:	08005a25 	.word	0x08005a25
 8005a60:	08005a25 	.word	0x08005a25
 8005a64:	08005a25 	.word	0x08005a25
 8005a68:	08005bb5 	.word	0x08005bb5
 8005a6c:	08005ad9 	.word	0x08005ad9
 8005a70:	08005b97 	.word	0x08005b97
 8005a74:	08005a25 	.word	0x08005a25
 8005a78:	08005a25 	.word	0x08005a25
 8005a7c:	08005bd7 	.word	0x08005bd7
 8005a80:	08005a25 	.word	0x08005a25
 8005a84:	08005ad9 	.word	0x08005ad9
 8005a88:	08005a25 	.word	0x08005a25
 8005a8c:	08005a25 	.word	0x08005a25
 8005a90:	08005b9f 	.word	0x08005b9f
 8005a94:	680b      	ldr	r3, [r1, #0]
 8005a96:	1d1a      	adds	r2, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	600a      	str	r2, [r1, #0]
 8005a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0a3      	b.n	8005bf0 <_printf_i+0x1f4>
 8005aa8:	6825      	ldr	r5, [r4, #0]
 8005aaa:	6808      	ldr	r0, [r1, #0]
 8005aac:	062e      	lsls	r6, r5, #24
 8005aae:	f100 0304 	add.w	r3, r0, #4
 8005ab2:	d50a      	bpl.n	8005aca <_printf_i+0xce>
 8005ab4:	6805      	ldr	r5, [r0, #0]
 8005ab6:	600b      	str	r3, [r1, #0]
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	da03      	bge.n	8005ac4 <_printf_i+0xc8>
 8005abc:	232d      	movs	r3, #45	; 0x2d
 8005abe:	426d      	negs	r5, r5
 8005ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac4:	485e      	ldr	r0, [pc, #376]	; (8005c40 <_printf_i+0x244>)
 8005ac6:	230a      	movs	r3, #10
 8005ac8:	e019      	b.n	8005afe <_printf_i+0x102>
 8005aca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ace:	6805      	ldr	r5, [r0, #0]
 8005ad0:	600b      	str	r3, [r1, #0]
 8005ad2:	bf18      	it	ne
 8005ad4:	b22d      	sxthne	r5, r5
 8005ad6:	e7ef      	b.n	8005ab8 <_printf_i+0xbc>
 8005ad8:	680b      	ldr	r3, [r1, #0]
 8005ada:	6825      	ldr	r5, [r4, #0]
 8005adc:	1d18      	adds	r0, r3, #4
 8005ade:	6008      	str	r0, [r1, #0]
 8005ae0:	0628      	lsls	r0, r5, #24
 8005ae2:	d501      	bpl.n	8005ae8 <_printf_i+0xec>
 8005ae4:	681d      	ldr	r5, [r3, #0]
 8005ae6:	e002      	b.n	8005aee <_printf_i+0xf2>
 8005ae8:	0669      	lsls	r1, r5, #25
 8005aea:	d5fb      	bpl.n	8005ae4 <_printf_i+0xe8>
 8005aec:	881d      	ldrh	r5, [r3, #0]
 8005aee:	4854      	ldr	r0, [pc, #336]	; (8005c40 <_printf_i+0x244>)
 8005af0:	2f6f      	cmp	r7, #111	; 0x6f
 8005af2:	bf0c      	ite	eq
 8005af4:	2308      	moveq	r3, #8
 8005af6:	230a      	movne	r3, #10
 8005af8:	2100      	movs	r1, #0
 8005afa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005afe:	6866      	ldr	r6, [r4, #4]
 8005b00:	60a6      	str	r6, [r4, #8]
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	bfa2      	ittt	ge
 8005b06:	6821      	ldrge	r1, [r4, #0]
 8005b08:	f021 0104 	bicge.w	r1, r1, #4
 8005b0c:	6021      	strge	r1, [r4, #0]
 8005b0e:	b90d      	cbnz	r5, 8005b14 <_printf_i+0x118>
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	d04d      	beq.n	8005bb0 <_printf_i+0x1b4>
 8005b14:	4616      	mov	r6, r2
 8005b16:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b1a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b1e:	5dc7      	ldrb	r7, [r0, r7]
 8005b20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b24:	462f      	mov	r7, r5
 8005b26:	42bb      	cmp	r3, r7
 8005b28:	460d      	mov	r5, r1
 8005b2a:	d9f4      	bls.n	8005b16 <_printf_i+0x11a>
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d10b      	bne.n	8005b48 <_printf_i+0x14c>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	07df      	lsls	r7, r3, #31
 8005b34:	d508      	bpl.n	8005b48 <_printf_i+0x14c>
 8005b36:	6923      	ldr	r3, [r4, #16]
 8005b38:	6861      	ldr	r1, [r4, #4]
 8005b3a:	4299      	cmp	r1, r3
 8005b3c:	bfde      	ittt	le
 8005b3e:	2330      	movle	r3, #48	; 0x30
 8005b40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b48:	1b92      	subs	r2, r2, r6
 8005b4a:	6122      	str	r2, [r4, #16]
 8005b4c:	f8cd a000 	str.w	sl, [sp]
 8005b50:	464b      	mov	r3, r9
 8005b52:	aa03      	add	r2, sp, #12
 8005b54:	4621      	mov	r1, r4
 8005b56:	4640      	mov	r0, r8
 8005b58:	f7ff fee2 	bl	8005920 <_printf_common>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d14c      	bne.n	8005bfa <_printf_i+0x1fe>
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	b004      	add	sp, #16
 8005b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6a:	4835      	ldr	r0, [pc, #212]	; (8005c40 <_printf_i+0x244>)
 8005b6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	680e      	ldr	r6, [r1, #0]
 8005b74:	061f      	lsls	r7, r3, #24
 8005b76:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b7a:	600e      	str	r6, [r1, #0]
 8005b7c:	d514      	bpl.n	8005ba8 <_printf_i+0x1ac>
 8005b7e:	07d9      	lsls	r1, r3, #31
 8005b80:	bf44      	itt	mi
 8005b82:	f043 0320 	orrmi.w	r3, r3, #32
 8005b86:	6023      	strmi	r3, [r4, #0]
 8005b88:	b91d      	cbnz	r5, 8005b92 <_printf_i+0x196>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f023 0320 	bic.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2310      	movs	r3, #16
 8005b94:	e7b0      	b.n	8005af8 <_printf_i+0xfc>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	f043 0320 	orr.w	r3, r3, #32
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	2378      	movs	r3, #120	; 0x78
 8005ba0:	4828      	ldr	r0, [pc, #160]	; (8005c44 <_printf_i+0x248>)
 8005ba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ba6:	e7e3      	b.n	8005b70 <_printf_i+0x174>
 8005ba8:	065e      	lsls	r6, r3, #25
 8005baa:	bf48      	it	mi
 8005bac:	b2ad      	uxthmi	r5, r5
 8005bae:	e7e6      	b.n	8005b7e <_printf_i+0x182>
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	e7bb      	b.n	8005b2c <_printf_i+0x130>
 8005bb4:	680b      	ldr	r3, [r1, #0]
 8005bb6:	6826      	ldr	r6, [r4, #0]
 8005bb8:	6960      	ldr	r0, [r4, #20]
 8005bba:	1d1d      	adds	r5, r3, #4
 8005bbc:	600d      	str	r5, [r1, #0]
 8005bbe:	0635      	lsls	r5, r6, #24
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0x1cc>
 8005bc4:	6018      	str	r0, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <_printf_i+0x1d2>
 8005bc8:	0671      	lsls	r1, r6, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0x1c8>
 8005bcc:	8018      	strh	r0, [r3, #0]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	4616      	mov	r6, r2
 8005bd4:	e7ba      	b.n	8005b4c <_printf_i+0x150>
 8005bd6:	680b      	ldr	r3, [r1, #0]
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	600a      	str	r2, [r1, #0]
 8005bdc:	681e      	ldr	r6, [r3, #0]
 8005bde:	6862      	ldr	r2, [r4, #4]
 8005be0:	2100      	movs	r1, #0
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7fa fb44 	bl	8000270 <memchr>
 8005be8:	b108      	cbz	r0, 8005bee <_printf_i+0x1f2>
 8005bea:	1b80      	subs	r0, r0, r6
 8005bec:	6060      	str	r0, [r4, #4]
 8005bee:	6863      	ldr	r3, [r4, #4]
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bf8:	e7a8      	b.n	8005b4c <_printf_i+0x150>
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	4632      	mov	r2, r6
 8005bfe:	4649      	mov	r1, r9
 8005c00:	4640      	mov	r0, r8
 8005c02:	47d0      	blx	sl
 8005c04:	3001      	adds	r0, #1
 8005c06:	d0ab      	beq.n	8005b60 <_printf_i+0x164>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	079b      	lsls	r3, r3, #30
 8005c0c:	d413      	bmi.n	8005c36 <_printf_i+0x23a>
 8005c0e:	68e0      	ldr	r0, [r4, #12]
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	4298      	cmp	r0, r3
 8005c14:	bfb8      	it	lt
 8005c16:	4618      	movlt	r0, r3
 8005c18:	e7a4      	b.n	8005b64 <_printf_i+0x168>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4632      	mov	r2, r6
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	47d0      	blx	sl
 8005c24:	3001      	adds	r0, #1
 8005c26:	d09b      	beq.n	8005b60 <_printf_i+0x164>
 8005c28:	3501      	adds	r5, #1
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	9903      	ldr	r1, [sp, #12]
 8005c2e:	1a5b      	subs	r3, r3, r1
 8005c30:	42ab      	cmp	r3, r5
 8005c32:	dcf2      	bgt.n	8005c1a <_printf_i+0x21e>
 8005c34:	e7eb      	b.n	8005c0e <_printf_i+0x212>
 8005c36:	2500      	movs	r5, #0
 8005c38:	f104 0619 	add.w	r6, r4, #25
 8005c3c:	e7f5      	b.n	8005c2a <_printf_i+0x22e>
 8005c3e:	bf00      	nop
 8005c40:	0800689a 	.word	0x0800689a
 8005c44:	080068ab 	.word	0x080068ab

08005c48 <_sbrk_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d06      	ldr	r5, [pc, #24]	; (8005c64 <_sbrk_r+0x1c>)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4604      	mov	r4, r0
 8005c50:	4608      	mov	r0, r1
 8005c52:	602b      	str	r3, [r5, #0]
 8005c54:	f000 fc78 	bl	8006548 <_sbrk>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d102      	bne.n	8005c62 <_sbrk_r+0x1a>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	b103      	cbz	r3, 8005c62 <_sbrk_r+0x1a>
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	20000374 	.word	0x20000374

08005c68 <__swbuf_r>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	460e      	mov	r6, r1
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	4605      	mov	r5, r0
 8005c70:	b118      	cbz	r0, 8005c7a <__swbuf_r+0x12>
 8005c72:	6983      	ldr	r3, [r0, #24]
 8005c74:	b90b      	cbnz	r3, 8005c7a <__swbuf_r+0x12>
 8005c76:	f000 f9d9 	bl	800602c <__sinit>
 8005c7a:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <__swbuf_r+0x98>)
 8005c7c:	429c      	cmp	r4, r3
 8005c7e:	d12b      	bne.n	8005cd8 <__swbuf_r+0x70>
 8005c80:	686c      	ldr	r4, [r5, #4]
 8005c82:	69a3      	ldr	r3, [r4, #24]
 8005c84:	60a3      	str	r3, [r4, #8]
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	071a      	lsls	r2, r3, #28
 8005c8a:	d52f      	bpl.n	8005cec <__swbuf_r+0x84>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	b36b      	cbz	r3, 8005cec <__swbuf_r+0x84>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	6820      	ldr	r0, [r4, #0]
 8005c94:	1ac0      	subs	r0, r0, r3
 8005c96:	6963      	ldr	r3, [r4, #20]
 8005c98:	b2f6      	uxtb	r6, r6
 8005c9a:	4283      	cmp	r3, r0
 8005c9c:	4637      	mov	r7, r6
 8005c9e:	dc04      	bgt.n	8005caa <__swbuf_r+0x42>
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 f92e 	bl	8005f04 <_fflush_r>
 8005ca8:	bb30      	cbnz	r0, 8005cf8 <__swbuf_r+0x90>
 8005caa:	68a3      	ldr	r3, [r4, #8]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	60a3      	str	r3, [r4, #8]
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	6022      	str	r2, [r4, #0]
 8005cb6:	701e      	strb	r6, [r3, #0]
 8005cb8:	6963      	ldr	r3, [r4, #20]
 8005cba:	3001      	adds	r0, #1
 8005cbc:	4283      	cmp	r3, r0
 8005cbe:	d004      	beq.n	8005cca <__swbuf_r+0x62>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	07db      	lsls	r3, r3, #31
 8005cc4:	d506      	bpl.n	8005cd4 <__swbuf_r+0x6c>
 8005cc6:	2e0a      	cmp	r6, #10
 8005cc8:	d104      	bne.n	8005cd4 <__swbuf_r+0x6c>
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 f919 	bl	8005f04 <_fflush_r>
 8005cd2:	b988      	cbnz	r0, 8005cf8 <__swbuf_r+0x90>
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <__swbuf_r+0x9c>)
 8005cda:	429c      	cmp	r4, r3
 8005cdc:	d101      	bne.n	8005ce2 <__swbuf_r+0x7a>
 8005cde:	68ac      	ldr	r4, [r5, #8]
 8005ce0:	e7cf      	b.n	8005c82 <__swbuf_r+0x1a>
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <__swbuf_r+0xa0>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	bf08      	it	eq
 8005ce8:	68ec      	ldreq	r4, [r5, #12]
 8005cea:	e7ca      	b.n	8005c82 <__swbuf_r+0x1a>
 8005cec:	4621      	mov	r1, r4
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 f80c 	bl	8005d0c <__swsetup_r>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d0cb      	beq.n	8005c90 <__swbuf_r+0x28>
 8005cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8005cfc:	e7ea      	b.n	8005cd4 <__swbuf_r+0x6c>
 8005cfe:	bf00      	nop
 8005d00:	080068dc 	.word	0x080068dc
 8005d04:	080068fc 	.word	0x080068fc
 8005d08:	080068bc 	.word	0x080068bc

08005d0c <__swsetup_r>:
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <__swsetup_r+0xcc>)
 8005d0e:	b570      	push	{r4, r5, r6, lr}
 8005d10:	681d      	ldr	r5, [r3, #0]
 8005d12:	4606      	mov	r6, r0
 8005d14:	460c      	mov	r4, r1
 8005d16:	b125      	cbz	r5, 8005d22 <__swsetup_r+0x16>
 8005d18:	69ab      	ldr	r3, [r5, #24]
 8005d1a:	b913      	cbnz	r3, 8005d22 <__swsetup_r+0x16>
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f985 	bl	800602c <__sinit>
 8005d22:	4b2e      	ldr	r3, [pc, #184]	; (8005ddc <__swsetup_r+0xd0>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d10f      	bne.n	8005d48 <__swsetup_r+0x3c>
 8005d28:	686c      	ldr	r4, [r5, #4]
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d30:	0719      	lsls	r1, r3, #28
 8005d32:	d42c      	bmi.n	8005d8e <__swsetup_r+0x82>
 8005d34:	06dd      	lsls	r5, r3, #27
 8005d36:	d411      	bmi.n	8005d5c <__swsetup_r+0x50>
 8005d38:	2309      	movs	r3, #9
 8005d3a:	6033      	str	r3, [r6, #0]
 8005d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	f04f 30ff 	mov.w	r0, #4294967295
 8005d46:	e03e      	b.n	8005dc6 <__swsetup_r+0xba>
 8005d48:	4b25      	ldr	r3, [pc, #148]	; (8005de0 <__swsetup_r+0xd4>)
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	d101      	bne.n	8005d52 <__swsetup_r+0x46>
 8005d4e:	68ac      	ldr	r4, [r5, #8]
 8005d50:	e7eb      	b.n	8005d2a <__swsetup_r+0x1e>
 8005d52:	4b24      	ldr	r3, [pc, #144]	; (8005de4 <__swsetup_r+0xd8>)
 8005d54:	429c      	cmp	r4, r3
 8005d56:	bf08      	it	eq
 8005d58:	68ec      	ldreq	r4, [r5, #12]
 8005d5a:	e7e6      	b.n	8005d2a <__swsetup_r+0x1e>
 8005d5c:	0758      	lsls	r0, r3, #29
 8005d5e:	d512      	bpl.n	8005d86 <__swsetup_r+0x7a>
 8005d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d62:	b141      	cbz	r1, 8005d76 <__swsetup_r+0x6a>
 8005d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	d002      	beq.n	8005d72 <__swsetup_r+0x66>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f7ff fa77 	bl	8005260 <_free_r>
 8005d72:	2300      	movs	r3, #0
 8005d74:	6363      	str	r3, [r4, #52]	; 0x34
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	f043 0308 	orr.w	r3, r3, #8
 8005d8c:	81a3      	strh	r3, [r4, #12]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	b94b      	cbnz	r3, 8005da6 <__swsetup_r+0x9a>
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9c:	d003      	beq.n	8005da6 <__swsetup_r+0x9a>
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4630      	mov	r0, r6
 8005da2:	f000 fa07 	bl	80061b4 <__smakebuf_r>
 8005da6:	89a0      	ldrh	r0, [r4, #12]
 8005da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dac:	f010 0301 	ands.w	r3, r0, #1
 8005db0:	d00a      	beq.n	8005dc8 <__swsetup_r+0xbc>
 8005db2:	2300      	movs	r3, #0
 8005db4:	60a3      	str	r3, [r4, #8]
 8005db6:	6963      	ldr	r3, [r4, #20]
 8005db8:	425b      	negs	r3, r3
 8005dba:	61a3      	str	r3, [r4, #24]
 8005dbc:	6923      	ldr	r3, [r4, #16]
 8005dbe:	b943      	cbnz	r3, 8005dd2 <__swsetup_r+0xc6>
 8005dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dc4:	d1ba      	bne.n	8005d3c <__swsetup_r+0x30>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	0781      	lsls	r1, r0, #30
 8005dca:	bf58      	it	pl
 8005dcc:	6963      	ldrpl	r3, [r4, #20]
 8005dce:	60a3      	str	r3, [r4, #8]
 8005dd0:	e7f4      	b.n	8005dbc <__swsetup_r+0xb0>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	e7f7      	b.n	8005dc6 <__swsetup_r+0xba>
 8005dd6:	bf00      	nop
 8005dd8:	20000014 	.word	0x20000014
 8005ddc:	080068dc 	.word	0x080068dc
 8005de0:	080068fc 	.word	0x080068fc
 8005de4:	080068bc 	.word	0x080068bc

08005de8 <abort>:
 8005de8:	b508      	push	{r3, lr}
 8005dea:	2006      	movs	r0, #6
 8005dec:	f000 faa4 	bl	8006338 <raise>
 8005df0:	2001      	movs	r0, #1
 8005df2:	f000 fbbf 	bl	8006574 <_exit>
	...

08005df8 <__sflush_r>:
 8005df8:	898a      	ldrh	r2, [r1, #12]
 8005dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfe:	4605      	mov	r5, r0
 8005e00:	0710      	lsls	r0, r2, #28
 8005e02:	460c      	mov	r4, r1
 8005e04:	d458      	bmi.n	8005eb8 <__sflush_r+0xc0>
 8005e06:	684b      	ldr	r3, [r1, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dc05      	bgt.n	8005e18 <__sflush_r+0x20>
 8005e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	dc02      	bgt.n	8005e18 <__sflush_r+0x20>
 8005e12:	2000      	movs	r0, #0
 8005e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	d0f9      	beq.n	8005e12 <__sflush_r+0x1a>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e24:	682f      	ldr	r7, [r5, #0]
 8005e26:	602b      	str	r3, [r5, #0]
 8005e28:	d032      	beq.n	8005e90 <__sflush_r+0x98>
 8005e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	075a      	lsls	r2, r3, #29
 8005e30:	d505      	bpl.n	8005e3e <__sflush_r+0x46>
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	1ac0      	subs	r0, r0, r3
 8005e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e38:	b10b      	cbz	r3, 8005e3e <__sflush_r+0x46>
 8005e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e3c:	1ac0      	subs	r0, r0, r3
 8005e3e:	2300      	movs	r3, #0
 8005e40:	4602      	mov	r2, r0
 8005e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e44:	6a21      	ldr	r1, [r4, #32]
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b0      	blx	r6
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	d106      	bne.n	8005e5e <__sflush_r+0x66>
 8005e50:	6829      	ldr	r1, [r5, #0]
 8005e52:	291d      	cmp	r1, #29
 8005e54:	d82c      	bhi.n	8005eb0 <__sflush_r+0xb8>
 8005e56:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <__sflush_r+0x108>)
 8005e58:	40ca      	lsrs	r2, r1
 8005e5a:	07d6      	lsls	r6, r2, #31
 8005e5c:	d528      	bpl.n	8005eb0 <__sflush_r+0xb8>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	6062      	str	r2, [r4, #4]
 8005e62:	04d9      	lsls	r1, r3, #19
 8005e64:	6922      	ldr	r2, [r4, #16]
 8005e66:	6022      	str	r2, [r4, #0]
 8005e68:	d504      	bpl.n	8005e74 <__sflush_r+0x7c>
 8005e6a:	1c42      	adds	r2, r0, #1
 8005e6c:	d101      	bne.n	8005e72 <__sflush_r+0x7a>
 8005e6e:	682b      	ldr	r3, [r5, #0]
 8005e70:	b903      	cbnz	r3, 8005e74 <__sflush_r+0x7c>
 8005e72:	6560      	str	r0, [r4, #84]	; 0x54
 8005e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e76:	602f      	str	r7, [r5, #0]
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	d0ca      	beq.n	8005e12 <__sflush_r+0x1a>
 8005e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d002      	beq.n	8005e8a <__sflush_r+0x92>
 8005e84:	4628      	mov	r0, r5
 8005e86:	f7ff f9eb 	bl	8005260 <_free_r>
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e8e:	e7c1      	b.n	8005e14 <__sflush_r+0x1c>
 8005e90:	6a21      	ldr	r1, [r4, #32]
 8005e92:	2301      	movs	r3, #1
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b0      	blx	r6
 8005e98:	1c41      	adds	r1, r0, #1
 8005e9a:	d1c7      	bne.n	8005e2c <__sflush_r+0x34>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0c4      	beq.n	8005e2c <__sflush_r+0x34>
 8005ea2:	2b1d      	cmp	r3, #29
 8005ea4:	d001      	beq.n	8005eaa <__sflush_r+0xb2>
 8005ea6:	2b16      	cmp	r3, #22
 8005ea8:	d101      	bne.n	8005eae <__sflush_r+0xb6>
 8005eaa:	602f      	str	r7, [r5, #0]
 8005eac:	e7b1      	b.n	8005e12 <__sflush_r+0x1a>
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	e7ad      	b.n	8005e14 <__sflush_r+0x1c>
 8005eb8:	690f      	ldr	r7, [r1, #16]
 8005eba:	2f00      	cmp	r7, #0
 8005ebc:	d0a9      	beq.n	8005e12 <__sflush_r+0x1a>
 8005ebe:	0793      	lsls	r3, r2, #30
 8005ec0:	680e      	ldr	r6, [r1, #0]
 8005ec2:	bf08      	it	eq
 8005ec4:	694b      	ldreq	r3, [r1, #20]
 8005ec6:	600f      	str	r7, [r1, #0]
 8005ec8:	bf18      	it	ne
 8005eca:	2300      	movne	r3, #0
 8005ecc:	eba6 0807 	sub.w	r8, r6, r7
 8005ed0:	608b      	str	r3, [r1, #8]
 8005ed2:	f1b8 0f00 	cmp.w	r8, #0
 8005ed6:	dd9c      	ble.n	8005e12 <__sflush_r+0x1a>
 8005ed8:	6a21      	ldr	r1, [r4, #32]
 8005eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005edc:	4643      	mov	r3, r8
 8005ede:	463a      	mov	r2, r7
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b0      	blx	r6
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	dc06      	bgt.n	8005ef6 <__sflush_r+0xfe>
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eee:	81a3      	strh	r3, [r4, #12]
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef4:	e78e      	b.n	8005e14 <__sflush_r+0x1c>
 8005ef6:	4407      	add	r7, r0
 8005ef8:	eba8 0800 	sub.w	r8, r8, r0
 8005efc:	e7e9      	b.n	8005ed2 <__sflush_r+0xda>
 8005efe:	bf00      	nop
 8005f00:	20400001 	.word	0x20400001

08005f04 <_fflush_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	690b      	ldr	r3, [r1, #16]
 8005f08:	4605      	mov	r5, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	b913      	cbnz	r3, 8005f14 <_fflush_r+0x10>
 8005f0e:	2500      	movs	r5, #0
 8005f10:	4628      	mov	r0, r5
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	b118      	cbz	r0, 8005f1e <_fflush_r+0x1a>
 8005f16:	6983      	ldr	r3, [r0, #24]
 8005f18:	b90b      	cbnz	r3, 8005f1e <_fflush_r+0x1a>
 8005f1a:	f000 f887 	bl	800602c <__sinit>
 8005f1e:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <_fflush_r+0x6c>)
 8005f20:	429c      	cmp	r4, r3
 8005f22:	d11b      	bne.n	8005f5c <_fflush_r+0x58>
 8005f24:	686c      	ldr	r4, [r5, #4]
 8005f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0ef      	beq.n	8005f0e <_fflush_r+0xa>
 8005f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f30:	07d0      	lsls	r0, r2, #31
 8005f32:	d404      	bmi.n	8005f3e <_fflush_r+0x3a>
 8005f34:	0599      	lsls	r1, r3, #22
 8005f36:	d402      	bmi.n	8005f3e <_fflush_r+0x3a>
 8005f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f3a:	f000 f915 	bl	8006168 <__retarget_lock_acquire_recursive>
 8005f3e:	4628      	mov	r0, r5
 8005f40:	4621      	mov	r1, r4
 8005f42:	f7ff ff59 	bl	8005df8 <__sflush_r>
 8005f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f48:	07da      	lsls	r2, r3, #31
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	d4e0      	bmi.n	8005f10 <_fflush_r+0xc>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	059b      	lsls	r3, r3, #22
 8005f52:	d4dd      	bmi.n	8005f10 <_fflush_r+0xc>
 8005f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f56:	f000 f908 	bl	800616a <__retarget_lock_release_recursive>
 8005f5a:	e7d9      	b.n	8005f10 <_fflush_r+0xc>
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <_fflush_r+0x70>)
 8005f5e:	429c      	cmp	r4, r3
 8005f60:	d101      	bne.n	8005f66 <_fflush_r+0x62>
 8005f62:	68ac      	ldr	r4, [r5, #8]
 8005f64:	e7df      	b.n	8005f26 <_fflush_r+0x22>
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <_fflush_r+0x74>)
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	bf08      	it	eq
 8005f6c:	68ec      	ldreq	r4, [r5, #12]
 8005f6e:	e7da      	b.n	8005f26 <_fflush_r+0x22>
 8005f70:	080068dc 	.word	0x080068dc
 8005f74:	080068fc 	.word	0x080068fc
 8005f78:	080068bc 	.word	0x080068bc

08005f7c <std>:
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	4604      	mov	r4, r0
 8005f82:	e9c0 3300 	strd	r3, r3, [r0]
 8005f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f8a:	6083      	str	r3, [r0, #8]
 8005f8c:	8181      	strh	r1, [r0, #12]
 8005f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f90:	81c2      	strh	r2, [r0, #14]
 8005f92:	6183      	str	r3, [r0, #24]
 8005f94:	4619      	mov	r1, r3
 8005f96:	2208      	movs	r2, #8
 8005f98:	305c      	adds	r0, #92	; 0x5c
 8005f9a:	f7fe ffb3 	bl	8004f04 <memset>
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <std+0x38>)
 8005fa0:	6263      	str	r3, [r4, #36]	; 0x24
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <std+0x3c>)
 8005fa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <std+0x40>)
 8005fa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <std+0x44>)
 8005fac:	6224      	str	r4, [r4, #32]
 8005fae:	6323      	str	r3, [r4, #48]	; 0x30
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	bf00      	nop
 8005fb4:	08006371 	.word	0x08006371
 8005fb8:	08006393 	.word	0x08006393
 8005fbc:	080063cb 	.word	0x080063cb
 8005fc0:	080063ef 	.word	0x080063ef

08005fc4 <_cleanup_r>:
 8005fc4:	4901      	ldr	r1, [pc, #4]	; (8005fcc <_cleanup_r+0x8>)
 8005fc6:	f000 b8af 	b.w	8006128 <_fwalk_reent>
 8005fca:	bf00      	nop
 8005fcc:	08005f05 	.word	0x08005f05

08005fd0 <__sfmoreglue>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	1e4a      	subs	r2, r1, #1
 8005fd4:	2568      	movs	r5, #104	; 0x68
 8005fd6:	4355      	muls	r5, r2
 8005fd8:	460e      	mov	r6, r1
 8005fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fde:	f7ff f98f 	bl	8005300 <_malloc_r>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	b140      	cbz	r0, 8005ff8 <__sfmoreglue+0x28>
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8005fec:	300c      	adds	r0, #12
 8005fee:	60a0      	str	r0, [r4, #8]
 8005ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ff4:	f7fe ff86 	bl	8004f04 <memset>
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}

08005ffc <__sfp_lock_acquire>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__sfp_lock_acquire+0x8>)
 8005ffe:	f000 b8b3 	b.w	8006168 <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	20000370 	.word	0x20000370

08006008 <__sfp_lock_release>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__sfp_lock_release+0x8>)
 800600a:	f000 b8ae 	b.w	800616a <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	20000370 	.word	0x20000370

08006014 <__sinit_lock_acquire>:
 8006014:	4801      	ldr	r0, [pc, #4]	; (800601c <__sinit_lock_acquire+0x8>)
 8006016:	f000 b8a7 	b.w	8006168 <__retarget_lock_acquire_recursive>
 800601a:	bf00      	nop
 800601c:	2000036b 	.word	0x2000036b

08006020 <__sinit_lock_release>:
 8006020:	4801      	ldr	r0, [pc, #4]	; (8006028 <__sinit_lock_release+0x8>)
 8006022:	f000 b8a2 	b.w	800616a <__retarget_lock_release_recursive>
 8006026:	bf00      	nop
 8006028:	2000036b 	.word	0x2000036b

0800602c <__sinit>:
 800602c:	b510      	push	{r4, lr}
 800602e:	4604      	mov	r4, r0
 8006030:	f7ff fff0 	bl	8006014 <__sinit_lock_acquire>
 8006034:	69a3      	ldr	r3, [r4, #24]
 8006036:	b11b      	cbz	r3, 8006040 <__sinit+0x14>
 8006038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800603c:	f7ff bff0 	b.w	8006020 <__sinit_lock_release>
 8006040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006044:	6523      	str	r3, [r4, #80]	; 0x50
 8006046:	4b13      	ldr	r3, [pc, #76]	; (8006094 <__sinit+0x68>)
 8006048:	4a13      	ldr	r2, [pc, #76]	; (8006098 <__sinit+0x6c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	62a2      	str	r2, [r4, #40]	; 0x28
 800604e:	42a3      	cmp	r3, r4
 8006050:	bf04      	itt	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	61a3      	streq	r3, [r4, #24]
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f820 	bl	800609c <__sfp>
 800605c:	6060      	str	r0, [r4, #4]
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f81c 	bl	800609c <__sfp>
 8006064:	60a0      	str	r0, [r4, #8]
 8006066:	4620      	mov	r0, r4
 8006068:	f000 f818 	bl	800609c <__sfp>
 800606c:	2200      	movs	r2, #0
 800606e:	60e0      	str	r0, [r4, #12]
 8006070:	2104      	movs	r1, #4
 8006072:	6860      	ldr	r0, [r4, #4]
 8006074:	f7ff ff82 	bl	8005f7c <std>
 8006078:	68a0      	ldr	r0, [r4, #8]
 800607a:	2201      	movs	r2, #1
 800607c:	2109      	movs	r1, #9
 800607e:	f7ff ff7d 	bl	8005f7c <std>
 8006082:	68e0      	ldr	r0, [r4, #12]
 8006084:	2202      	movs	r2, #2
 8006086:	2112      	movs	r1, #18
 8006088:	f7ff ff78 	bl	8005f7c <std>
 800608c:	2301      	movs	r3, #1
 800608e:	61a3      	str	r3, [r4, #24]
 8006090:	e7d2      	b.n	8006038 <__sinit+0xc>
 8006092:	bf00      	nop
 8006094:	080066d0 	.word	0x080066d0
 8006098:	08005fc5 	.word	0x08005fc5

0800609c <__sfp>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	4607      	mov	r7, r0
 80060a0:	f7ff ffac 	bl	8005ffc <__sfp_lock_acquire>
 80060a4:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <__sfp+0x84>)
 80060a6:	681e      	ldr	r6, [r3, #0]
 80060a8:	69b3      	ldr	r3, [r6, #24]
 80060aa:	b913      	cbnz	r3, 80060b2 <__sfp+0x16>
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff ffbd 	bl	800602c <__sinit>
 80060b2:	3648      	adds	r6, #72	; 0x48
 80060b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	d503      	bpl.n	80060c4 <__sfp+0x28>
 80060bc:	6833      	ldr	r3, [r6, #0]
 80060be:	b30b      	cbz	r3, 8006104 <__sfp+0x68>
 80060c0:	6836      	ldr	r6, [r6, #0]
 80060c2:	e7f7      	b.n	80060b4 <__sfp+0x18>
 80060c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060c8:	b9d5      	cbnz	r5, 8006100 <__sfp+0x64>
 80060ca:	4b16      	ldr	r3, [pc, #88]	; (8006124 <__sfp+0x88>)
 80060cc:	60e3      	str	r3, [r4, #12]
 80060ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060d2:	6665      	str	r5, [r4, #100]	; 0x64
 80060d4:	f000 f847 	bl	8006166 <__retarget_lock_init_recursive>
 80060d8:	f7ff ff96 	bl	8006008 <__sfp_lock_release>
 80060dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060e4:	6025      	str	r5, [r4, #0]
 80060e6:	61a5      	str	r5, [r4, #24]
 80060e8:	2208      	movs	r2, #8
 80060ea:	4629      	mov	r1, r5
 80060ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060f0:	f7fe ff08 	bl	8004f04 <memset>
 80060f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060fc:	4620      	mov	r0, r4
 80060fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006100:	3468      	adds	r4, #104	; 0x68
 8006102:	e7d9      	b.n	80060b8 <__sfp+0x1c>
 8006104:	2104      	movs	r1, #4
 8006106:	4638      	mov	r0, r7
 8006108:	f7ff ff62 	bl	8005fd0 <__sfmoreglue>
 800610c:	4604      	mov	r4, r0
 800610e:	6030      	str	r0, [r6, #0]
 8006110:	2800      	cmp	r0, #0
 8006112:	d1d5      	bne.n	80060c0 <__sfp+0x24>
 8006114:	f7ff ff78 	bl	8006008 <__sfp_lock_release>
 8006118:	230c      	movs	r3, #12
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	e7ee      	b.n	80060fc <__sfp+0x60>
 800611e:	bf00      	nop
 8006120:	080066d0 	.word	0x080066d0
 8006124:	ffff0001 	.word	0xffff0001

08006128 <_fwalk_reent>:
 8006128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612c:	4606      	mov	r6, r0
 800612e:	4688      	mov	r8, r1
 8006130:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006134:	2700      	movs	r7, #0
 8006136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800613a:	f1b9 0901 	subs.w	r9, r9, #1
 800613e:	d505      	bpl.n	800614c <_fwalk_reent+0x24>
 8006140:	6824      	ldr	r4, [r4, #0]
 8006142:	2c00      	cmp	r4, #0
 8006144:	d1f7      	bne.n	8006136 <_fwalk_reent+0xe>
 8006146:	4638      	mov	r0, r7
 8006148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614c:	89ab      	ldrh	r3, [r5, #12]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d907      	bls.n	8006162 <_fwalk_reent+0x3a>
 8006152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006156:	3301      	adds	r3, #1
 8006158:	d003      	beq.n	8006162 <_fwalk_reent+0x3a>
 800615a:	4629      	mov	r1, r5
 800615c:	4630      	mov	r0, r6
 800615e:	47c0      	blx	r8
 8006160:	4307      	orrs	r7, r0
 8006162:	3568      	adds	r5, #104	; 0x68
 8006164:	e7e9      	b.n	800613a <_fwalk_reent+0x12>

08006166 <__retarget_lock_init_recursive>:
 8006166:	4770      	bx	lr

08006168 <__retarget_lock_acquire_recursive>:
 8006168:	4770      	bx	lr

0800616a <__retarget_lock_release_recursive>:
 800616a:	4770      	bx	lr

0800616c <__swhatbuf_r>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	460e      	mov	r6, r1
 8006170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006174:	2900      	cmp	r1, #0
 8006176:	b096      	sub	sp, #88	; 0x58
 8006178:	4614      	mov	r4, r2
 800617a:	461d      	mov	r5, r3
 800617c:	da07      	bge.n	800618e <__swhatbuf_r+0x22>
 800617e:	2300      	movs	r3, #0
 8006180:	602b      	str	r3, [r5, #0]
 8006182:	89b3      	ldrh	r3, [r6, #12]
 8006184:	061a      	lsls	r2, r3, #24
 8006186:	d410      	bmi.n	80061aa <__swhatbuf_r+0x3e>
 8006188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618c:	e00e      	b.n	80061ac <__swhatbuf_r+0x40>
 800618e:	466a      	mov	r2, sp
 8006190:	f000 f954 	bl	800643c <_fstat_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	dbf2      	blt.n	800617e <__swhatbuf_r+0x12>
 8006198:	9a01      	ldr	r2, [sp, #4]
 800619a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800619e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061a2:	425a      	negs	r2, r3
 80061a4:	415a      	adcs	r2, r3
 80061a6:	602a      	str	r2, [r5, #0]
 80061a8:	e7ee      	b.n	8006188 <__swhatbuf_r+0x1c>
 80061aa:	2340      	movs	r3, #64	; 0x40
 80061ac:	2000      	movs	r0, #0
 80061ae:	6023      	str	r3, [r4, #0]
 80061b0:	b016      	add	sp, #88	; 0x58
 80061b2:	bd70      	pop	{r4, r5, r6, pc}

080061b4 <__smakebuf_r>:
 80061b4:	898b      	ldrh	r3, [r1, #12]
 80061b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b8:	079d      	lsls	r5, r3, #30
 80061ba:	4606      	mov	r6, r0
 80061bc:	460c      	mov	r4, r1
 80061be:	d507      	bpl.n	80061d0 <__smakebuf_r+0x1c>
 80061c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	2301      	movs	r3, #1
 80061ca:	6163      	str	r3, [r4, #20]
 80061cc:	b002      	add	sp, #8
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	ab01      	add	r3, sp, #4
 80061d2:	466a      	mov	r2, sp
 80061d4:	f7ff ffca 	bl	800616c <__swhatbuf_r>
 80061d8:	9900      	ldr	r1, [sp, #0]
 80061da:	4605      	mov	r5, r0
 80061dc:	4630      	mov	r0, r6
 80061de:	f7ff f88f 	bl	8005300 <_malloc_r>
 80061e2:	b948      	cbnz	r0, 80061f8 <__smakebuf_r+0x44>
 80061e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e8:	059a      	lsls	r2, r3, #22
 80061ea:	d4ef      	bmi.n	80061cc <__smakebuf_r+0x18>
 80061ec:	f023 0303 	bic.w	r3, r3, #3
 80061f0:	f043 0302 	orr.w	r3, r3, #2
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	e7e3      	b.n	80061c0 <__smakebuf_r+0xc>
 80061f8:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <__smakebuf_r+0x7c>)
 80061fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80061fc:	89a3      	ldrh	r3, [r4, #12]
 80061fe:	6020      	str	r0, [r4, #0]
 8006200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	9b00      	ldr	r3, [sp, #0]
 8006208:	6163      	str	r3, [r4, #20]
 800620a:	9b01      	ldr	r3, [sp, #4]
 800620c:	6120      	str	r0, [r4, #16]
 800620e:	b15b      	cbz	r3, 8006228 <__smakebuf_r+0x74>
 8006210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006214:	4630      	mov	r0, r6
 8006216:	f000 f923 	bl	8006460 <_isatty_r>
 800621a:	b128      	cbz	r0, 8006228 <__smakebuf_r+0x74>
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	f023 0303 	bic.w	r3, r3, #3
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	81a3      	strh	r3, [r4, #12]
 8006228:	89a0      	ldrh	r0, [r4, #12]
 800622a:	4305      	orrs	r5, r0
 800622c:	81a5      	strh	r5, [r4, #12]
 800622e:	e7cd      	b.n	80061cc <__smakebuf_r+0x18>
 8006230:	08005fc5 	.word	0x08005fc5

08006234 <memcpy>:
 8006234:	440a      	add	r2, r1
 8006236:	4291      	cmp	r1, r2
 8006238:	f100 33ff 	add.w	r3, r0, #4294967295
 800623c:	d100      	bne.n	8006240 <memcpy+0xc>
 800623e:	4770      	bx	lr
 8006240:	b510      	push	{r4, lr}
 8006242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800624a:	4291      	cmp	r1, r2
 800624c:	d1f9      	bne.n	8006242 <memcpy+0xe>
 800624e:	bd10      	pop	{r4, pc}

08006250 <memmove>:
 8006250:	4288      	cmp	r0, r1
 8006252:	b510      	push	{r4, lr}
 8006254:	eb01 0402 	add.w	r4, r1, r2
 8006258:	d902      	bls.n	8006260 <memmove+0x10>
 800625a:	4284      	cmp	r4, r0
 800625c:	4623      	mov	r3, r4
 800625e:	d807      	bhi.n	8006270 <memmove+0x20>
 8006260:	1e43      	subs	r3, r0, #1
 8006262:	42a1      	cmp	r1, r4
 8006264:	d008      	beq.n	8006278 <memmove+0x28>
 8006266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800626a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800626e:	e7f8      	b.n	8006262 <memmove+0x12>
 8006270:	4402      	add	r2, r0
 8006272:	4601      	mov	r1, r0
 8006274:	428a      	cmp	r2, r1
 8006276:	d100      	bne.n	800627a <memmove+0x2a>
 8006278:	bd10      	pop	{r4, pc}
 800627a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800627e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006282:	e7f7      	b.n	8006274 <memmove+0x24>

08006284 <__malloc_lock>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__malloc_lock+0x8>)
 8006286:	f7ff bf6f 	b.w	8006168 <__retarget_lock_acquire_recursive>
 800628a:	bf00      	nop
 800628c:	2000036c 	.word	0x2000036c

08006290 <__malloc_unlock>:
 8006290:	4801      	ldr	r0, [pc, #4]	; (8006298 <__malloc_unlock+0x8>)
 8006292:	f7ff bf6a 	b.w	800616a <__retarget_lock_release_recursive>
 8006296:	bf00      	nop
 8006298:	2000036c 	.word	0x2000036c

0800629c <_realloc_r>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	4607      	mov	r7, r0
 80062a0:	4614      	mov	r4, r2
 80062a2:	460e      	mov	r6, r1
 80062a4:	b921      	cbnz	r1, 80062b0 <_realloc_r+0x14>
 80062a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062aa:	4611      	mov	r1, r2
 80062ac:	f7ff b828 	b.w	8005300 <_malloc_r>
 80062b0:	b922      	cbnz	r2, 80062bc <_realloc_r+0x20>
 80062b2:	f7fe ffd5 	bl	8005260 <_free_r>
 80062b6:	4625      	mov	r5, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062bc:	f000 f8f2 	bl	80064a4 <_malloc_usable_size_r>
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d20f      	bcs.n	80062e4 <_realloc_r+0x48>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4638      	mov	r0, r7
 80062c8:	f7ff f81a 	bl	8005300 <_malloc_r>
 80062cc:	4605      	mov	r5, r0
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d0f2      	beq.n	80062b8 <_realloc_r+0x1c>
 80062d2:	4631      	mov	r1, r6
 80062d4:	4622      	mov	r2, r4
 80062d6:	f7ff ffad 	bl	8006234 <memcpy>
 80062da:	4631      	mov	r1, r6
 80062dc:	4638      	mov	r0, r7
 80062de:	f7fe ffbf 	bl	8005260 <_free_r>
 80062e2:	e7e9      	b.n	80062b8 <_realloc_r+0x1c>
 80062e4:	4635      	mov	r5, r6
 80062e6:	e7e7      	b.n	80062b8 <_realloc_r+0x1c>

080062e8 <_raise_r>:
 80062e8:	291f      	cmp	r1, #31
 80062ea:	b538      	push	{r3, r4, r5, lr}
 80062ec:	4604      	mov	r4, r0
 80062ee:	460d      	mov	r5, r1
 80062f0:	d904      	bls.n	80062fc <_raise_r+0x14>
 80062f2:	2316      	movs	r3, #22
 80062f4:	6003      	str	r3, [r0, #0]
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062fe:	b112      	cbz	r2, 8006306 <_raise_r+0x1e>
 8006300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006304:	b94b      	cbnz	r3, 800631a <_raise_r+0x32>
 8006306:	4620      	mov	r0, r4
 8006308:	f000 f830 	bl	800636c <_getpid_r>
 800630c:	462a      	mov	r2, r5
 800630e:	4601      	mov	r1, r0
 8006310:	4620      	mov	r0, r4
 8006312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006316:	f000 b817 	b.w	8006348 <_kill_r>
 800631a:	2b01      	cmp	r3, #1
 800631c:	d00a      	beq.n	8006334 <_raise_r+0x4c>
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	d103      	bne.n	800632a <_raise_r+0x42>
 8006322:	2316      	movs	r3, #22
 8006324:	6003      	str	r3, [r0, #0]
 8006326:	2001      	movs	r0, #1
 8006328:	e7e7      	b.n	80062fa <_raise_r+0x12>
 800632a:	2400      	movs	r4, #0
 800632c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006330:	4628      	mov	r0, r5
 8006332:	4798      	blx	r3
 8006334:	2000      	movs	r0, #0
 8006336:	e7e0      	b.n	80062fa <_raise_r+0x12>

08006338 <raise>:
 8006338:	4b02      	ldr	r3, [pc, #8]	; (8006344 <raise+0xc>)
 800633a:	4601      	mov	r1, r0
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	f7ff bfd3 	b.w	80062e8 <_raise_r>
 8006342:	bf00      	nop
 8006344:	20000014 	.word	0x20000014

08006348 <_kill_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d07      	ldr	r5, [pc, #28]	; (8006368 <_kill_r+0x20>)
 800634c:	2300      	movs	r3, #0
 800634e:	4604      	mov	r4, r0
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	602b      	str	r3, [r5, #0]
 8006356:	f000 f8df 	bl	8006518 <_kill>
 800635a:	1c43      	adds	r3, r0, #1
 800635c:	d102      	bne.n	8006364 <_kill_r+0x1c>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	b103      	cbz	r3, 8006364 <_kill_r+0x1c>
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	bd38      	pop	{r3, r4, r5, pc}
 8006366:	bf00      	nop
 8006368:	20000374 	.word	0x20000374

0800636c <_getpid_r>:
 800636c:	f000 b8c4 	b.w	80064f8 <_getpid>

08006370 <__sread>:
 8006370:	b510      	push	{r4, lr}
 8006372:	460c      	mov	r4, r1
 8006374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006378:	f000 f89c 	bl	80064b4 <_read_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	bfab      	itete	ge
 8006380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006382:	89a3      	ldrhlt	r3, [r4, #12]
 8006384:	181b      	addge	r3, r3, r0
 8006386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800638a:	bfac      	ite	ge
 800638c:	6563      	strge	r3, [r4, #84]	; 0x54
 800638e:	81a3      	strhlt	r3, [r4, #12]
 8006390:	bd10      	pop	{r4, pc}

08006392 <__swrite>:
 8006392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006396:	461f      	mov	r7, r3
 8006398:	898b      	ldrh	r3, [r1, #12]
 800639a:	05db      	lsls	r3, r3, #23
 800639c:	4605      	mov	r5, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	4616      	mov	r6, r2
 80063a2:	d505      	bpl.n	80063b0 <__swrite+0x1e>
 80063a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a8:	2302      	movs	r3, #2
 80063aa:	2200      	movs	r2, #0
 80063ac:	f000 f868 	bl	8006480 <_lseek_r>
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	4632      	mov	r2, r6
 80063be:	463b      	mov	r3, r7
 80063c0:	4628      	mov	r0, r5
 80063c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063c6:	f000 b817 	b.w	80063f8 <_write_r>

080063ca <__sseek>:
 80063ca:	b510      	push	{r4, lr}
 80063cc:	460c      	mov	r4, r1
 80063ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d2:	f000 f855 	bl	8006480 <_lseek_r>
 80063d6:	1c43      	adds	r3, r0, #1
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	bf15      	itete	ne
 80063dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063e6:	81a3      	strheq	r3, [r4, #12]
 80063e8:	bf18      	it	ne
 80063ea:	81a3      	strhne	r3, [r4, #12]
 80063ec:	bd10      	pop	{r4, pc}

080063ee <__sclose>:
 80063ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f2:	f000 b813 	b.w	800641c <_close_r>
	...

080063f8 <_write_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d07      	ldr	r5, [pc, #28]	; (8006418 <_write_r+0x20>)
 80063fc:	4604      	mov	r4, r0
 80063fe:	4608      	mov	r0, r1
 8006400:	4611      	mov	r1, r2
 8006402:	2200      	movs	r2, #0
 8006404:	602a      	str	r2, [r5, #0]
 8006406:	461a      	mov	r2, r3
 8006408:	f000 f8ac 	bl	8006564 <_write>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_write_r+0x1e>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_write_r+0x1e>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20000374 	.word	0x20000374

0800641c <_close_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4d06      	ldr	r5, [pc, #24]	; (8006438 <_close_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4604      	mov	r4, r0
 8006424:	4608      	mov	r0, r1
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	f000 f856 	bl	80064d8 <_close>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_close_r+0x1a>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_close_r+0x1a>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20000374 	.word	0x20000374

0800643c <_fstat_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d07      	ldr	r5, [pc, #28]	; (800645c <_fstat_r+0x20>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	f000 f84d 	bl	80064e8 <_fstat>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d102      	bne.n	8006458 <_fstat_r+0x1c>
 8006452:	682b      	ldr	r3, [r5, #0]
 8006454:	b103      	cbz	r3, 8006458 <_fstat_r+0x1c>
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	20000374 	.word	0x20000374

08006460 <_isatty_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	; (800647c <_isatty_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f000 f84c 	bl	8006508 <_isatty>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_isatty_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_isatty_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	20000374 	.word	0x20000374

08006480 <_lseek_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d07      	ldr	r5, [pc, #28]	; (80064a0 <_lseek_r+0x20>)
 8006484:	4604      	mov	r4, r0
 8006486:	4608      	mov	r0, r1
 8006488:	4611      	mov	r1, r2
 800648a:	2200      	movs	r2, #0
 800648c:	602a      	str	r2, [r5, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	f000 f84a 	bl	8006528 <_lseek>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d102      	bne.n	800649e <_lseek_r+0x1e>
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	b103      	cbz	r3, 800649e <_lseek_r+0x1e>
 800649c:	6023      	str	r3, [r4, #0]
 800649e:	bd38      	pop	{r3, r4, r5, pc}
 80064a0:	20000374 	.word	0x20000374

080064a4 <_malloc_usable_size_r>:
 80064a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a8:	1f18      	subs	r0, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bfbc      	itt	lt
 80064ae:	580b      	ldrlt	r3, [r1, r0]
 80064b0:	18c0      	addlt	r0, r0, r3
 80064b2:	4770      	bx	lr

080064b4 <_read_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	4d07      	ldr	r5, [pc, #28]	; (80064d4 <_read_r+0x20>)
 80064b8:	4604      	mov	r4, r0
 80064ba:	4608      	mov	r0, r1
 80064bc:	4611      	mov	r1, r2
 80064be:	2200      	movs	r2, #0
 80064c0:	602a      	str	r2, [r5, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	f000 f838 	bl	8006538 <_read>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_read_r+0x1e>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_read_r+0x1e>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	20000374 	.word	0x20000374

080064d8 <_close>:
 80064d8:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <_close+0xc>)
 80064da:	2258      	movs	r2, #88	; 0x58
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	f04f 30ff 	mov.w	r0, #4294967295
 80064e2:	4770      	bx	lr
 80064e4:	20000374 	.word	0x20000374

080064e8 <_fstat>:
 80064e8:	4b02      	ldr	r3, [pc, #8]	; (80064f4 <_fstat+0xc>)
 80064ea:	2258      	movs	r2, #88	; 0x58
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	f04f 30ff 	mov.w	r0, #4294967295
 80064f2:	4770      	bx	lr
 80064f4:	20000374 	.word	0x20000374

080064f8 <_getpid>:
 80064f8:	4b02      	ldr	r3, [pc, #8]	; (8006504 <_getpid+0xc>)
 80064fa:	2258      	movs	r2, #88	; 0x58
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006502:	4770      	bx	lr
 8006504:	20000374 	.word	0x20000374

08006508 <_isatty>:
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <_isatty+0xc>)
 800650a:	2258      	movs	r2, #88	; 0x58
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	2000      	movs	r0, #0
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000374 	.word	0x20000374

08006518 <_kill>:
 8006518:	4b02      	ldr	r3, [pc, #8]	; (8006524 <_kill+0xc>)
 800651a:	2258      	movs	r2, #88	; 0x58
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f04f 30ff 	mov.w	r0, #4294967295
 8006522:	4770      	bx	lr
 8006524:	20000374 	.word	0x20000374

08006528 <_lseek>:
 8006528:	4b02      	ldr	r3, [pc, #8]	; (8006534 <_lseek+0xc>)
 800652a:	2258      	movs	r2, #88	; 0x58
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	4770      	bx	lr
 8006534:	20000374 	.word	0x20000374

08006538 <_read>:
 8006538:	4b02      	ldr	r3, [pc, #8]	; (8006544 <_read+0xc>)
 800653a:	2258      	movs	r2, #88	; 0x58
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f04f 30ff 	mov.w	r0, #4294967295
 8006542:	4770      	bx	lr
 8006544:	20000374 	.word	0x20000374

08006548 <_sbrk>:
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <_sbrk+0x14>)
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	4602      	mov	r2, r0
 800654e:	b909      	cbnz	r1, 8006554 <_sbrk+0xc>
 8006550:	4903      	ldr	r1, [pc, #12]	; (8006560 <_sbrk+0x18>)
 8006552:	6019      	str	r1, [r3, #0]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	4402      	add	r2, r0
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	4770      	bx	lr
 800655c:	2000009c 	.word	0x2000009c
 8006560:	20000378 	.word	0x20000378

08006564 <_write>:
 8006564:	4b02      	ldr	r3, [pc, #8]	; (8006570 <_write+0xc>)
 8006566:	2258      	movs	r2, #88	; 0x58
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	f04f 30ff 	mov.w	r0, #4294967295
 800656e:	4770      	bx	lr
 8006570:	20000374 	.word	0x20000374

08006574 <_exit>:
 8006574:	e7fe      	b.n	8006574 <_exit>
	...

08006578 <_init>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr

08006584 <_fini>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr
