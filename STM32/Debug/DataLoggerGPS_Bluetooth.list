
DataLoggerGPS_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e24  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800301c  0800301c  0001301c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  2000000c  08003070  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000010c  08003070  0002010c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010a3c  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020f2  00000000  00000000  00030a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000720  00000000  00000000  00032b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000638  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00027dce  00000000  00000000  000338c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007fd6  00000000  00000000  0005b68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f23e0  00000000  00000000  00063664  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00155a44  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ac4  00000000  00000000  00155ac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003004 	.word	0x08003004

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003004 	.word	0x08003004

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f931 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f002 fbd4 	bl	8002d04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f94b 	bl	800081e <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f913 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <HAL_GetTick+0x14>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028

080005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e4:	f7ff ffee 	bl	80005c4 <HAL_GetTick>
 80005e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d005      	beq.n	8000602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_Delay+0x40>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000602:	bf00      	nop
 8000604:	f7ff ffde 	bl	80005c4 <HAL_GetTick>
 8000608:	4602      	mov	r2, r0
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1ad2      	subs	r2, r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	429a      	cmp	r2, r3
 8000612:	d3f7      	bcc.n	8000604 <HAL_Delay+0x28>
  {
  }
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000004 	.word	0x20000004

08000620 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000620:	b480      	push	{r7}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <NVIC_SetPriorityGrouping+0x40>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <NVIC_SetPriorityGrouping+0x44>)
 800064a:	4313      	orrs	r3, r2
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <NVIC_SetPriorityGrouping+0x40>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	05fa0000 	.word	0x05fa0000

08000668 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <NVIC_GetPriorityGrouping+0x18>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	0a1b      	lsrs	r3, r3, #8
 8000672:	f003 0307 	and.w	r3, r3, #7
}
 8000676:	4618      	mov	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800068e:	4909      	ldr	r1, [pc, #36]	; (80006b4 <NVIC_EnableIRQ+0x30>)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	095b      	lsrs	r3, r3, #5
 8000696:	79fa      	ldrb	r2, [r7, #7]
 8000698:	f002 021f 	and.w	r2, r2, #31
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	da0b      	bge.n	80006e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	490d      	ldr	r1, [pc, #52]	; (8000704 <NVIC_SetPriority+0x4c>)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	3b04      	subs	r3, #4
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	0112      	lsls	r2, r2, #4
 80006dc:	b2d2      	uxtb	r2, r2
 80006de:	440b      	add	r3, r1
 80006e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e2:	e009      	b.n	80006f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	4908      	ldr	r1, [pc, #32]	; (8000708 <NVIC_SetPriority+0x50>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00
 8000708:	e000e100 	.word	0xe000e100

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	2201      	movs	r2, #1
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	401a      	ands	r2, r3
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000752:	2101      	movs	r1, #1
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	1e59      	subs	r1, r3, #1
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	4313      	orrs	r3, r2
         );
}
 8000762:	4618      	mov	r0, r3
 8000764:	3724      	adds	r7, #36	; 0x24
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff2f 	bl	8000620 <NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff44 	bl	8000668 <NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff37 	bl	8000684 <NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffa2 	bl	8000770 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d106      	bne.n	8000854 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000852:	e005      	b.n	8000860 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f023 0304 	bic.w	r3, r3, #4
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b02      	cmp	r3, #2
 8000882:	d004      	beq.n	800088e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e00c      	b.n	80008a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2205      	movs	r2, #5
 8000892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	f022 0201 	bic.w	r2, r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	e175      	b.n	8000bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008d4:	2201      	movs	r2, #1
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f040 8164 	bne.w	8000bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0x4e>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d123      	bne.n	800094a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	08da      	lsrs	r2, r3, #3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3208      	adds	r2, #8
 800090a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	220f      	movs	r2, #15
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4013      	ands	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	691a      	ldr	r2, [r3, #16]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	08da      	lsrs	r2, r3, #3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	69b9      	ldr	r1, [r7, #24]
 8000946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0203 	and.w	r2, r3, #3
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d00b      	beq.n	800099e <HAL_GPIO_Init+0xea>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d007      	beq.n	800099e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000992:	2b11      	cmp	r3, #17
 8000994:	d003      	beq.n	800099e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2b12      	cmp	r3, #18
 800099c:	d130      	bne.n	8000a00 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4013      	ands	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d4:	2201      	movs	r2, #1
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	f003 0201 	and.w	r2, r3, #1
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f000 80be 	beq.w	8000bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4a65      	ldr	r2, [pc, #404]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000a40:	4b64      	ldr	r3, [pc, #400]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b62      	ldr	r3, [pc, #392]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a56:	4a60      	ldr	r2, [pc, #384]	; (8000bd8 <HAL_GPIO_Init+0x324>)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a57      	ldr	r2, [pc, #348]	; (8000bdc <HAL_GPIO_Init+0x328>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d037      	beq.n	8000af2 <HAL_GPIO_Init+0x23e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a56      	ldr	r2, [pc, #344]	; (8000be0 <HAL_GPIO_Init+0x32c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d031      	beq.n	8000aee <HAL_GPIO_Init+0x23a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a55      	ldr	r2, [pc, #340]	; (8000be4 <HAL_GPIO_Init+0x330>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d02b      	beq.n	8000aea <HAL_GPIO_Init+0x236>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a54      	ldr	r2, [pc, #336]	; (8000be8 <HAL_GPIO_Init+0x334>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d025      	beq.n	8000ae6 <HAL_GPIO_Init+0x232>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a53      	ldr	r2, [pc, #332]	; (8000bec <HAL_GPIO_Init+0x338>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d01f      	beq.n	8000ae2 <HAL_GPIO_Init+0x22e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a52      	ldr	r2, [pc, #328]	; (8000bf0 <HAL_GPIO_Init+0x33c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d019      	beq.n	8000ade <HAL_GPIO_Init+0x22a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a51      	ldr	r2, [pc, #324]	; (8000bf4 <HAL_GPIO_Init+0x340>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0x226>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a50      	ldr	r2, [pc, #320]	; (8000bf8 <HAL_GPIO_Init+0x344>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d00d      	beq.n	8000ad6 <HAL_GPIO_Init+0x222>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4f      	ldr	r2, [pc, #316]	; (8000bfc <HAL_GPIO_Init+0x348>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d007      	beq.n	8000ad2 <HAL_GPIO_Init+0x21e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <HAL_GPIO_Init+0x34c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_GPIO_Init+0x21a>
 8000aca:	2309      	movs	r3, #9
 8000acc:	e012      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ace:	230a      	movs	r3, #10
 8000ad0:	e010      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	e00e      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	e00c      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ada:	2306      	movs	r3, #6
 8000adc:	e00a      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ade:	2305      	movs	r3, #5
 8000ae0:	e008      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e004      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000af2:	2300      	movs	r3, #0
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	f002 0203 	and.w	r2, r2, #3
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4093      	lsls	r3, r2
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b04:	4934      	ldr	r1, [pc, #208]	; (8000bd8 <HAL_GPIO_Init+0x324>)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b12:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b36:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b3c:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b60:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	f67f ae86 	bls.w	80008d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3724      	adds	r7, #36	; 0x24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40021400 	.word	0x40021400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40021c00 	.word	0x40021c00
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	40022400 	.word	0x40022400
 8000c04:	40013c00 	.word	0x40013c00

08000c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	807b      	strh	r3, [r7, #2]
 8000c14:	4613      	mov	r3, r2
 8000c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c18:	787b      	ldrb	r3, [r7, #1]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c1e:	887a      	ldrh	r2, [r7, #2]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000c24:	e003      	b.n	8000c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	041a      	lsls	r2, r3, #16
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	619a      	str	r2, [r3, #24]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c6a:	f7ff fcab 	bl	80005c4 <HAL_GetTick>
 8000c6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c70:	e009      	b.n	8000c86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c72:	f7ff fca7 	bl	80005c4 <HAL_GetTick>
 8000c76:	4602      	mov	r2, r0
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c80:	d901      	bls.n	8000c86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e022      	b.n	8000ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c92:	d1ee      	bne.n	8000c72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c94:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca0:	f7ff fc90 	bl	80005c4 <HAL_GetTick>
 8000ca4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ca6:	e009      	b.n	8000cbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ca8:	f7ff fc8c 	bl	80005c4 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cb6:	d901      	bls.n	8000cbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e007      	b.n	8000ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000cc8:	d1ee      	bne.n	8000ca8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40007000 	.word	0x40007000

08000cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e25e      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8087 	beq.w	8000e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d00:	4b96      	ldr	r3, [pc, #600]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 030c 	and.w	r3, r3, #12
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d00c      	beq.n	8000d26 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d0c:	4b93      	ldr	r3, [pc, #588]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d112      	bne.n	8000d3e <HAL_RCC_OscConfig+0x62>
 8000d18:	4b90      	ldr	r3, [pc, #576]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d24:	d10b      	bne.n	8000d3e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d26:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d06c      	beq.n	8000e0c <HAL_RCC_OscConfig+0x130>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d168      	bne.n	8000e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e238      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d46:	d106      	bne.n	8000d56 <HAL_RCC_OscConfig+0x7a>
 8000d48:	4a84      	ldr	r2, [pc, #528]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d4a:	4b84      	ldr	r3, [pc, #528]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	e02e      	b.n	8000db4 <HAL_RCC_OscConfig+0xd8>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10c      	bne.n	8000d78 <HAL_RCC_OscConfig+0x9c>
 8000d5e:	4a7f      	ldr	r2, [pc, #508]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d60:	4b7e      	ldr	r3, [pc, #504]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4a7c      	ldr	r2, [pc, #496]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d6c:	4b7b      	ldr	r3, [pc, #492]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	e01d      	b.n	8000db4 <HAL_RCC_OscConfig+0xd8>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d80:	d10c      	bne.n	8000d9c <HAL_RCC_OscConfig+0xc0>
 8000d82:	4a76      	ldr	r2, [pc, #472]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d84:	4b75      	ldr	r3, [pc, #468]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	4a73      	ldr	r2, [pc, #460]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d90:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e00b      	b.n	8000db4 <HAL_RCC_OscConfig+0xd8>
 8000d9c:	4a6f      	ldr	r2, [pc, #444]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000d9e:	4b6f      	ldr	r3, [pc, #444]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4a6c      	ldr	r2, [pc, #432]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000daa:	4b6c      	ldr	r3, [pc, #432]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d013      	beq.n	8000de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fc02 	bl	80005c4 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc4:	f7ff fbfe 	bl	80005c4 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b64      	cmp	r3, #100	; 0x64
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e1ec      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	4b61      	ldr	r3, [pc, #388]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0xe8>
 8000de2:	e014      	b.n	8000e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de4:	f7ff fbee 	bl	80005c4 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dea:	e008      	b.n	8000dfe <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dec:	f7ff fbea 	bl	80005c4 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b64      	cmp	r3, #100	; 0x64
 8000df8:	d901      	bls.n	8000dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	e1d8      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x110>
 8000e0a:	e000      	b.n	8000e0e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d069      	beq.n	8000eee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e1a:	4b50      	ldr	r3, [pc, #320]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00b      	beq.n	8000e3e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e26:	4b4d      	ldr	r3, [pc, #308]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d11c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x190>
 8000e32:	4b4a      	ldr	r3, [pc, #296]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d116      	bne.n	8000e6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <HAL_RCC_OscConfig+0x17a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d001      	beq.n	8000e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e1ac      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e56:	4941      	ldr	r1, [pc, #260]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e58:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6a:	e040      	b.n	8000eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d023      	beq.n	8000ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e74:	4a39      	ldr	r2, [pc, #228]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e76:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e80:	f7ff fba0 	bl	80005c4 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e88:	f7ff fb9c 	bl	80005c4 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e18a      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f0      	beq.n	8000e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea6:	492d      	ldr	r1, [pc, #180]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	600b      	str	r3, [r1, #0]
 8000eba:	e018      	b.n	8000eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fb7c 	bl	80005c4 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fb78 	bl	80005c4 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e166      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d038      	beq.n	8000f6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d019      	beq.n	8000f36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f02:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fb59 	bl	80005c4 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f16:	f7ff fb55 	bl	80005c4 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e143      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x23a>
 8000f34:	e01a      	b.n	8000f6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_RCC_OscConfig+0x280>)
 8000f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f42:	f7ff fb3f 	bl	80005c4 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f4a:	f7ff fb3b 	bl	80005c4 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d903      	bls.n	8000f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e129      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
 8000f5c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f60:	4b95      	ldr	r3, [pc, #596]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8000f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1ee      	bne.n	8000f4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a4 	beq.w	80010c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7a:	4b8f      	ldr	r3, [pc, #572]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10d      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4a8c      	ldr	r2, [pc, #560]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8000f88:	4b8b      	ldr	r3, [pc, #556]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b89      	ldr	r3, [pc, #548]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fa2:	4b86      	ldr	r3, [pc, #536]	; (80011bc <HAL_RCC_OscConfig+0x4e0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d118      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000fae:	4a83      	ldr	r2, [pc, #524]	; (80011bc <HAL_RCC_OscConfig+0x4e0>)
 8000fb0:	4b82      	ldr	r3, [pc, #520]	; (80011bc <HAL_RCC_OscConfig+0x4e0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fb03 	bl	80005c4 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000fc2:	f7ff faff 	bl	80005c4 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b64      	cmp	r3, #100	; 0x64
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e0ed      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fd4:	4b79      	ldr	r3, [pc, #484]	; (80011bc <HAL_RCC_OscConfig+0x4e0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x31a>
 8000fe8:	4a73      	ldr	r2, [pc, #460]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8000fea:	4b73      	ldr	r3, [pc, #460]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8000fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ff4:	e02d      	b.n	8001052 <HAL_RCC_OscConfig+0x376>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x33c>
 8000ffe:	4a6e      	ldr	r2, [pc, #440]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001000:	4b6d      	ldr	r3, [pc, #436]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6713      	str	r3, [r2, #112]	; 0x70
 800100a:	4a6b      	ldr	r2, [pc, #428]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800100c:	4b6a      	ldr	r3, [pc, #424]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800100e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001010:	f023 0304 	bic.w	r3, r3, #4
 8001014:	6713      	str	r3, [r2, #112]	; 0x70
 8001016:	e01c      	b.n	8001052 <HAL_RCC_OscConfig+0x376>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d10c      	bne.n	800103a <HAL_RCC_OscConfig+0x35e>
 8001020:	4a65      	ldr	r2, [pc, #404]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001022:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6713      	str	r3, [r2, #112]	; 0x70
 800102c:	4a62      	ldr	r2, [pc, #392]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800102e:	4b62      	ldr	r3, [pc, #392]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6713      	str	r3, [r2, #112]	; 0x70
 8001038:	e00b      	b.n	8001052 <HAL_RCC_OscConfig+0x376>
 800103a:	4a5f      	ldr	r2, [pc, #380]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800103c:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800103e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6713      	str	r3, [r2, #112]	; 0x70
 8001046:	4a5c      	ldr	r2, [pc, #368]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001048:	4b5b      	ldr	r3, [pc, #364]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800104a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800104c:	f023 0304 	bic.w	r3, r3, #4
 8001050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d015      	beq.n	8001086 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105a:	f7ff fab3 	bl	80005c4 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff faaf 	bl	80005c4 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e09b      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800107a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0ee      	beq.n	8001062 <HAL_RCC_OscConfig+0x386>
 8001084:	e014      	b.n	80010b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001086:	f7ff fa9d 	bl	80005c4 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff fa99 	bl	80005c4 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f241 3288 	movw	r2, #5000	; 0x1388
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e085      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 80010a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ee      	bne.n	800108e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d105      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b6:	4a40      	ldr	r2, [pc, #256]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 80010b8:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d071      	beq.n	80011ae <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d069      	beq.n	80011aa <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d14b      	bne.n	8001176 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010de:	4a36      	ldr	r2, [pc, #216]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 80010e0:	4b35      	ldr	r3, [pc, #212]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ea:	f7ff fa6b 	bl	80005c4 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fa67 	bl	80005c4 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e055      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001110:	4929      	ldr	r1, [pc, #164]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69da      	ldr	r2, [r3, #28]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	019b      	lsls	r3, r3, #6
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	085b      	lsrs	r3, r3, #1
 800112a:	3b01      	subs	r3, #1
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	061b      	lsls	r3, r3, #24
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	071b      	lsls	r3, r3, #28
 800113e:	4313      	orrs	r3, r2
 8001140:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001142:	4a1d      	ldr	r2, [pc, #116]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800114c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114e:	f7ff fa39 	bl	80005c4 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001156:	f7ff fa35 	bl	80005c4 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e023      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x47a>
 8001174:	e01b      	b.n	80011ae <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fa1f 	bl	80005c4 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800118a:	f7ff fa1b 	bl	80005c4 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e009      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_RCC_OscConfig+0x4dc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f0      	bne.n	800118a <HAL_RCC_OscConfig+0x4ae>
 80011a8:	e001      	b.n	80011ae <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e000      	b.n	80011b0 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e0ce      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011d8:	4b69      	ldr	r3, [pc, #420]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 020f 	and.w	r2, r3, #15
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d210      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4966      	ldr	r1, [pc, #408]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	4b65      	ldr	r3, [pc, #404]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f023 020f 	bic.w	r2, r3, #15
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 020f 	and.w	r2, r3, #15
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0b6      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4b58      	ldr	r3, [pc, #352]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800122a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	4b52      	ldr	r3, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	494f      	ldr	r1, [pc, #316]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d040      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d115      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07d      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001282:	4b40      	ldr	r3, [pc, #256]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e071      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e069      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a2:	4938      	ldr	r1, [pc, #224]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f023 0203 	bic.w	r2, r3, #3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012b4:	f7ff f986 	bl	80005c4 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	e00a      	b.n	80012d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012bc:	f7ff f982 	bl	80005c4 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e051      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 020c 	and.w	r2, r3, #12
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d1eb      	bne.n	80012bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 020f 	and.w	r2, r3, #15
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d910      	bls.n	8001314 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f2:	4923      	ldr	r1, [pc, #140]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 020f 	bic.w	r2, r3, #15
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 020f 	and.w	r2, r3, #15
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e030      	b.n	8001376 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001320:	4918      	ldr	r1, [pc, #96]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800133e:	4911      	ldr	r1, [pc, #68]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001352:	f000 f81d 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 8001356:	4601      	mov	r1, r0
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1c8>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	fa21 f303 	lsr.w	r3, r1, r3
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_RCC_ClockConfig+0x1cc>)
 800136c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff f8f8 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00
 8001384:	40023800 	.word	0x40023800
 8001388:	0800303c 	.word	0x0800303c
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	b08f      	sub	sp, #60	; 0x3c
 8001396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139c:	2300      	movs	r3, #0
 800139e:	637b      	str	r3, [r7, #52]	; 0x34
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a8:	4b62      	ldr	r3, [pc, #392]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d007      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x34>
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d008      	beq.n	80013ca <HAL_RCC_GetSysClockFreq+0x3a>
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f040 80b2 	bne.w	8001522 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013be:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80013c2:	e0b1      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013c4:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80013c8:	e0ae      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ca:	4b5a      	ldr	r3, [pc, #360]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013d4:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d04e      	beq.n	800147e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e0:	4b54      	ldr	r3, [pc, #336]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	099b      	lsrs	r3, r3, #6
 80013e6:	f04f 0400 	mov.w	r4, #0
 80013ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	ea01 0103 	and.w	r1, r1, r3
 80013f6:	ea02 0204 	and.w	r2, r2, r4
 80013fa:	460b      	mov	r3, r1
 80013fc:	4614      	mov	r4, r2
 80013fe:	0160      	lsls	r0, r4, #5
 8001400:	6278      	str	r0, [r7, #36]	; 0x24
 8001402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001404:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001408:	6278      	str	r0, [r7, #36]	; 0x24
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	623b      	str	r3, [r7, #32]
 800140e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001412:	1a5b      	subs	r3, r3, r1
 8001414:	eb64 0402 	sbc.w	r4, r4, r2
 8001418:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800141c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001420:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001424:	ebb8 0803 	subs.w	r8, r8, r3
 8001428:	eb69 0904 	sbc.w	r9, r9, r4
 800142c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001444:	eb18 0801 	adds.w	r8, r8, r1
 8001448:	eb49 0902 	adc.w	r9, r9, r2
 800144c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001464:	4640      	mov	r0, r8
 8001466:	4649      	mov	r1, r9
 8001468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146a:	f04f 0400 	mov.w	r4, #0
 800146e:	461a      	mov	r2, r3
 8001470:	4623      	mov	r3, r4
 8001472:	f7fe fee1 	bl	8000238 <__aeabi_uldivmod>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
 800147c:	e043      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	099b      	lsrs	r3, r3, #6
 8001484:	f04f 0400 	mov.w	r4, #0
 8001488:	f240 11ff 	movw	r1, #511	; 0x1ff
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	ea01 0103 	and.w	r1, r1, r3
 8001494:	ea02 0204 	and.w	r2, r2, r4
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	0160      	lsls	r0, r4, #5
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	015b      	lsls	r3, r3, #5
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014b0:	1a5b      	subs	r3, r3, r1
 80014b2:	eb64 0402 	sbc.w	r4, r4, r2
 80014b6:	01a6      	lsls	r6, r4, #6
 80014b8:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80014bc:	019d      	lsls	r5, r3, #6
 80014be:	1aed      	subs	r5, r5, r3
 80014c0:	eb66 0604 	sbc.w	r6, r6, r4
 80014c4:	00f3      	lsls	r3, r6, #3
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	00eb      	lsls	r3, r5, #3
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	e897 0060 	ldmia.w	r7, {r5, r6}
 80014d8:	186d      	adds	r5, r5, r1
 80014da:	eb46 0602 	adc.w	r6, r6, r2
 80014de:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80014e2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80014e6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80014ea:	4655      	mov	r5, sl
 80014ec:	465e      	mov	r6, fp
 80014ee:	4628      	mov	r0, r5
 80014f0:	4631      	mov	r1, r6
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	f04f 0400 	mov.w	r4, #0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	f7fe fe9c 	bl	8000238 <__aeabi_uldivmod>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	0c1b      	lsrs	r3, r3, #16
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	3301      	adds	r3, #1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001520:	e002      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800152a:	4618      	mov	r0, r3
 800152c:	373c      	adds	r7, #60	; 0x3c
 800152e:	46bd      	mov	sp, r7
 8001530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	00f42400 	.word	0x00f42400
 800153c:	007a1200 	.word	0x007a1200

08001540 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_GetHCLKFreq+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800155c:	f7ff fff0 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001560:	4601      	mov	r1, r0
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_RCC_GetPCLK1Freq+0x24>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	0800304c 	.word	0x0800304c

08001580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001584:	f7ff ffdc 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001588:	4601      	mov	r1, r0
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	0b5b      	lsrs	r3, r3, #13
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	0800304c 	.word	0x0800304c

080015a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d012      	beq.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80015d0:	4a69      	ldr	r2, [pc, #420]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015d2:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015da:	6093      	str	r3, [r2, #8]
 80015dc:	4966      	ldr	r1, [pc, #408]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015de:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d017      	beq.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001602:	495d      	ldr	r1, [pc, #372]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001604:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800160a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	4313      	orrs	r3, r2
 8001614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001620:	d101      	bne.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001622:	2301      	movs	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d017      	beq.n	800166e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800163e:	494e      	ldr	r1, [pc, #312]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001646:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4313      	orrs	r3, r2
 8001650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165c:	d101      	bne.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800167a:	2301      	movs	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 808b 	beq.w	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016a4:	4a35      	ldr	r2, [pc, #212]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016b0:	f7fe ff88 	bl	80005c4 <HAL_GetTick>
 80016b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7fe ff84 	bl	80005c4 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e38d      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80016ca:	4b2c      	ldr	r3, [pc, #176]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016d6:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d035      	beq.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d02e      	beq.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800170a:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001714:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001716:	4a18      	ldr	r2, [pc, #96]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d014      	beq.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7fe ff4c 	bl	80005c4 <HAL_GetTick>
 800172c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7fe ff48 	bl	80005c4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e34f      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ee      	beq.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800175a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800175e:	d111      	bne.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001770:	400b      	ands	r3, r1
 8001772:	4313      	orrs	r3, r2
 8001774:	6083      	str	r3, [r0, #8]
 8001776:	e00b      	b.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000
 8001780:	0ffffcff 	.word	0x0ffffcff
 8001784:	4ab2      	ldr	r2, [pc, #712]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001786:	4bb2      	ldr	r3, [pc, #712]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800178e:	6093      	str	r3, [r2, #8]
 8001790:	49af      	ldr	r1, [pc, #700]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001792:	4baf      	ldr	r3, [pc, #700]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179e:	4313      	orrs	r3, r2
 80017a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d010      	beq.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80017ae:	4aa8      	ldr	r2, [pc, #672]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80017b0:	4ba7      	ldr	r3, [pc, #668]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80017b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017be:	49a4      	ldr	r1, [pc, #656]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80017c0:	4ba3      	ldr	r3, [pc, #652]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80017c2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ca:	4313      	orrs	r3, r2
 80017cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00a      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017dc:	499c      	ldr	r1, [pc, #624]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80017de:	4b9c      	ldr	r3, [pc, #624]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80017e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80017ec:	4313      	orrs	r3, r2
 80017ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00a      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017fe:	4994      	ldr	r1, [pc, #592]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001800:	4b93      	ldr	r3, [pc, #588]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800180e:	4313      	orrs	r3, r2
 8001810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00a      	beq.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001820:	498b      	ldr	r1, [pc, #556]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001822:	4b8b      	ldr	r3, [pc, #556]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001830:	4313      	orrs	r3, r2
 8001832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00a      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001842:	4983      	ldr	r1, [pc, #524]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001844:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	4313      	orrs	r3, r2
 8001854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00a      	beq.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001864:	497a      	ldr	r1, [pc, #488]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	f023 0203 	bic.w	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	4313      	orrs	r3, r2
 8001876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001886:	4972      	ldr	r1, [pc, #456]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001888:	4b71      	ldr	r3, [pc, #452]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	f023 020c 	bic.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001896:	4313      	orrs	r3, r2
 8001898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00a      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80018a8:	4969      	ldr	r1, [pc, #420]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80018aa:	4b69      	ldr	r3, [pc, #420]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	4313      	orrs	r3, r2
 80018ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00a      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80018ca:	4961      	ldr	r1, [pc, #388]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80018cc:	4b60      	ldr	r3, [pc, #384]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018da:	4313      	orrs	r3, r2
 80018dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00a      	beq.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80018ec:	4958      	ldr	r1, [pc, #352]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80018ee:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fc:	4313      	orrs	r3, r2
 80018fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00a      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800190e:	4950      	ldr	r1, [pc, #320]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4313      	orrs	r3, r2
 8001920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00a      	beq.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001930:	4947      	ldr	r1, [pc, #284]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	4313      	orrs	r3, r2
 8001942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001952:	493f      	ldr	r1, [pc, #252]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001954:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	4313      	orrs	r3, r2
 8001964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00a      	beq.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001974:	4936      	ldr	r1, [pc, #216]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001984:	4313      	orrs	r3, r2
 8001986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d011      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001996:	492e      	ldr	r1, [pc, #184]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001998:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80019b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019b4:	d101      	bne.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019d6:	491e      	ldr	r1, [pc, #120]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80019f8:	4915      	ldr	r1, [pc, #84]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a42:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a48:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	e001      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001a6a:	4981      	ldr	r1, [pc, #516]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a6c:	4b80      	ldr	r3, [pc, #512]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d005      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a90:	f040 80d6 	bne.w	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x698>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a94:	4a76      	ldr	r2, [pc, #472]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a96:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa0:	f7fe fd90 	bl	80005c4 <HAL_GetTick>
 8001aa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x512>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001aa8:	f7fe fd8c 	bl	80005c4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x512>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e195      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001aba:	4b6d      	ldr	r3, [pc, #436]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x500>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d021      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d11d      	bne.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ada:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ae8:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aee:	0e1b      	lsrs	r3, r3, #24
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001af6:	495e      	ldr	r1, [pc, #376]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	019a      	lsls	r2, r3, #6
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	071b      	lsls	r3, r3, #28
 8001b10:	4313      	orrs	r3, r2
 8001b12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2a:	d00a      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02e      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b40:	d129      	bne.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b50:	4b47      	ldr	r3, [pc, #284]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b56:	0f1b      	lsrs	r3, r3, #28
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001b5e:	4944      	ldr	r1, [pc, #272]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	019a      	lsls	r2, r3, #6
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	061b      	lsls	r3, r3, #24
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	071b      	lsls	r3, r3, #28
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b7e:	493c      	ldr	r1, [pc, #240]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b86:	f023 021f 	bic.w	r2, r3, #31
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	4313      	orrs	r3, r2
 8001b92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01d      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ba2:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ba8:	0e1b      	lsrs	r3, r3, #24
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bb6:	0f1b      	lsrs	r3, r3, #28
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001bbe:	492c      	ldr	r1, [pc, #176]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	019a      	lsls	r2, r3, #6
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	061b      	lsls	r3, r3, #24
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	071b      	lsls	r3, r3, #28
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d011      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bea:	4921      	ldr	r1, [pc, #132]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	019a      	lsls	r2, r3, #6
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	061b      	lsls	r3, r3, #24
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	071b      	lsls	r3, r3, #28
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c1a:	f7fe fcd3 	bl	80005c4 <HAL_GetTick>
 8001c1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c22:	f7fe fccf 	bl	80005c4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	; 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0d8      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	f040 80ce 	bne.w	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001c48:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c54:	f7fe fcb6 	bl	80005c4 <HAL_GetTick>
 8001c58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c5c:	f7fe fcb2 	bl	80005c4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d904      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0bb      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001c74:	4b5e      	ldr	r3, [pc, #376]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c80:	d0ec      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x6b4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d02e      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d12a      	bne.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001caa:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbe:	0f1b      	lsrs	r3, r3, #28
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001cc6:	494a      	ldr	r1, [pc, #296]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	019a      	lsls	r2, r3, #6
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	071b      	lsls	r3, r3, #28
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ce6:	4942      	ldr	r1, [pc, #264]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d022      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d14:	d11d      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d16:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	0e1b      	lsrs	r3, r3, #24
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001d24:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	0f1b      	lsrs	r3, r3, #28
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001d32:	492f      	ldr	r1, [pc, #188]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	019a      	lsls	r2, r3, #6
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	041b      	lsls	r3, r3, #16
 8001d40:	431a      	orrs	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	431a      	orrs	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	071b      	lsls	r3, r3, #28
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d028      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d5e:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d64:	0e1b      	lsrs	r3, r3, #24
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001d6c:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001d7a:	491d      	ldr	r1, [pc, #116]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	019a      	lsls	r2, r3, #6
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	061b      	lsls	r3, r3, #24
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	071b      	lsls	r3, r3, #28
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d9a:	4915      	ldr	r1, [pc, #84]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001db0:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dbc:	f7fe fc02 	bl	80005c4 <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001dc4:	f7fe fbfe 	bl	80005c4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e007      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de2:	d1ef      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e043      	b.n	8001e8e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f001 f83c 	bl	8002e98 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2224      	movs	r2, #36	; 0x24
 8001e24:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 faa9 	bl	8002390 <UART_SetConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e022      	b.n	8001e8e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fd0b 	bl	800286c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	6852      	ldr	r2, [r2, #4]
 8001e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	6892      	ldr	r2, [r2, #8]
 8001e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e74:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	f042 0201 	orr.w	r2, r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fd92 	bl	80029b0 <UART_CheckIdleState>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_UART_IRQHandler>:
  * @brief This function handles UART interrupt request.
  * @param huart uart handle
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_UART_IRQHandler+0x4a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x4a>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x4a>
    {
      UART_Receive_IT(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f9ce 	bl	800227c <UART_Receive_IT>
      return;
 8001ee0:	e0da      	b.n	8002098 <HAL_UART_IRQHandler+0x200>
    }
  }

  /* If some errors occur */
  if(   (errorflags != RESET)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80b9 	beq.w	800205c <HAL_UART_IRQHandler+0x1c4>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80ae 	beq.w	800205c <HAL_UART_IRQHandler+0x1c4>
  {

    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00e      	beq.n	8001f28 <HAL_UART_IRQHandler+0x90>
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00e      	beq.n	8001f50 <HAL_UART_IRQHandler+0xb8>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f48:	f043 0204 	orr.w	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <HAL_UART_IRQHandler+0xe0>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f70:	f043 0202 	orr.w	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d013      	beq.n	8001faa <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d104      	bne.n	8001f96 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa2:	f043 0208 	orr.w	r2, r3, #8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d071      	beq.n	8002096 <HAL_UART_IRQHandler+0x1fe>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_UART_IRQHandler+0x134>
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_UART_IRQHandler+0x134>
      {
        UART_Receive_IT(huart);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f958 	bl	800227c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <HAL_UART_IRQHandler+0x14e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d031      	beq.n	800204a <HAL_UART_IRQHandler+0x1b2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f9b3 	bl	8002352 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d023      	beq.n	8002042 <HAL_UART_IRQHandler+0x1aa>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	6892      	ldr	r2, [r2, #8]
 8002004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002008:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800200e:	2b00      	cmp	r3, #0
 8002010:	d013      	beq.n	800203a <HAL_UART_IRQHandler+0x1a2>
          {
            /* Set the UART DMA Abort callback :
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <HAL_UART_IRQHandler+0x208>)
 8002018:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fc26 	bl	8000870 <HAL_DMA_Abort_IT>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_UART_IRQHandler+0x1c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800202e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002034:	4610      	mov	r0, r2
 8002036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002038:	e00e      	b.n	8002058 <HAL_UART_IRQHandler+0x1c0>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8a6 	bl	800218c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	e00a      	b.n	8002058 <HAL_UART_IRQHandler+0x1c0>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8a2 	bl	800218c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002048:	e006      	b.n	8002058 <HAL_UART_IRQHandler+0x1c0>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f89e 	bl	800218c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8002056:	e01e      	b.n	8002096 <HAL_UART_IRQHandler+0x1fe>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002058:	bf00      	nop
    return;
 800205a:	e01c      	b.n	8002096 <HAL_UART_IRQHandler+0x1fe>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_UART_IRQHandler+0x1e0>
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_UART_IRQHandler+0x1e0>
  {
    UART_Transmit_IT(huart);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f895 	bl	80021a0 <UART_Transmit_IT>
    return;
 8002076:	e00f      	b.n	8002098 <HAL_UART_IRQHandler+0x200>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_UART_IRQHandler+0x200>
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_UART_IRQHandler+0x200>
  {
    UART_EndTransmit_IT(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8dd 	bl	800224c <UART_EndTransmit_IT>
    return;
 8002092:	bf00      	nop
 8002094:	e000      	b.n	8002098 <HAL_UART_IRQHandler+0x200>
    return;
 8002096:	bf00      	nop
  }

}
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08002139 	.word	0x08002139

080020a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b4:	e02c      	b.n	8002110 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d028      	beq.n	8002110 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80020c4:	f7fe fa7e 	bl	80005c4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d31d      	bcc.n	8002110 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	6892      	ldr	r2, [r2, #8]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e00f      	b.n	8002130 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	401a      	ands	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	429a      	cmp	r2, r3
 800212c:	d0c3      	beq.n	80020b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f818 	bl	800218c <HAL_UART_ErrorCallback>
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart uart handle
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b21      	cmp	r3, #33	; 0x21
 80021b2:	d144      	bne.n	800223e <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d111      	bne.n	80021e4 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ce:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021de:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e02d      	b.n	8002240 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ec:	d113      	bne.n	8002216 <UART_Transmit_IT+0x76>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10f      	bne.n	8002216 <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	1c9a      	adds	r2, r3, #2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	64da      	str	r2, [r3, #76]	; 0x4c
 8002214:	e008      	b.n	8002228 <UART_Transmit_IT+0x88>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	1c58      	adds	r0, r3, #1
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	64c8      	str	r0, [r1, #76]	; 0x4c
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	6293      	str	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002262:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff79 	bl	8002164 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800228a:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b22      	cmp	r3, #34	; 0x22
 8002296:	d14f      	bne.n	8002338 <UART_Receive_IT+0xbc>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a0:	d115      	bne.n	80022ce <UART_Receive_IT+0x52>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d111      	bne.n	80022ce <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	89fb      	ldrh	r3, [r7, #14]
 80022ba:	4013      	ands	r3, r2
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	1c9a      	adds	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
 80022cc:	e00d      	b.n	80022ea <UART_Receive_IT+0x6e>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	1c59      	adds	r1, r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6551      	str	r1, [r2, #84]	; 0x54
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022de:	b2d1      	uxtb	r1, r2
 80022e0:	89fa      	ldrh	r2, [r7, #14]
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	400a      	ands	r2, r1
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d118      	bne.n	8002334 <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002310:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	6892      	ldr	r2, [r2, #8]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff24 	bl	8002178 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e00a      	b.n	800234a <UART_Receive_IT+0xce>
    }

    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e008      	b.n	800234a <UART_Receive_IT+0xce>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	6992      	ldr	r2, [r2, #24]
 8002342:	f042 0208 	orr.w	r2, r2, #8
 8002346:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002368:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	6892      	ldr	r2, [r2, #8]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800239c:	2310      	movs	r3, #16
 800239e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	4baa      	ldr	r3, [pc, #680]	; (8002678 <UART_SetConfig+0x2e8>)
 80023d0:	400b      	ands	r3, r1
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	6852      	ldr	r2, [r2, #4]
 80023e2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68d2      	ldr	r2, [r2, #12]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	430a      	orrs	r2, r1
 800240c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a9a      	ldr	r2, [pc, #616]	; (800267c <UART_SetConfig+0x2ec>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d11f      	bne.n	8002458 <UART_SetConfig+0xc8>
 8002418:	4b99      	ldr	r3, [pc, #612]	; (8002680 <UART_SetConfig+0x2f0>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b03      	cmp	r3, #3
 8002424:	f200 813e 	bhi.w	80026a4 <UART_SetConfig+0x314>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <UART_SetConfig+0xa0>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	08002441 	.word	0x08002441
 8002434:	0800244d 	.word	0x0800244d
 8002438:	08002447 	.word	0x08002447
 800243c:	08002453 	.word	0x08002453
 8002440:	2301      	movs	r3, #1
 8002442:	75fb      	strb	r3, [r7, #23]
 8002444:	e12e      	b.n	80026a4 <UART_SetConfig+0x314>
 8002446:	2302      	movs	r3, #2
 8002448:	75fb      	strb	r3, [r7, #23]
 800244a:	e12b      	b.n	80026a4 <UART_SetConfig+0x314>
 800244c:	2304      	movs	r3, #4
 800244e:	75fb      	strb	r3, [r7, #23]
 8002450:	e128      	b.n	80026a4 <UART_SetConfig+0x314>
 8002452:	2308      	movs	r3, #8
 8002454:	75fb      	strb	r3, [r7, #23]
 8002456:	e125      	b.n	80026a4 <UART_SetConfig+0x314>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a89      	ldr	r2, [pc, #548]	; (8002684 <UART_SetConfig+0x2f4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d130      	bne.n	80024c4 <UART_SetConfig+0x134>
 8002462:	4b87      	ldr	r3, [pc, #540]	; (8002680 <UART_SetConfig+0x2f0>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b0c      	cmp	r3, #12
 800246e:	f200 8119 	bhi.w	80026a4 <UART_SetConfig+0x314>
 8002472:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <UART_SetConfig+0xe8>)
 8002474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002478:	080024ad 	.word	0x080024ad
 800247c:	080026a5 	.word	0x080026a5
 8002480:	080026a5 	.word	0x080026a5
 8002484:	080026a5 	.word	0x080026a5
 8002488:	080024b9 	.word	0x080024b9
 800248c:	080026a5 	.word	0x080026a5
 8002490:	080026a5 	.word	0x080026a5
 8002494:	080026a5 	.word	0x080026a5
 8002498:	080024b3 	.word	0x080024b3
 800249c:	080026a5 	.word	0x080026a5
 80024a0:	080026a5 	.word	0x080026a5
 80024a4:	080026a5 	.word	0x080026a5
 80024a8:	080024bf 	.word	0x080024bf
 80024ac:	2300      	movs	r3, #0
 80024ae:	75fb      	strb	r3, [r7, #23]
 80024b0:	e0f8      	b.n	80026a4 <UART_SetConfig+0x314>
 80024b2:	2302      	movs	r3, #2
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	e0f5      	b.n	80026a4 <UART_SetConfig+0x314>
 80024b8:	2304      	movs	r3, #4
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	e0f2      	b.n	80026a4 <UART_SetConfig+0x314>
 80024be:	2308      	movs	r3, #8
 80024c0:	75fb      	strb	r3, [r7, #23]
 80024c2:	e0ef      	b.n	80026a4 <UART_SetConfig+0x314>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a6f      	ldr	r2, [pc, #444]	; (8002688 <UART_SetConfig+0x2f8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11c      	bne.n	8002508 <UART_SetConfig+0x178>
 80024ce:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <UART_SetConfig+0x2f0>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d00f      	beq.n	80024fc <UART_SetConfig+0x16c>
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d802      	bhi.n	80024e6 <UART_SetConfig+0x156>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <UART_SetConfig+0x160>
 80024e4:	e0de      	b.n	80026a4 <UART_SetConfig+0x314>
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d005      	beq.n	80024f6 <UART_SetConfig+0x166>
 80024ea:	2b30      	cmp	r3, #48	; 0x30
 80024ec:	d009      	beq.n	8002502 <UART_SetConfig+0x172>
 80024ee:	e0d9      	b.n	80026a4 <UART_SetConfig+0x314>
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]
 80024f4:	e0d6      	b.n	80026a4 <UART_SetConfig+0x314>
 80024f6:	2302      	movs	r3, #2
 80024f8:	75fb      	strb	r3, [r7, #23]
 80024fa:	e0d3      	b.n	80026a4 <UART_SetConfig+0x314>
 80024fc:	2304      	movs	r3, #4
 80024fe:	75fb      	strb	r3, [r7, #23]
 8002500:	e0d0      	b.n	80026a4 <UART_SetConfig+0x314>
 8002502:	2308      	movs	r3, #8
 8002504:	75fb      	strb	r3, [r7, #23]
 8002506:	e0cd      	b.n	80026a4 <UART_SetConfig+0x314>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a5f      	ldr	r2, [pc, #380]	; (800268c <UART_SetConfig+0x2fc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d11c      	bne.n	800254c <UART_SetConfig+0x1bc>
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <UART_SetConfig+0x2f0>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d00f      	beq.n	8002540 <UART_SetConfig+0x1b0>
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d802      	bhi.n	800252a <UART_SetConfig+0x19a>
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <UART_SetConfig+0x1a4>
 8002528:	e0bc      	b.n	80026a4 <UART_SetConfig+0x314>
 800252a:	2b80      	cmp	r3, #128	; 0x80
 800252c:	d005      	beq.n	800253a <UART_SetConfig+0x1aa>
 800252e:	2bc0      	cmp	r3, #192	; 0xc0
 8002530:	d009      	beq.n	8002546 <UART_SetConfig+0x1b6>
 8002532:	e0b7      	b.n	80026a4 <UART_SetConfig+0x314>
 8002534:	2300      	movs	r3, #0
 8002536:	75fb      	strb	r3, [r7, #23]
 8002538:	e0b4      	b.n	80026a4 <UART_SetConfig+0x314>
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
 800253e:	e0b1      	b.n	80026a4 <UART_SetConfig+0x314>
 8002540:	2304      	movs	r3, #4
 8002542:	75fb      	strb	r3, [r7, #23]
 8002544:	e0ae      	b.n	80026a4 <UART_SetConfig+0x314>
 8002546:	2308      	movs	r3, #8
 8002548:	75fb      	strb	r3, [r7, #23]
 800254a:	e0ab      	b.n	80026a4 <UART_SetConfig+0x314>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a4f      	ldr	r2, [pc, #316]	; (8002690 <UART_SetConfig+0x300>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d120      	bne.n	8002598 <UART_SetConfig+0x208>
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <UART_SetConfig+0x2f0>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002564:	d012      	beq.n	800258c <UART_SetConfig+0x1fc>
 8002566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800256a:	d802      	bhi.n	8002572 <UART_SetConfig+0x1e2>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <UART_SetConfig+0x1f0>
 8002570:	e098      	b.n	80026a4 <UART_SetConfig+0x314>
 8002572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002576:	d006      	beq.n	8002586 <UART_SetConfig+0x1f6>
 8002578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800257c:	d009      	beq.n	8002592 <UART_SetConfig+0x202>
 800257e:	e091      	b.n	80026a4 <UART_SetConfig+0x314>
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]
 8002584:	e08e      	b.n	80026a4 <UART_SetConfig+0x314>
 8002586:	2302      	movs	r3, #2
 8002588:	75fb      	strb	r3, [r7, #23]
 800258a:	e08b      	b.n	80026a4 <UART_SetConfig+0x314>
 800258c:	2304      	movs	r3, #4
 800258e:	75fb      	strb	r3, [r7, #23]
 8002590:	e088      	b.n	80026a4 <UART_SetConfig+0x314>
 8002592:	2308      	movs	r3, #8
 8002594:	75fb      	strb	r3, [r7, #23]
 8002596:	e085      	b.n	80026a4 <UART_SetConfig+0x314>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3d      	ldr	r2, [pc, #244]	; (8002694 <UART_SetConfig+0x304>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d120      	bne.n	80025e4 <UART_SetConfig+0x254>
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <UART_SetConfig+0x2f0>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d012      	beq.n	80025d8 <UART_SetConfig+0x248>
 80025b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b6:	d802      	bhi.n	80025be <UART_SetConfig+0x22e>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <UART_SetConfig+0x23c>
 80025bc:	e072      	b.n	80026a4 <UART_SetConfig+0x314>
 80025be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c2:	d006      	beq.n	80025d2 <UART_SetConfig+0x242>
 80025c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025c8:	d009      	beq.n	80025de <UART_SetConfig+0x24e>
 80025ca:	e06b      	b.n	80026a4 <UART_SetConfig+0x314>
 80025cc:	2301      	movs	r3, #1
 80025ce:	75fb      	strb	r3, [r7, #23]
 80025d0:	e068      	b.n	80026a4 <UART_SetConfig+0x314>
 80025d2:	2302      	movs	r3, #2
 80025d4:	75fb      	strb	r3, [r7, #23]
 80025d6:	e065      	b.n	80026a4 <UART_SetConfig+0x314>
 80025d8:	2304      	movs	r3, #4
 80025da:	75fb      	strb	r3, [r7, #23]
 80025dc:	e062      	b.n	80026a4 <UART_SetConfig+0x314>
 80025de:	2308      	movs	r3, #8
 80025e0:	75fb      	strb	r3, [r7, #23]
 80025e2:	e05f      	b.n	80026a4 <UART_SetConfig+0x314>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <UART_SetConfig+0x308>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d120      	bne.n	8002630 <UART_SetConfig+0x2a0>
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <UART_SetConfig+0x2f0>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80025f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fc:	d012      	beq.n	8002624 <UART_SetConfig+0x294>
 80025fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002602:	d802      	bhi.n	800260a <UART_SetConfig+0x27a>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <UART_SetConfig+0x288>
 8002608:	e04c      	b.n	80026a4 <UART_SetConfig+0x314>
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260e:	d006      	beq.n	800261e <UART_SetConfig+0x28e>
 8002610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002614:	d009      	beq.n	800262a <UART_SetConfig+0x29a>
 8002616:	e045      	b.n	80026a4 <UART_SetConfig+0x314>
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	e042      	b.n	80026a4 <UART_SetConfig+0x314>
 800261e:	2302      	movs	r3, #2
 8002620:	75fb      	strb	r3, [r7, #23]
 8002622:	e03f      	b.n	80026a4 <UART_SetConfig+0x314>
 8002624:	2304      	movs	r3, #4
 8002626:	75fb      	strb	r3, [r7, #23]
 8002628:	e03c      	b.n	80026a4 <UART_SetConfig+0x314>
 800262a:	2308      	movs	r3, #8
 800262c:	75fb      	strb	r3, [r7, #23]
 800262e:	e039      	b.n	80026a4 <UART_SetConfig+0x314>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <UART_SetConfig+0x30c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d135      	bne.n	80026a6 <UART_SetConfig+0x316>
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <UART_SetConfig+0x2f0>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002648:	d012      	beq.n	8002670 <UART_SetConfig+0x2e0>
 800264a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800264e:	d802      	bhi.n	8002656 <UART_SetConfig+0x2c6>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <UART_SetConfig+0x2d4>
 8002654:	e026      	b.n	80026a4 <UART_SetConfig+0x314>
 8002656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265a:	d006      	beq.n	800266a <UART_SetConfig+0x2da>
 800265c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002660:	d01e      	beq.n	80026a0 <UART_SetConfig+0x310>
 8002662:	e01f      	b.n	80026a4 <UART_SetConfig+0x314>
 8002664:	2300      	movs	r3, #0
 8002666:	75fb      	strb	r3, [r7, #23]
 8002668:	e01c      	b.n	80026a4 <UART_SetConfig+0x314>
 800266a:	2302      	movs	r3, #2
 800266c:	75fb      	strb	r3, [r7, #23]
 800266e:	e019      	b.n	80026a4 <UART_SetConfig+0x314>
 8002670:	2304      	movs	r3, #4
 8002672:	75fb      	strb	r3, [r7, #23]
 8002674:	e016      	b.n	80026a4 <UART_SetConfig+0x314>
 8002676:	bf00      	nop
 8002678:	efff69f3 	.word	0xefff69f3
 800267c:	40011000 	.word	0x40011000
 8002680:	40023800 	.word	0x40023800
 8002684:	40004400 	.word	0x40004400
 8002688:	40004800 	.word	0x40004800
 800268c:	40004c00 	.word	0x40004c00
 8002690:	40005000 	.word	0x40005000
 8002694:	40011400 	.word	0x40011400
 8002698:	40007800 	.word	0x40007800
 800269c:	40007c00 	.word	0x40007c00
 80026a0:	2308      	movs	r3, #8
 80026a2:	75fb      	strb	r3, [r7, #23]
 80026a4:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ae:	d16c      	bne.n	800278a <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d854      	bhi.n	8002760 <UART_SetConfig+0x3d0>
 80026b6:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <UART_SetConfig+0x32c>)
 80026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026bc:	080026e1 	.word	0x080026e1
 80026c0:	080026fd 	.word	0x080026fd
 80026c4:	08002719 	.word	0x08002719
 80026c8:	08002761 	.word	0x08002761
 80026cc:	0800272f 	.word	0x0800272f
 80026d0:	08002761 	.word	0x08002761
 80026d4:	08002761 	.word	0x08002761
 80026d8:	08002761 	.word	0x08002761
 80026dc:	0800274b 	.word	0x0800274b
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026e0:	f7fe ff3a 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 80026e4:	4603      	mov	r3, r0
 80026e6:	005a      	lsls	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	441a      	add	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	82bb      	strh	r3, [r7, #20]
      break;
 80026fa:	e034      	b.n	8002766 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026fc:	f7fe ff40 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 8002700:	4603      	mov	r3, r0
 8002702:	005a      	lsls	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	441a      	add	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	82bb      	strh	r3, [r7, #20]
      break;
 8002716:	e026      	b.n	8002766 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	085a      	lsrs	r2, r3, #1
 800271e:	4b51      	ldr	r3, [pc, #324]	; (8002864 <UART_SetConfig+0x4d4>)
 8002720:	4413      	add	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6852      	ldr	r2, [r2, #4]
 8002726:	fbb3 f3f2 	udiv	r3, r3, r2
 800272a:	82bb      	strh	r3, [r7, #20]
      break;
 800272c:	e01b      	b.n	8002766 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800272e:	f7fe fe2f 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 8002732:	4603      	mov	r3, r0
 8002734:	005a      	lsls	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	441a      	add	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	82bb      	strh	r3, [r7, #20]
      break;
 8002748:	e00d      	b.n	8002766 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	82bb      	strh	r3, [r7, #20]
      break;
 800275e:	e002      	b.n	8002766 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	74fb      	strb	r3, [r7, #19]
      break;
 8002764:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002766:	8abb      	ldrh	r3, [r7, #20]
 8002768:	f023 030f 	bic.w	r3, r3, #15
 800276c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800276e:	8abb      	ldrh	r3, [r7, #20]
 8002770:	105b      	asrs	r3, r3, #1
 8002772:	b29b      	uxth	r3, r3
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	b29a      	uxth	r2, r3
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	4313      	orrs	r3, r2
 800277e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	897a      	ldrh	r2, [r7, #10]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	e067      	b.n	800285a <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d861      	bhi.n	8002854 <UART_SetConfig+0x4c4>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <UART_SetConfig+0x408>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027bd 	.word	0x080027bd
 800279c:	080027dd 	.word	0x080027dd
 80027a0:	080027fd 	.word	0x080027fd
 80027a4:	08002855 	.word	0x08002855
 80027a8:	08002819 	.word	0x08002819
 80027ac:	08002855 	.word	0x08002855
 80027b0:	08002855 	.word	0x08002855
 80027b4:	08002855 	.word	0x08002855
 80027b8:	08002839 	.word	0x08002839
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681c      	ldr	r4, [r3, #0]
 80027c0:	f7fe feca 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	441a      	add	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	60e3      	str	r3, [r4, #12]
      break;
 80027da:	e03e      	b.n	800285a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681c      	ldr	r4, [r3, #0]
 80027e0:	f7fe fece 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	441a      	add	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	60e3      	str	r3, [r4, #12]
      break;
 80027fa:	e02e      	b.n	800285a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0859      	lsrs	r1, r3, #1
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <UART_SetConfig+0x4d8>)
 8002808:	440b      	add	r3, r1
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	6849      	ldr	r1, [r1, #4]
 800280e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002812:	b29b      	uxth	r3, r3
 8002814:	60d3      	str	r3, [r2, #12]
      break;
 8002816:	e020      	b.n	800285a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681c      	ldr	r4, [r3, #0]
 800281c:	f7fe fdb8 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	441a      	add	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	b29b      	uxth	r3, r3
 8002834:	60e3      	str	r3, [r4, #12]
      break;
 8002836:	e010      	b.n	800285a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6852      	ldr	r2, [r2, #4]
 8002840:	0852      	lsrs	r2, r2, #1
 8002842:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6852      	ldr	r2, [r2, #4]
 800284a:	fbb1 f2f2 	udiv	r2, r1, r2
 800284e:	b292      	uxth	r2, r2
 8002850:	60da      	str	r2, [r3, #12]
      break;
 8002852:	e002      	b.n	800285a <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	74fb      	strb	r3, [r7, #19]
      break;
 8002858:	bf00      	nop
    }
  }

  return ret;
 800285a:	7cfb      	ldrb	r3, [r7, #19]

}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	01e84800 	.word	0x01e84800
 8002868:	00f42400 	.word	0x00f42400

0800286c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	6852      	ldr	r2, [r2, #4]
 800288a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002892:	430a      	orrs	r2, r1
 8002894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	6852      	ldr	r2, [r2, #4]
 80028ac:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028b4:	430a      	orrs	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	6852      	ldr	r2, [r2, #4]
 80028ce:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	6852      	ldr	r2, [r2, #4]
 80028f0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	6892      	ldr	r2, [r2, #8]
 8002912:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	6892      	ldr	r2, [r2, #8]
 8002934:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800293c:	430a      	orrs	r2, r1
 800293e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01a      	beq.n	8002982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	6852      	ldr	r2, [r2, #4]
 8002956:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296a:	d10a      	bne.n	8002982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	6852      	ldr	r2, [r2, #4]
 8002976:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	6852      	ldr	r2, [r2, #4]
 8002998:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
  }
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029c2:	f7fd fdff 	bl	80005c4 <HAL_GetTick>
 80029c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d10e      	bne.n	80029f4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fb5d 	bl	80020a4 <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e00c      	b.n	8002a0e <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	; 0x30
 8002a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	4a46      	ldr	r2, [pc, #280]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a20:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a36:	4a40      	ldr	r2, [pc, #256]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a38:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	4a3a      	ldr	r2, [pc, #232]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a50:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a68:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a7e:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a80:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a96:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <MX_GPIO_Init+0x120>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002ab4:	4821      	ldr	r0, [pc, #132]	; (8002b3c <MX_GPIO_Init+0x124>)
 8002ab6:	f7fe f8a7 	bl	8000c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2140      	movs	r1, #64	; 0x40
 8002abe:	4820      	ldr	r0, [pc, #128]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002ac0:	f7fe f8a2 	bl	8000c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_GPIO_Init+0x12c>)
 8002acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 031c 	add.w	r3, r7, #28
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	481b      	ldr	r0, [pc, #108]	; (8002b48 <MX_GPIO_Init+0x130>)
 8002ada:	f7fd feeb 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002ade:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 031c 	add.w	r3, r7, #28
 8002af4:	4619      	mov	r1, r3
 8002af6:	4811      	ldr	r0, [pc, #68]	; (8002b3c <MX_GPIO_Init+0x124>)
 8002af8:	f7fd fedc 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002afc:	2340      	movs	r3, #64	; 0x40
 8002afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4619      	mov	r1, r3
 8002b12:	480b      	ldr	r0, [pc, #44]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002b14:	f7fd fece 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <MX_GPIO_Init+0x128>)
 8002b2c:	f7fd fec2 	bl	80008b4 <HAL_GPIO_Init>

}
 8002b30:	bf00      	nop
 8002b32:	3730      	adds	r7, #48	; 0x30
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40021800 	.word	0x40021800
 8002b44:	10110000 	.word	0x10110000
 8002b48:	40020800 	.word	0x40020800

08002b4c <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b50:	f7fd fcfa 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b54:	f000 f81c 	bl	8002b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b58:	f7ff ff5e 	bl	8002a18 <MX_GPIO_Init>
//  MX_ETH_Init();
//  MX_USART3_UART_Init();
//  MX_USB_OTG_FS_PCD_Init();
  MX_USART1_UART_Init();
 8002b5c:	f000 f968 	bl	8002e30 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002b60:	f000 f8b6 	bl	8002cd0 <MX_NVIC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  LedDriver_OnLed(&ledDriver);
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002b64:	2200      	movs	r2, #0
 8002b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b6a:	4808      	ldr	r0, [pc, #32]	; (8002b8c <main+0x40>)
 8002b6c:	f7fe f84c 	bl	8000c08 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8002b70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b74:	f7fd fd32 	bl	80005dc <HAL_Delay>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b7e:	4803      	ldr	r0, [pc, #12]	; (8002b8c <main+0x40>)
 8002b80:	f7fe f842 	bl	8000c08 <HAL_GPIO_WritePin>
//	  LedDriver_OffLed(&ledDriver);
	  HAL_Delay(100);
 8002b84:	2064      	movs	r0, #100	; 0x64
 8002b86:	f7fd fd29 	bl	80005dc <HAL_Delay>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002b8a:	e7eb      	b.n	8002b64 <main+0x18>
 8002b8c:	40020400 	.word	0x40020400

08002b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0b8      	sub	sp, #224	; 0xe0
 8002b94:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <SystemClock_Config+0x12c>)
 8002b98:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <SystemClock_Config+0x12c>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <SystemClock_Config+0x12c>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002bae:	4a44      	ldr	r2, [pc, #272]	; (8002cc0 <SystemClock_Config+0x130>)
 8002bb0:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <SystemClock_Config+0x130>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <SystemClock_Config+0x130>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002bd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002be6:	2304      	movs	r3, #4
 8002be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002bec:	2360      	movs	r3, #96	; 0x60
 8002bee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f86a 	bl	8000cdc <HAL_RCC_OscConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c0e:	21b3      	movs	r1, #179	; 0xb3
 8002c10:	482c      	ldr	r0, [pc, #176]	; (8002cc4 <SystemClock_Config+0x134>)
 8002c12:	f000 f871 	bl	8002cf8 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c16:	f7fe f811 	bl	8000c3c <HAL_PWREx_EnableOverDrive>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <SystemClock_Config+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c20:	21ba      	movs	r1, #186	; 0xba
 8002c22:	4828      	ldr	r0, [pc, #160]	; (8002cc4 <SystemClock_Config+0x134>)
 8002c24:	f000 f868 	bl	8002cf8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c28:	230f      	movs	r3, #15
 8002c2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c4c:	2103      	movs	r1, #3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fab6 	bl	80011c0 <HAL_RCC_ClockConfig>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c5a:	21c8      	movs	r1, #200	; 0xc8
 8002c5c:	4819      	ldr	r0, [pc, #100]	; (8002cc4 <SystemClock_Config+0x134>)
 8002c5e:	f000 f84b 	bl	8002cf8 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <SystemClock_Config+0x138>)
 8002c64:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c66:	2300      	movs	r3, #0
 8002c68:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c74:	f107 0308 	add.w	r3, r7, #8
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fc95 	bl	80015a8 <HAL_RCCEx_PeriphCLKConfig>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <SystemClock_Config+0xfc>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c84:	21d2      	movs	r1, #210	; 0xd2
 8002c86:	480f      	ldr	r0, [pc, #60]	; (8002cc4 <SystemClock_Config+0x134>)
 8002c88:	f000 f836 	bl	8002cf8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002c8c:	f7fe fc58 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8002c90:	4602      	mov	r2, r0
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <SystemClock_Config+0x13c>)
 8002c94:	fba3 2302 	umull	r2, r3, r3, r2
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fdbf 	bl	800081e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ca0:	2004      	movs	r0, #4
 8002ca2:	f7fd fdc9 	bl	8000838 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cae:	f7fd fd8c 	bl	80007ca <HAL_NVIC_SetPriority>
}
 8002cb2:	bf00      	nop
 8002cb4:	37e0      	adds	r7, #224	; 0xe0
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	0800301c 	.word	0x0800301c
 8002cc8:	00200140 	.word	0x00200140
 8002ccc:	10624dd3 	.word	0x10624dd3

08002cd0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	2025      	movs	r0, #37	; 0x25
 8002cda:	f7fd fd76 	bl	80007ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cde:	2025      	movs	r0, #37	; 0x25
 8002ce0:	f7fd fd8f 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2005      	movs	r0, #5
 8002cea:	f7fd fd6e 	bl	80007ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002cee:	2005      	movs	r0, #5
 8002cf0:	f7fd fd87 	bl	8000802 <HAL_NVIC_EnableIRQ>
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002d02:	e7fe      	b.n	8002d02 <_Error_Handler+0xa>

08002d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <HAL_MspInit+0x98>)
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_MspInit+0x98>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_MspInit+0x98>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_MspInit+0x98>)
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_MspInit+0x98>)
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <HAL_MspInit+0x98>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3a:	2003      	movs	r0, #3
 8002d3c:	f7fd fd3a 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	f06f 000b 	mvn.w	r0, #11
 8002d48:	f7fd fd3f 	bl	80007ca <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	f06f 000a 	mvn.w	r0, #10
 8002d54:	f7fd fd39 	bl	80007ca <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f06f 0009 	mvn.w	r0, #9
 8002d60:	f7fd fd33 	bl	80007ca <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	f06f 0004 	mvn.w	r0, #4
 8002d6c:	f7fd fd2d 	bl	80007ca <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	f06f 0003 	mvn.w	r0, #3
 8002d78:	f7fd fd27 	bl	80007ca <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f06f 0001 	mvn.w	r0, #1
 8002d84:	f7fd fd21 	bl	80007ca <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f7fd fd1b 	bl	80007ca <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800

08002da0 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USART1_IRQHandler+0x10>)
 8002db6:	f7ff f86f 	bl	8001e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000009c 	.word	0x2000009c

08002dc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dc8:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <SystemInit+0x5c>)
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <SystemInit+0x5c>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <SystemInit+0x60>)
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <SystemInit+0x60>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <SystemInit+0x60>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002dea:	490e      	ldr	r1, [pc, #56]	; (8002e24 <SystemInit+0x60>)
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <SystemInit+0x60>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <SystemInit+0x64>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <SystemInit+0x60>)
 8002df8:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <SystemInit+0x68>)
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002dfc:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <SystemInit+0x60>)
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <SystemInit+0x60>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <SystemInit+0x60>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <SystemInit+0x5c>)
 8002e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e14:	609a      	str	r2, [r3, #8]
#endif
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00
 8002e24:	40023800 	.word	0x40023800
 8002e28:	fef6ffff 	.word	0xfef6ffff
 8002e2c:	24003010 	.word	0x24003010

08002e30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e36:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <MX_USART1_UART_Init+0x60>)
 8002e38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e48:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e56:	220c      	movs	r2, #12
 8002e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e72:	4806      	ldr	r0, [pc, #24]	; (8002e8c <MX_USART1_UART_Init+0x5c>)
 8002e74:	f7fe ffbe 	bl	8001df4 <HAL_UART_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <MX_USART1_UART_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e7e:	2145      	movs	r1, #69	; 0x45
 8002e80:	4804      	ldr	r0, [pc, #16]	; (8002e94 <MX_USART1_UART_Init+0x64>)
 8002e82:	f7ff ff39 	bl	8002cf8 <_Error_Handler>
  }

}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000009c 	.word	0x2000009c
 8002e90:	40011000 	.word	0x40011000
 8002e94:	0800302c 	.word	0x0800302c

08002e98 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2b      	ldr	r2, [pc, #172]	; (8002f54 <HAL_UART_MspInit+0xbc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d12d      	bne.n	8002f06 <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eaa:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <HAL_UART_MspInit+0xc0>)
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_UART_MspInit+0xc0>)
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	f043 0310 	orr.w	r3, r3, #16
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <HAL_UART_MspInit+0xc0>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
  
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	481f      	ldr	r0, [pc, #124]	; (8002f5c <HAL_UART_MspInit+0xc4>)
 8002ee0:	f7fd fce8 	bl	80008b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ee4:	2340      	movs	r3, #64	; 0x40
 8002ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	4619      	mov	r1, r3
 8002efe:	4817      	ldr	r0, [pc, #92]	; (8002f5c <HAL_UART_MspInit+0xc4>)
 8002f00:	f7fd fcd8 	bl	80008b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f04:	e021      	b.n	8002f4a <HAL_UART_MspInit+0xb2>
  else if(uartHandle->Instance==USART3)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <HAL_UART_MspInit+0xc8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d11c      	bne.n	8002f4a <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f10:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <HAL_UART_MspInit+0xc0>)
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_UART_MspInit+0xc0>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_UART_MspInit+0xc0>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002f28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	4807      	ldr	r0, [pc, #28]	; (8002f64 <HAL_UART_MspInit+0xcc>)
 8002f46:	f7fd fcb5 	bl	80008b4 <HAL_GPIO_Init>
}
 8002f4a:	bf00      	nop
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40011000 	.word	0x40011000
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40004800 	.word	0x40004800
 8002f64:	40020c00 	.word	0x40020c00

08002f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f6e:	e003      	b.n	8002f78 <LoopCopyDataInit>

08002f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f76:	3104      	adds	r1, #4

08002f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f80:	d3f6      	bcc.n	8002f70 <CopyDataInit>
  ldr  r2, =_sbss
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f84:	e002      	b.n	8002f8c <LoopFillZerobss>

08002f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f88:	f842 3b04 	str.w	r3, [r2], #4

08002f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f90:	d3f9      	bcc.n	8002f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f92:	f7ff ff17 	bl	8002dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f96:	f000 f811 	bl	8002fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9a:	f7ff fdd7 	bl	8002b4c <main>
  bx  lr    
 8002f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fa0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002fa4:	08003064 	.word	0x08003064
  ldr  r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002fb0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002fb4:	2000010c 	.word	0x2000010c

08002fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb8:	e7fe      	b.n	8002fb8 <ADC_IRQHandler>
	...

08002fbc <__libc_init_array>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4e0d      	ldr	r6, [pc, #52]	; (8002ff4 <__libc_init_array+0x38>)
 8002fc0:	4c0d      	ldr	r4, [pc, #52]	; (8002ff8 <__libc_init_array+0x3c>)
 8002fc2:	1ba4      	subs	r4, r4, r6
 8002fc4:	10a4      	asrs	r4, r4, #2
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	42a5      	cmp	r5, r4
 8002fca:	d109      	bne.n	8002fe0 <__libc_init_array+0x24>
 8002fcc:	4e0b      	ldr	r6, [pc, #44]	; (8002ffc <__libc_init_array+0x40>)
 8002fce:	4c0c      	ldr	r4, [pc, #48]	; (8003000 <__libc_init_array+0x44>)
 8002fd0:	f000 f818 	bl	8003004 <_init>
 8002fd4:	1ba4      	subs	r4, r4, r6
 8002fd6:	10a4      	asrs	r4, r4, #2
 8002fd8:	2500      	movs	r5, #0
 8002fda:	42a5      	cmp	r5, r4
 8002fdc:	d105      	bne.n	8002fea <__libc_init_array+0x2e>
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fe4:	4798      	blx	r3
 8002fe6:	3501      	adds	r5, #1
 8002fe8:	e7ee      	b.n	8002fc8 <__libc_init_array+0xc>
 8002fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fee:	4798      	blx	r3
 8002ff0:	3501      	adds	r5, #1
 8002ff2:	e7f2      	b.n	8002fda <__libc_init_array+0x1e>
 8002ff4:	0800305c 	.word	0x0800305c
 8002ff8:	0800305c 	.word	0x0800305c
 8002ffc:	0800305c 	.word	0x0800305c
 8003000:	08003060 	.word	0x08003060

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
