
DataLoggerGPS_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080032c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000dc  2000000c  080032cc  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000e8  080032cc  000200e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010505  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000021f9  00000000  00000000  0003053f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000758  00000000  00000000  00032738  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000660  00000000  00000000  00032e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00026ed5  00000000  00000000  000334f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008042  00000000  00000000  0005a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e7ddd  00000000  00000000  00062407  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0014a1e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b1c  00000000  00000000  0014a260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800325c 	.word	0x0800325c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800325c 	.word	0x0800325c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f945 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f002 fcdc 	bl	8002f14 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f95f 	bl	8000846 <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f927 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000008 	.word	0x20000008
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000028 	.word	0x20000028

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000028 	.word	0x20000028

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3f7      	bcc.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <NVIC_SetPriorityGrouping+0x40>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <NVIC_SetPriorityGrouping+0x44>)
 8000672:	4313      	orrs	r3, r2
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <NVIC_SetPriorityGrouping+0x40>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	05fa0000 	.word	0x05fa0000

08000690 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <NVIC_EnableIRQ+0x30>)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	095b      	lsrs	r3, r3, #5
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	f002 021f 	and.w	r2, r2, #31
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da0b      	bge.n	800070c <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	490d      	ldr	r1, [pc, #52]	; (800072c <NVIC_SetPriority+0x4c>)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	3b04      	subs	r3, #4
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070a:	e009      	b.n	8000720 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	4908      	ldr	r1, [pc, #32]	; (8000730 <NVIC_SetPriority+0x50>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000e100 	.word	0xe000e100

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	2201      	movs	r2, #1
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	401a      	ands	r2, r3
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077a:	2101      	movs	r1, #1
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	1e59      	subs	r1, r3, #1
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff2f 	bl	8000648 <NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff44 	bl	8000690 <NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff90 	bl	8000734 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5f 	bl	80006e0 <NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff37 	bl	80006ac <NVIC_EnableIRQ>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffa2 	bl	8000798 <SysTick_Config>
 8000854:	4603      	mov	r3, r0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b04      	cmp	r3, #4
 800086c:	d106      	bne.n	800087c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800087a:	e005      	b.n	8000888 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f023 0304 	bic.w	r3, r3, #4
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800089c:	f000 f802 	bl	80008a4 <HAL_SYSTICK_Callback>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	e175      	b.n	8000bc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008d4:	2201      	movs	r2, #1
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f040 8164 	bne.w	8000bba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0x4e>
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d123      	bne.n	800094a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	08da      	lsrs	r2, r3, #3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3208      	adds	r2, #8
 800090a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	220f      	movs	r2, #15
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	4013      	ands	r3, r2
 8000924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	691a      	ldr	r2, [r3, #16]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4313      	orrs	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	08da      	lsrs	r2, r3, #3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	69b9      	ldr	r1, [r7, #24]
 8000946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0203 	and.w	r2, r3, #3
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d00b      	beq.n	800099e <HAL_GPIO_Init+0xea>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d007      	beq.n	800099e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000992:	2b11      	cmp	r3, #17
 8000994:	d003      	beq.n	800099e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2b12      	cmp	r3, #18
 800099c:	d130      	bne.n	8000a00 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2203      	movs	r2, #3
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4013      	ands	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d4:	2201      	movs	r2, #1
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	f003 0201 	and.w	r2, r3, #1
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	689a      	ldr	r2, [r3, #8]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f000 80be 	beq.w	8000bba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4a65      	ldr	r2, [pc, #404]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000a40:	4b64      	ldr	r3, [pc, #400]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b62      	ldr	r3, [pc, #392]	; (8000bd4 <HAL_GPIO_Init+0x320>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a56:	4a60      	ldr	r2, [pc, #384]	; (8000bd8 <HAL_GPIO_Init+0x324>)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f003 0303 	and.w	r3, r3, #3
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	220f      	movs	r2, #15
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a57      	ldr	r2, [pc, #348]	; (8000bdc <HAL_GPIO_Init+0x328>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d037      	beq.n	8000af2 <HAL_GPIO_Init+0x23e>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a56      	ldr	r2, [pc, #344]	; (8000be0 <HAL_GPIO_Init+0x32c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d031      	beq.n	8000aee <HAL_GPIO_Init+0x23a>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a55      	ldr	r2, [pc, #340]	; (8000be4 <HAL_GPIO_Init+0x330>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d02b      	beq.n	8000aea <HAL_GPIO_Init+0x236>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a54      	ldr	r2, [pc, #336]	; (8000be8 <HAL_GPIO_Init+0x334>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d025      	beq.n	8000ae6 <HAL_GPIO_Init+0x232>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a53      	ldr	r2, [pc, #332]	; (8000bec <HAL_GPIO_Init+0x338>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d01f      	beq.n	8000ae2 <HAL_GPIO_Init+0x22e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a52      	ldr	r2, [pc, #328]	; (8000bf0 <HAL_GPIO_Init+0x33c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d019      	beq.n	8000ade <HAL_GPIO_Init+0x22a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a51      	ldr	r2, [pc, #324]	; (8000bf4 <HAL_GPIO_Init+0x340>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0x226>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a50      	ldr	r2, [pc, #320]	; (8000bf8 <HAL_GPIO_Init+0x344>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d00d      	beq.n	8000ad6 <HAL_GPIO_Init+0x222>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4f      	ldr	r2, [pc, #316]	; (8000bfc <HAL_GPIO_Init+0x348>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d007      	beq.n	8000ad2 <HAL_GPIO_Init+0x21e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <HAL_GPIO_Init+0x34c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_GPIO_Init+0x21a>
 8000aca:	2309      	movs	r3, #9
 8000acc:	e012      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ace:	230a      	movs	r3, #10
 8000ad0:	e010      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	e00e      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	e00c      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ada:	2306      	movs	r3, #6
 8000adc:	e00a      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ade:	2305      	movs	r3, #5
 8000ae0:	e008      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	e006      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e004      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000aea:	2302      	movs	r3, #2
 8000aec:	e002      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x240>
 8000af2:	2300      	movs	r3, #0
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	f002 0203 	and.w	r2, r2, #3
 8000afa:	0092      	lsls	r2, r2, #2
 8000afc:	4093      	lsls	r3, r2
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b04:	4934      	ldr	r1, [pc, #208]	; (8000bd8 <HAL_GPIO_Init+0x324>)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b12:	4b3c      	ldr	r3, [pc, #240]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b36:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b3c:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b60:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b66:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4013      	ands	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <HAL_GPIO_Init+0x350>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	f67f ae86 	bls.w	80008d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3724      	adds	r7, #36	; 0x24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40020c00 	.word	0x40020c00
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40021400 	.word	0x40021400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40021c00 	.word	0x40021c00
 8000bfc:	40022000 	.word	0x40022000
 8000c00:	40022400 	.word	0x40022400
 8000c04:	40013c00 	.word	0x40013c00

08000c08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e0da      	b.n	8000dda <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000c24:	2201      	movs	r2, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	f040 80ca 	bne.w	8000dd4 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	2103      	movs	r1, #3
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	401a      	ands	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	08d9      	lsrs	r1, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3108      	adds	r1, #8
 8000c62:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	200f      	movs	r0, #15
 8000c70:	fa00 f303 	lsl.w	r3, r0, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4019      	ands	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3208      	adds	r2, #8
 8000c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2103      	movs	r1, #3
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	401a      	ands	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	401a      	ands	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8000cc0:	4a4b      	ldr	r2, [pc, #300]	; (8000df0 <HAL_GPIO_DeInit+0x1e8>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	68ba      	ldr	r2, [r7, #8]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a43      	ldr	r2, [pc, #268]	; (8000df4 <HAL_GPIO_DeInit+0x1ec>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d037      	beq.n	8000d5a <HAL_GPIO_DeInit+0x152>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a42      	ldr	r2, [pc, #264]	; (8000df8 <HAL_GPIO_DeInit+0x1f0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d031      	beq.n	8000d56 <HAL_GPIO_DeInit+0x14e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a41      	ldr	r2, [pc, #260]	; (8000dfc <HAL_GPIO_DeInit+0x1f4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d02b      	beq.n	8000d52 <HAL_GPIO_DeInit+0x14a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <HAL_GPIO_DeInit+0x1f8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d025      	beq.n	8000d4e <HAL_GPIO_DeInit+0x146>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <HAL_GPIO_DeInit+0x1fc>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d01f      	beq.n	8000d4a <HAL_GPIO_DeInit+0x142>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a3e      	ldr	r2, [pc, #248]	; (8000e08 <HAL_GPIO_DeInit+0x200>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d019      	beq.n	8000d46 <HAL_GPIO_DeInit+0x13e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a3d      	ldr	r2, [pc, #244]	; (8000e0c <HAL_GPIO_DeInit+0x204>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d013      	beq.n	8000d42 <HAL_GPIO_DeInit+0x13a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <HAL_GPIO_DeInit+0x208>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00d      	beq.n	8000d3e <HAL_GPIO_DeInit+0x136>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a3b      	ldr	r2, [pc, #236]	; (8000e14 <HAL_GPIO_DeInit+0x20c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d007      	beq.n	8000d3a <HAL_GPIO_DeInit+0x132>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a3a      	ldr	r2, [pc, #232]	; (8000e18 <HAL_GPIO_DeInit+0x210>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_GPIO_DeInit+0x12e>
 8000d32:	2309      	movs	r3, #9
 8000d34:	e012      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d36:	230a      	movs	r3, #10
 8000d38:	e010      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	e00e      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d3e:	2307      	movs	r3, #7
 8000d40:	e00c      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e00a      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d46:	2305      	movs	r3, #5
 8000d48:	e008      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_DeInit+0x154>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	f002 0203 	and.w	r2, r2, #3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	fa03 f202 	lsl.w	r2, r3, r2
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d132      	bne.n	8000dd4 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000d7e:	481c      	ldr	r0, [pc, #112]	; (8000df0 <HAL_GPIO_DeInit+0x1e8>)
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	089b      	lsrs	r3, r3, #2
 8000d84:	491a      	ldr	r1, [pc, #104]	; (8000df0 <HAL_GPIO_DeInit+0x1e8>)
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	0892      	lsrs	r2, r2, #2
 8000d8a:	3202      	adds	r2, #2
 8000d8c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	400a      	ands	r2, r1
 8000d96:	3302      	adds	r3, #2
 8000d98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000d9c:	491f      	ldr	r1, [pc, #124]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4013      	ands	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000daa:	491c      	ldr	r1, [pc, #112]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4013      	ands	r3, r2
 8000db6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000db8:	4918      	ldr	r1, [pc, #96]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000dc6:	4915      	ldr	r1, [pc, #84]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_GPIO_DeInit+0x214>)
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	f67f af21 	bls.w	8000c24 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8000de2:	bf00      	nop
 8000de4:	371c      	adds	r7, #28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400
 8000dfc:	40020800 	.word	0x40020800
 8000e00:	40020c00 	.word	0x40020c00
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40021400 	.word	0x40021400
 8000e0c:	40021800 	.word	0x40021800
 8000e10:	40021c00 	.word	0x40021c00
 8000e14:	40022000 	.word	0x40022000
 8000e18:	40022400 	.word	0x40022400
 8000e1c:	40013c00 	.word	0x40013c00

08000e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e30:	787b      	ldrb	r3, [r7, #1]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000e3c:	e003      	b.n	8000e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	041a      	lsls	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	619a      	str	r2, [r3, #24]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4a23      	ldr	r2, [pc, #140]	; (8000eec <HAL_PWREx_EnableOverDrive+0x98>)
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_PWREx_EnableOverDrive+0x98>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_PWREx_EnableOverDrive+0x98>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e76:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e82:	f7ff fbb3 	bl	80005ec <HAL_GetTick>
 8000e86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e88:	e009      	b.n	8000e9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e8a:	f7ff fbaf 	bl	80005ec <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e98:	d901      	bls.n	8000e9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e022      	b.n	8000ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eaa:	d1ee      	bne.n	8000e8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000eac:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb8:	f7ff fb98 	bl	80005ec <HAL_GetTick>
 8000ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ebe:	e009      	b.n	8000ed4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ec0:	f7ff fb94 	bl	80005ec <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ece:	d901      	bls.n	8000ed4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e007      	b.n	8000ee4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ee0:	d1ee      	bne.n	8000ec0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40007000 	.word	0x40007000

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e25e      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8087 	beq.w	8001026 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f18:	4b96      	ldr	r3, [pc, #600]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f24:	4b93      	ldr	r3, [pc, #588]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d112      	bne.n	8000f56 <HAL_RCC_OscConfig+0x62>
 8000f30:	4b90      	ldr	r3, [pc, #576]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b8d      	ldr	r3, [pc, #564]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d06c      	beq.n	8001024 <HAL_RCC_OscConfig+0x130>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d168      	bne.n	8001024 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e238      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x7a>
 8000f60:	4a84      	ldr	r2, [pc, #528]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f62:	4b84      	ldr	r3, [pc, #528]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e02e      	b.n	8000fcc <HAL_RCC_OscConfig+0xd8>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10c      	bne.n	8000f90 <HAL_RCC_OscConfig+0x9c>
 8000f76:	4a7f      	ldr	r2, [pc, #508]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f78:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4a7c      	ldr	r2, [pc, #496]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f84:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	e01d      	b.n	8000fcc <HAL_RCC_OscConfig+0xd8>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
 8000f9a:	4a76      	ldr	r2, [pc, #472]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	4b75      	ldr	r3, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4a73      	ldr	r2, [pc, #460]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fa8:	4b72      	ldr	r3, [pc, #456]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_RCC_OscConfig+0xd8>
 8000fb4:	4a6f      	ldr	r2, [pc, #444]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fb6:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	4a6c      	ldr	r2, [pc, #432]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fc2:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb0a 	bl	80005ec <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fb06 	bl	80005ec <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	; 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1ec      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fee:	4b61      	ldr	r3, [pc, #388]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0xe8>
 8000ffa:	e014      	b.n	8001026 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff faf6 	bl	80005ec <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff faf2 	bl	80005ec <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	; 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e1d8      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f0      	bne.n	8001004 <HAL_RCC_OscConfig+0x110>
 8001022:	e000      	b.n	8001026 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d069      	beq.n	8001106 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800103e:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d11c      	bne.n	8001084 <HAL_RCC_OscConfig+0x190>
 800104a:	4b4a      	ldr	r3, [pc, #296]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d116      	bne.n	8001084 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x17a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e1ac      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106e:	4941      	ldr	r1, [pc, #260]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001070:	4b40      	ldr	r3, [pc, #256]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4313      	orrs	r3, r2
 8001080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	e040      	b.n	8001106 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d023      	beq.n	80010d4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108c:	4a39      	ldr	r2, [pc, #228]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff faa8 	bl	80005ec <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff faa4 	bl	80005ec <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e18a      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	492d      	ldr	r1, [pc, #180]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
 80010d2:	e018      	b.n	8001106 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fa84 	bl	80005ec <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fa80 	bl	80005ec <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e166      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d038      	beq.n	8001184 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d019      	beq.n	800114e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 800111e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001126:	f7ff fa61 	bl	80005ec <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fa5d 	bl	80005ec <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e143      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x23a>
 800114c:	e01a      	b.n	8001184 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_RCC_OscConfig+0x280>)
 8001152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115a:	f7ff fa47 	bl	80005ec <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fa43 	bl	80005ec <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d903      	bls.n	8001178 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e129      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
 8001174:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001178:	4b95      	ldr	r3, [pc, #596]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800117a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ee      	bne.n	8001162 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80a4 	beq.w	80012da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b8f      	ldr	r3, [pc, #572]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4a8c      	ldr	r2, [pc, #560]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80011a0:	4b8b      	ldr	r3, [pc, #556]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ba:	4b86      	ldr	r3, [pc, #536]	; (80013d4 <HAL_RCC_OscConfig+0x4e0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d118      	bne.n	80011f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80011c6:	4a83      	ldr	r2, [pc, #524]	; (80013d4 <HAL_RCC_OscConfig+0x4e0>)
 80011c8:	4b82      	ldr	r3, [pc, #520]	; (80013d4 <HAL_RCC_OscConfig+0x4e0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fa0b 	bl	80005ec <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80011da:	f7ff fa07 	bl	80005ec <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e0ed      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ec:	4b79      	ldr	r3, [pc, #484]	; (80013d4 <HAL_RCC_OscConfig+0x4e0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d106      	bne.n	800120e <HAL_RCC_OscConfig+0x31a>
 8001200:	4a73      	ldr	r2, [pc, #460]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001202:	4b73      	ldr	r3, [pc, #460]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6713      	str	r3, [r2, #112]	; 0x70
 800120c:	e02d      	b.n	800126a <HAL_RCC_OscConfig+0x376>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x33c>
 8001216:	4a6e      	ldr	r2, [pc, #440]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001218:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800121a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6713      	str	r3, [r2, #112]	; 0x70
 8001222:	4a6b      	ldr	r2, [pc, #428]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6713      	str	r3, [r2, #112]	; 0x70
 800122e:	e01c      	b.n	800126a <HAL_RCC_OscConfig+0x376>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0x35e>
 8001238:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123e:	f043 0304 	orr.w	r3, r3, #4
 8001242:	6713      	str	r3, [r2, #112]	; 0x70
 8001244:	4a62      	ldr	r2, [pc, #392]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001246:	4b62      	ldr	r3, [pc, #392]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6713      	str	r3, [r2, #112]	; 0x70
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0x376>
 8001252:	4a5f      	ldr	r2, [pc, #380]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
 800125e:	4a5c      	ldr	r2, [pc, #368]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001260:	4b5b      	ldr	r3, [pc, #364]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001264:	f023 0304 	bic.w	r3, r3, #4
 8001268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d015      	beq.n	800129e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001272:	f7ff f9bb 	bl	80005ec <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127a:	f7ff f9b7 	bl	80005ec <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	; 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e09b      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0ee      	beq.n	800127a <HAL_RCC_OscConfig+0x386>
 800129c:	e014      	b.n	80012c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129e:	f7ff f9a5 	bl	80005ec <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff f9a1 	bl	80005ec <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e085      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ee      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ce:	4a40      	ldr	r2, [pc, #256]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80012d0:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d071      	beq.n	80013c6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d069      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d14b      	bne.n	800138e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f6:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80012f8:	4b35      	ldr	r3, [pc, #212]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff f973 	bl	80005ec <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff f96f 	bl	80005ec <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e055      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001328:	4929      	ldr	r1, [pc, #164]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	3b01      	subs	r3, #1
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	061b      	lsls	r3, r3, #24
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001354:	071b      	lsls	r3, r3, #28
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff f941 	bl	80005ec <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff f93d 	bl	80005ec <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e023      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x47a>
 800138c:	e01b      	b.n	80013c6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff f927 	bl	80005ec <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff f923 	bl	80005ec <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e009      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_RCC_OscConfig+0x4dc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4ae>
 80013c0:	e001      	b.n	80013c6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000

080013d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0ce      	b.n	800158e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 020f 	and.w	r2, r3, #15
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d210      	bcs.n	8001420 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013fe:	4966      	ldr	r1, [pc, #408]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 8001400:	4b65      	ldr	r3, [pc, #404]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 020f 	bic.w	r2, r3, #15
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 020f 	and.w	r2, r3, #15
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b6      	b.n	800158e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	4b52      	ldr	r3, [pc, #328]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800145a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	494f      	ldr	r1, [pc, #316]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	4b4f      	ldr	r3, [pc, #316]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d040      	beq.n	80014fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d115      	bne.n	80014ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07d      	b.n	800158e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d107      	bne.n	80014aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d109      	bne.n	80014ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e071      	b.n	800158e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e069      	b.n	800158e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ba:	4938      	ldr	r1, [pc, #224]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f023 0203 	bic.w	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014cc:	f7ff f88e 	bl	80005ec <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	e00a      	b.n	80014ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f7ff f88a 	bl	80005ec <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e051      	b.n	800158e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ea:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 020c 	and.w	r2, r3, #12
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1eb      	bne.n	80014d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 020f 	and.w	r2, r3, #15
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4923      	ldr	r1, [pc, #140]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 020f 	bic.w	r2, r3, #15
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 020f 	and.w	r2, r3, #15
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e030      	b.n	800158e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4918      	ldr	r1, [pc, #96]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001556:	4911      	ldr	r1, [pc, #68]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f81d 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 800156e:	4601      	mov	r1, r0
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_RCC_ClockConfig+0x1c8>)
 800157c:	5cd3      	ldrb	r3, [r2, r3]
 800157e:	fa21 f303 	lsr.w	r3, r1, r3
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001586:	2000      	movs	r0, #0
 8001588:	f7fe ffec 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023c00 	.word	0x40023c00
 800159c:	40023800 	.word	0x40023800
 80015a0:	08003298 	.word	0x08003298
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ac:	b08f      	sub	sp, #60	; 0x3c
 80015ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c0:	4b62      	ldr	r3, [pc, #392]	; (800174c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d007      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x34>
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f040 80b2 	bne.w	800173a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d6:	4b5e      	ldr	r3, [pc, #376]	; (8001750 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80015da:	e0b1      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015dc:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015e0:	e0ae      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80015ec:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d04e      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f8:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	f04f 0400 	mov.w	r4, #0
 8001602:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	ea01 0103 	and.w	r1, r1, r3
 800160e:	ea02 0204 	and.w	r2, r2, r4
 8001612:	460b      	mov	r3, r1
 8001614:	4614      	mov	r4, r2
 8001616:	0160      	lsls	r0, r4, #5
 8001618:	6278      	str	r0, [r7, #36]	; 0x24
 800161a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800161c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001620:	6278      	str	r0, [r7, #36]	; 0x24
 8001622:	015b      	lsls	r3, r3, #5
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800162a:	1a5b      	subs	r3, r3, r1
 800162c:	eb64 0402 	sbc.w	r4, r4, r2
 8001630:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001634:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001638:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800163c:	ebb8 0803 	subs.w	r8, r8, r3
 8001640:	eb69 0904 	sbc.w	r9, r9, r4
 8001644:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800165c:	eb18 0801 	adds.w	r8, r8, r1
 8001660:	eb49 0902 	adc.w	r9, r9, r2
 8001664:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800167c:	4640      	mov	r0, r8
 800167e:	4649      	mov	r1, r9
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	f04f 0400 	mov.w	r4, #0
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	f7fe fdd5 	bl	8000238 <__aeabi_uldivmod>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
 8001694:	e043      	b.n	800171e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	f04f 0400 	mov.w	r4, #0
 80016a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	ea01 0103 	and.w	r1, r1, r3
 80016ac:	ea02 0204 	and.w	r2, r2, r4
 80016b0:	460b      	mov	r3, r1
 80016b2:	4614      	mov	r4, r2
 80016b4:	0160      	lsls	r0, r4, #5
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016c8:	1a5b      	subs	r3, r3, r1
 80016ca:	eb64 0402 	sbc.w	r4, r4, r2
 80016ce:	01a6      	lsls	r6, r4, #6
 80016d0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80016d4:	019d      	lsls	r5, r3, #6
 80016d6:	1aed      	subs	r5, r5, r3
 80016d8:	eb66 0604 	sbc.w	r6, r6, r4
 80016dc:	00f3      	lsls	r3, r6, #3
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	00eb      	lsls	r3, r5, #3
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	e897 0060 	ldmia.w	r7, {r5, r6}
 80016f0:	186d      	adds	r5, r5, r1
 80016f2:	eb46 0602 	adc.w	r6, r6, r2
 80016f6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80016fa:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80016fe:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001702:	4655      	mov	r5, sl
 8001704:	465e      	mov	r6, fp
 8001706:	4628      	mov	r0, r5
 8001708:	4631      	mov	r1, r6
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	f04f 0400 	mov.w	r4, #0
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	f7fe fd90 	bl	8000238 <__aeabi_uldivmod>
 8001718:	4603      	mov	r3, r0
 800171a:	460c      	mov	r4, r1
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	3301      	adds	r3, #1
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800172e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001738:	e002      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800173a:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800173e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001742:	4618      	mov	r0, r3
 8001744:	373c      	adds	r7, #60	; 0x3c
 8001746:	46bd      	mov	sp, r7
 8001748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200

08001758 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_RCC_GetHCLKFreq+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001774:	f7ff fff0 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 8001778:	4601      	mov	r1, r0
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0a9b      	lsrs	r3, r3, #10
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	4a03      	ldr	r2, [pc, #12]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	080032a8 	.word	0x080032a8

08001798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800179c:	f7ff ffdc 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 80017a0:	4601      	mov	r1, r0
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	0b5b      	lsrs	r3, r3, #13
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	080032a8 	.word	0x080032a8

080017c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d012      	beq.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80017e8:	4a69      	ldr	r2, [pc, #420]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017ea:	4b69      	ldr	r3, [pc, #420]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017f2:	6093      	str	r3, [r2, #8]
 80017f4:	4966      	ldr	r1, [pc, #408]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d017      	beq.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800181a:	495d      	ldr	r1, [pc, #372]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800181c:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800181e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182a:	4313      	orrs	r3, r2
 800182c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001838:	d101      	bne.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d017      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001856:	494e      	ldr	r1, [pc, #312]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800185a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800185e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001874:	d101      	bne.n	800187a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001892:	2301      	movs	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 808b 	beq.w	80019ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018bc:	4a35      	ldr	r2, [pc, #212]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018c8:	f7fe fe90 	bl	80005ec <HAL_GetTick>
 80018cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d0:	f7fe fe8c 	bl	80005ec <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e38d      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d035      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d02e      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800190c:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001914:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001916:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d014      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7fe fe54 	bl	80005ec <HAL_GetTick>
 8001944:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7fe fe50 	bl	80005ec <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e34f      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ee      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001976:	d111      	bne.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001988:	400b      	ands	r3, r1
 800198a:	4313      	orrs	r3, r2
 800198c:	6083      	str	r3, [r0, #8]
 800198e:	e00b      	b.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000
 8001998:	0ffffcff 	.word	0x0ffffcff
 800199c:	4ab2      	ldr	r2, [pc, #712]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800199e:	4bb2      	ldr	r3, [pc, #712]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80019a6:	6093      	str	r3, [r2, #8]
 80019a8:	49af      	ldr	r1, [pc, #700]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019aa:	4baf      	ldr	r3, [pc, #700]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b6:	4313      	orrs	r3, r2
 80019b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80019c6:	4aa8      	ldr	r2, [pc, #672]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019c8:	4ba7      	ldr	r3, [pc, #668]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019d6:	49a4      	ldr	r1, [pc, #656]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019d8:	4ba3      	ldr	r3, [pc, #652]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019da:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00a      	beq.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019f4:	499c      	ldr	r1, [pc, #624]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019f6:	4b9c      	ldr	r3, [pc, #624]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a04:	4313      	orrs	r3, r2
 8001a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a16:	4994      	ldr	r1, [pc, #592]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a18:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00a      	beq.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a38:	498b      	ldr	r1, [pc, #556]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a3a:	4b8b      	ldr	r3, [pc, #556]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001a5a:	4983      	ldr	r1, [pc, #524]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a5c:	4b82      	ldr	r3, [pc, #520]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a7c:	497a      	ldr	r1, [pc, #488]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a7e:	4b7a      	ldr	r3, [pc, #488]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	f023 0203 	bic.w	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a9e:	4972      	ldr	r1, [pc, #456]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001aa0:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f023 020c 	bic.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ac0:	4969      	ldr	r1, [pc, #420]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001ac2:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ae2:	4961      	ldr	r1, [pc, #388]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001ae4:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b04:	4958      	ldr	r1, [pc, #352]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b06:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001b26:	4950      	ldr	r1, [pc, #320]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001b48:	4947      	ldr	r1, [pc, #284]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00a      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001b6a:	493f      	ldr	r1, [pc, #252]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b6c:	4b3e      	ldr	r3, [pc, #248]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b8c:	4936      	ldr	r1, [pc, #216]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b94:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d011      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001bae:	492e      	ldr	r1, [pc, #184]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001bee:	491e      	ldr	r1, [pc, #120]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c10:	4915      	ldr	r1, [pc, #84]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00b      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c46:	4313      	orrs	r3, r2
 8001c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00e      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c60:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	e001      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001c82:	4981      	ldr	r1, [pc, #516]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c84:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c94:	4313      	orrs	r3, r2
 8001c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d005      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ca8:	f040 80d6 	bne.w	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x698>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cac:	4a76      	ldr	r2, [pc, #472]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb8:	f7fe fc98 	bl	80005ec <HAL_GetTick>
 8001cbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x512>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001cc0:	f7fe fc94 	bl	80005ec <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x512>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e195      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x500>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d021      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11d      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x56e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d06:	0e1b      	lsrs	r3, r3, #24
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d0e:	495e      	ldr	r1, [pc, #376]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	019a      	lsls	r2, r3, #6
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	061b      	lsls	r3, r3, #24
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	071b      	lsls	r3, r3, #28
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d42:	d00a      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d02e      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x5ee>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d58:	d129      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d6e:	0f1b      	lsrs	r3, r3, #28
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001d76:	4944      	ldr	r1, [pc, #272]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	019a      	lsls	r2, r3, #6
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	071b      	lsls	r3, r3, #28
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d96:	493c      	ldr	r1, [pc, #240]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d9e:	f023 021f 	bic.w	r2, r3, #31
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	3b01      	subs	r3, #1
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01d      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc0:	0e1b      	lsrs	r3, r3, #24
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dce:	0f1b      	lsrs	r3, r3, #28
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001dd6:	492c      	ldr	r1, [pc, #176]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	019a      	lsls	r2, r3, #6
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	041b      	lsls	r3, r3, #16
 8001de4:	431a      	orrs	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	071b      	lsls	r3, r3, #28
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d011      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e02:	4921      	ldr	r1, [pc, #132]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	019a      	lsls	r2, r3, #6
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	061b      	lsls	r3, r3, #24
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	071b      	lsls	r3, r3, #28
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e32:	f7fe fbdb 	bl	80005ec <HAL_GetTick>
 8001e36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e3a:	f7fe fbd7 	bl	80005ec <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0d8      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x67a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	f040 80ce 	bne.w	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e60:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6c:	f7fe fbbe 	bl	80005ec <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e72:	e00b      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e74:	f7fe fbba 	bl	80005ec <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d904      	bls.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0bb      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e98:	d0ec      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x6b4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d02e      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d12a      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ec2:	4b51      	ldr	r3, [pc, #324]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	0f1b      	lsrs	r3, r3, #28
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ede:	494a      	ldr	r1, [pc, #296]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	019a      	lsls	r2, r3, #6
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	071b      	lsls	r3, r3, #28
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001efe:	4942      	ldr	r1, [pc, #264]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f06:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d022      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f2c:	d11d      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	0e1b      	lsrs	r3, r3, #24
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	0f1b      	lsrs	r3, r3, #28
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001f4a:	492f      	ldr	r1, [pc, #188]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	019a      	lsls	r2, r3, #6
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	041b      	lsls	r3, r3, #16
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	071b      	lsls	r3, r3, #28
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7c:	0e1b      	lsrs	r3, r3, #24
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001f92:	491d      	ldr	r1, [pc, #116]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	019a      	lsls	r2, r3, #6
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	061b      	lsls	r3, r3, #24
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	071b      	lsls	r3, r3, #28
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001fb2:	4915      	ldr	r1, [pc, #84]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fc8:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fb0a 	bl	80005ec <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fdc:	f7fe fb06 	bl	80005ec <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e007      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ffa:	d1ef      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e043      	b.n	80020a6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 f866 	bl	8003104 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2224      	movs	r2, #36	; 0x24
 800203c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f939 	bl	80022c8 <UART_SetConfig>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e022      	b.n	80020a6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb9b 	bl	80027a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6812      	ldr	r2, [r2, #0]
 8002076:	6852      	ldr	r2, [r2, #4]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	6892      	ldr	r2, [r2, #8]
 8002088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800208c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	f042 0201 	orr.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fc22 	bl	80028e8 <UART_CheckIdleState>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_UART_DeInit>:
  * @brief DeInitializes the UART peripheral
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e02a      	b.n	8002116 <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f001 f847 	bl	8003184 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b088      	sub	sp, #32
 8002122:	af02      	add	r7, sp, #8
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4613      	mov	r3, r2
 800212c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	d175      	bne.n	800222a <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_UART_Transmit+0x2c>
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06e      	b.n	800222c <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_UART_Transmit+0x3e>
 8002158:	2302      	movs	r3, #2
 800215a:	e067      	b.n	800222c <HAL_UART_Transmit+0x10e>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2221      	movs	r2, #33	; 0x21
 800216e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002172:	f7fe fa3b 	bl	80005ec <HAL_GetTick>
 8002176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	88fa      	ldrh	r2, [r7, #6]
 8002184:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002188:	e032      	b.n	80021f0 <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f844 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e03a      	b.n	800222c <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021be:	d110      	bne.n	80021e2 <HAL_UART_Transmit+0xc4>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10c      	bne.n	80021e2 <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3302      	adds	r3, #2
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1c59      	adds	r1, r3, #1
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1c6      	bne.n	800218a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2200      	movs	r2, #0
 8002204:	2140      	movs	r1, #64	; 0x40
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f814 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e00a      	b.n	800222c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002244:	e02c      	b.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d028      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x30>
 8002254:	f7fe f9ca 	bl	80005ec <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	1ad2      	subs	r2, r2, r3
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	d31d      	bcc.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002272:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	6892      	ldr	r2, [r2, #8]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e00f      	b.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69da      	ldr	r2, [r3, #28]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	401a      	ands	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d0c3      	beq.n	8002246 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80022d4:	2310      	movs	r3, #16
 80022d6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80022d8:	2300      	movs	r3, #0
 80022da:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80022dc:	2300      	movs	r3, #0
 80022de:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	4baa      	ldr	r3, [pc, #680]	; (80025b0 <UART_SetConfig+0x2e8>)
 8002308:	400b      	ands	r3, r1
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	430b      	orrs	r3, r1
 800230e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	6852      	ldr	r2, [r2, #4]
 800231a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	6892      	ldr	r2, [r2, #8]
 800233c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a9a      	ldr	r2, [pc, #616]	; (80025b4 <UART_SetConfig+0x2ec>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d11f      	bne.n	8002390 <UART_SetConfig+0xc8>
 8002350:	4b99      	ldr	r3, [pc, #612]	; (80025b8 <UART_SetConfig+0x2f0>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b03      	cmp	r3, #3
 800235c:	f200 813e 	bhi.w	80025dc <UART_SetConfig+0x314>
 8002360:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <UART_SetConfig+0xa0>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002379 	.word	0x08002379
 800236c:	08002385 	.word	0x08002385
 8002370:	0800237f 	.word	0x0800237f
 8002374:	0800238b 	.word	0x0800238b
 8002378:	2301      	movs	r3, #1
 800237a:	75fb      	strb	r3, [r7, #23]
 800237c:	e12e      	b.n	80025dc <UART_SetConfig+0x314>
 800237e:	2302      	movs	r3, #2
 8002380:	75fb      	strb	r3, [r7, #23]
 8002382:	e12b      	b.n	80025dc <UART_SetConfig+0x314>
 8002384:	2304      	movs	r3, #4
 8002386:	75fb      	strb	r3, [r7, #23]
 8002388:	e128      	b.n	80025dc <UART_SetConfig+0x314>
 800238a:	2308      	movs	r3, #8
 800238c:	75fb      	strb	r3, [r7, #23]
 800238e:	e125      	b.n	80025dc <UART_SetConfig+0x314>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a89      	ldr	r2, [pc, #548]	; (80025bc <UART_SetConfig+0x2f4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d130      	bne.n	80023fc <UART_SetConfig+0x134>
 800239a:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <UART_SetConfig+0x2f0>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	f200 8119 	bhi.w	80025dc <UART_SetConfig+0x314>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <UART_SetConfig+0xe8>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023e5 	.word	0x080023e5
 80023b4:	080025dd 	.word	0x080025dd
 80023b8:	080025dd 	.word	0x080025dd
 80023bc:	080025dd 	.word	0x080025dd
 80023c0:	080023f1 	.word	0x080023f1
 80023c4:	080025dd 	.word	0x080025dd
 80023c8:	080025dd 	.word	0x080025dd
 80023cc:	080025dd 	.word	0x080025dd
 80023d0:	080023eb 	.word	0x080023eb
 80023d4:	080025dd 	.word	0x080025dd
 80023d8:	080025dd 	.word	0x080025dd
 80023dc:	080025dd 	.word	0x080025dd
 80023e0:	080023f7 	.word	0x080023f7
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]
 80023e8:	e0f8      	b.n	80025dc <UART_SetConfig+0x314>
 80023ea:	2302      	movs	r3, #2
 80023ec:	75fb      	strb	r3, [r7, #23]
 80023ee:	e0f5      	b.n	80025dc <UART_SetConfig+0x314>
 80023f0:	2304      	movs	r3, #4
 80023f2:	75fb      	strb	r3, [r7, #23]
 80023f4:	e0f2      	b.n	80025dc <UART_SetConfig+0x314>
 80023f6:	2308      	movs	r3, #8
 80023f8:	75fb      	strb	r3, [r7, #23]
 80023fa:	e0ef      	b.n	80025dc <UART_SetConfig+0x314>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6f      	ldr	r2, [pc, #444]	; (80025c0 <UART_SetConfig+0x2f8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d11c      	bne.n	8002440 <UART_SetConfig+0x178>
 8002406:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <UART_SetConfig+0x2f0>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002410:	2b10      	cmp	r3, #16
 8002412:	d00f      	beq.n	8002434 <UART_SetConfig+0x16c>
 8002414:	2b10      	cmp	r3, #16
 8002416:	d802      	bhi.n	800241e <UART_SetConfig+0x156>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <UART_SetConfig+0x160>
 800241c:	e0de      	b.n	80025dc <UART_SetConfig+0x314>
 800241e:	2b20      	cmp	r3, #32
 8002420:	d005      	beq.n	800242e <UART_SetConfig+0x166>
 8002422:	2b30      	cmp	r3, #48	; 0x30
 8002424:	d009      	beq.n	800243a <UART_SetConfig+0x172>
 8002426:	e0d9      	b.n	80025dc <UART_SetConfig+0x314>
 8002428:	2300      	movs	r3, #0
 800242a:	75fb      	strb	r3, [r7, #23]
 800242c:	e0d6      	b.n	80025dc <UART_SetConfig+0x314>
 800242e:	2302      	movs	r3, #2
 8002430:	75fb      	strb	r3, [r7, #23]
 8002432:	e0d3      	b.n	80025dc <UART_SetConfig+0x314>
 8002434:	2304      	movs	r3, #4
 8002436:	75fb      	strb	r3, [r7, #23]
 8002438:	e0d0      	b.n	80025dc <UART_SetConfig+0x314>
 800243a:	2308      	movs	r3, #8
 800243c:	75fb      	strb	r3, [r7, #23]
 800243e:	e0cd      	b.n	80025dc <UART_SetConfig+0x314>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a5f      	ldr	r2, [pc, #380]	; (80025c4 <UART_SetConfig+0x2fc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d11c      	bne.n	8002484 <UART_SetConfig+0x1bc>
 800244a:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <UART_SetConfig+0x2f0>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d00f      	beq.n	8002478 <UART_SetConfig+0x1b0>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d802      	bhi.n	8002462 <UART_SetConfig+0x19a>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <UART_SetConfig+0x1a4>
 8002460:	e0bc      	b.n	80025dc <UART_SetConfig+0x314>
 8002462:	2b80      	cmp	r3, #128	; 0x80
 8002464:	d005      	beq.n	8002472 <UART_SetConfig+0x1aa>
 8002466:	2bc0      	cmp	r3, #192	; 0xc0
 8002468:	d009      	beq.n	800247e <UART_SetConfig+0x1b6>
 800246a:	e0b7      	b.n	80025dc <UART_SetConfig+0x314>
 800246c:	2300      	movs	r3, #0
 800246e:	75fb      	strb	r3, [r7, #23]
 8002470:	e0b4      	b.n	80025dc <UART_SetConfig+0x314>
 8002472:	2302      	movs	r3, #2
 8002474:	75fb      	strb	r3, [r7, #23]
 8002476:	e0b1      	b.n	80025dc <UART_SetConfig+0x314>
 8002478:	2304      	movs	r3, #4
 800247a:	75fb      	strb	r3, [r7, #23]
 800247c:	e0ae      	b.n	80025dc <UART_SetConfig+0x314>
 800247e:	2308      	movs	r3, #8
 8002480:	75fb      	strb	r3, [r7, #23]
 8002482:	e0ab      	b.n	80025dc <UART_SetConfig+0x314>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4f      	ldr	r2, [pc, #316]	; (80025c8 <UART_SetConfig+0x300>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d120      	bne.n	80024d0 <UART_SetConfig+0x208>
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <UART_SetConfig+0x2f0>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249c:	d012      	beq.n	80024c4 <UART_SetConfig+0x1fc>
 800249e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a2:	d802      	bhi.n	80024aa <UART_SetConfig+0x1e2>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <UART_SetConfig+0x1f0>
 80024a8:	e098      	b.n	80025dc <UART_SetConfig+0x314>
 80024aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ae:	d006      	beq.n	80024be <UART_SetConfig+0x1f6>
 80024b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024b4:	d009      	beq.n	80024ca <UART_SetConfig+0x202>
 80024b6:	e091      	b.n	80025dc <UART_SetConfig+0x314>
 80024b8:	2300      	movs	r3, #0
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	e08e      	b.n	80025dc <UART_SetConfig+0x314>
 80024be:	2302      	movs	r3, #2
 80024c0:	75fb      	strb	r3, [r7, #23]
 80024c2:	e08b      	b.n	80025dc <UART_SetConfig+0x314>
 80024c4:	2304      	movs	r3, #4
 80024c6:	75fb      	strb	r3, [r7, #23]
 80024c8:	e088      	b.n	80025dc <UART_SetConfig+0x314>
 80024ca:	2308      	movs	r3, #8
 80024cc:	75fb      	strb	r3, [r7, #23]
 80024ce:	e085      	b.n	80025dc <UART_SetConfig+0x314>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3d      	ldr	r2, [pc, #244]	; (80025cc <UART_SetConfig+0x304>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d120      	bne.n	800251c <UART_SetConfig+0x254>
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <UART_SetConfig+0x2f0>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e8:	d012      	beq.n	8002510 <UART_SetConfig+0x248>
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ee:	d802      	bhi.n	80024f6 <UART_SetConfig+0x22e>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <UART_SetConfig+0x23c>
 80024f4:	e072      	b.n	80025dc <UART_SetConfig+0x314>
 80024f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024fa:	d006      	beq.n	800250a <UART_SetConfig+0x242>
 80024fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002500:	d009      	beq.n	8002516 <UART_SetConfig+0x24e>
 8002502:	e06b      	b.n	80025dc <UART_SetConfig+0x314>
 8002504:	2301      	movs	r3, #1
 8002506:	75fb      	strb	r3, [r7, #23]
 8002508:	e068      	b.n	80025dc <UART_SetConfig+0x314>
 800250a:	2302      	movs	r3, #2
 800250c:	75fb      	strb	r3, [r7, #23]
 800250e:	e065      	b.n	80025dc <UART_SetConfig+0x314>
 8002510:	2304      	movs	r3, #4
 8002512:	75fb      	strb	r3, [r7, #23]
 8002514:	e062      	b.n	80025dc <UART_SetConfig+0x314>
 8002516:	2308      	movs	r3, #8
 8002518:	75fb      	strb	r3, [r7, #23]
 800251a:	e05f      	b.n	80025dc <UART_SetConfig+0x314>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2b      	ldr	r2, [pc, #172]	; (80025d0 <UART_SetConfig+0x308>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d120      	bne.n	8002568 <UART_SetConfig+0x2a0>
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <UART_SetConfig+0x2f0>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002534:	d012      	beq.n	800255c <UART_SetConfig+0x294>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	d802      	bhi.n	8002542 <UART_SetConfig+0x27a>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <UART_SetConfig+0x288>
 8002540:	e04c      	b.n	80025dc <UART_SetConfig+0x314>
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	d006      	beq.n	8002556 <UART_SetConfig+0x28e>
 8002548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800254c:	d009      	beq.n	8002562 <UART_SetConfig+0x29a>
 800254e:	e045      	b.n	80025dc <UART_SetConfig+0x314>
 8002550:	2300      	movs	r3, #0
 8002552:	75fb      	strb	r3, [r7, #23]
 8002554:	e042      	b.n	80025dc <UART_SetConfig+0x314>
 8002556:	2302      	movs	r3, #2
 8002558:	75fb      	strb	r3, [r7, #23]
 800255a:	e03f      	b.n	80025dc <UART_SetConfig+0x314>
 800255c:	2304      	movs	r3, #4
 800255e:	75fb      	strb	r3, [r7, #23]
 8002560:	e03c      	b.n	80025dc <UART_SetConfig+0x314>
 8002562:	2308      	movs	r3, #8
 8002564:	75fb      	strb	r3, [r7, #23]
 8002566:	e039      	b.n	80025dc <UART_SetConfig+0x314>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <UART_SetConfig+0x30c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d135      	bne.n	80025de <UART_SetConfig+0x316>
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <UART_SetConfig+0x2f0>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800257c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002580:	d012      	beq.n	80025a8 <UART_SetConfig+0x2e0>
 8002582:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002586:	d802      	bhi.n	800258e <UART_SetConfig+0x2c6>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <UART_SetConfig+0x2d4>
 800258c:	e026      	b.n	80025dc <UART_SetConfig+0x314>
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002592:	d006      	beq.n	80025a2 <UART_SetConfig+0x2da>
 8002594:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002598:	d01e      	beq.n	80025d8 <UART_SetConfig+0x310>
 800259a:	e01f      	b.n	80025dc <UART_SetConfig+0x314>
 800259c:	2300      	movs	r3, #0
 800259e:	75fb      	strb	r3, [r7, #23]
 80025a0:	e01c      	b.n	80025dc <UART_SetConfig+0x314>
 80025a2:	2302      	movs	r3, #2
 80025a4:	75fb      	strb	r3, [r7, #23]
 80025a6:	e019      	b.n	80025dc <UART_SetConfig+0x314>
 80025a8:	2304      	movs	r3, #4
 80025aa:	75fb      	strb	r3, [r7, #23]
 80025ac:	e016      	b.n	80025dc <UART_SetConfig+0x314>
 80025ae:	bf00      	nop
 80025b0:	efff69f3 	.word	0xefff69f3
 80025b4:	40011000 	.word	0x40011000
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40004400 	.word	0x40004400
 80025c0:	40004800 	.word	0x40004800
 80025c4:	40004c00 	.word	0x40004c00
 80025c8:	40005000 	.word	0x40005000
 80025cc:	40011400 	.word	0x40011400
 80025d0:	40007800 	.word	0x40007800
 80025d4:	40007c00 	.word	0x40007c00
 80025d8:	2308      	movs	r3, #8
 80025da:	75fb      	strb	r3, [r7, #23]
 80025dc:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e6:	d16c      	bne.n	80026c2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d854      	bhi.n	8002698 <UART_SetConfig+0x3d0>
 80025ee:	a201      	add	r2, pc, #4	; (adr r2, 80025f4 <UART_SetConfig+0x32c>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002619 	.word	0x08002619
 80025f8:	08002635 	.word	0x08002635
 80025fc:	08002651 	.word	0x08002651
 8002600:	08002699 	.word	0x08002699
 8002604:	08002667 	.word	0x08002667
 8002608:	08002699 	.word	0x08002699
 800260c:	08002699 	.word	0x08002699
 8002610:	08002699 	.word	0x08002699
 8002614:	08002683 	.word	0x08002683
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002618:	f7ff f8aa 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 800261c:	4603      	mov	r3, r0
 800261e:	005a      	lsls	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	441a      	add	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	82bb      	strh	r3, [r7, #20]
      break;
 8002632:	e034      	b.n	800269e <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002634:	f7ff f8b0 	bl	8001798 <HAL_RCC_GetPCLK2Freq>
 8002638:	4603      	mov	r3, r0
 800263a:	005a      	lsls	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	441a      	add	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	fbb2 f3f3 	udiv	r3, r2, r3
 800264c:	82bb      	strh	r3, [r7, #20]
      break;
 800264e:	e026      	b.n	800269e <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	085a      	lsrs	r2, r3, #1
 8002656:	4b51      	ldr	r3, [pc, #324]	; (800279c <UART_SetConfig+0x4d4>)
 8002658:	4413      	add	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6852      	ldr	r2, [r2, #4]
 800265e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002662:	82bb      	strh	r3, [r7, #20]
      break;
 8002664:	e01b      	b.n	800269e <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002666:	f7fe ff9f 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 800266a:	4603      	mov	r3, r0
 800266c:	005a      	lsls	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	085b      	lsrs	r3, r3, #1
 8002674:	441a      	add	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	82bb      	strh	r3, [r7, #20]
      break;
 8002680:	e00d      	b.n	800269e <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	085b      	lsrs	r3, r3, #1
 8002688:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	82bb      	strh	r3, [r7, #20]
      break;
 8002696:	e002      	b.n	800269e <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	74fb      	strb	r3, [r7, #19]
      break;
 800269c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800269e:	8abb      	ldrh	r3, [r7, #20]
 80026a0:	f023 030f 	bic.w	r3, r3, #15
 80026a4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026a6:	8abb      	ldrh	r3, [r7, #20]
 80026a8:	105b      	asrs	r3, r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	897b      	ldrh	r3, [r7, #10]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	897a      	ldrh	r2, [r7, #10]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	e067      	b.n	8002792 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d861      	bhi.n	800278c <UART_SetConfig+0x4c4>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <UART_SetConfig+0x408>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	080026f5 	.word	0x080026f5
 80026d4:	08002715 	.word	0x08002715
 80026d8:	08002735 	.word	0x08002735
 80026dc:	0800278d 	.word	0x0800278d
 80026e0:	08002751 	.word	0x08002751
 80026e4:	0800278d 	.word	0x0800278d
 80026e8:	0800278d 	.word	0x0800278d
 80026ec:	0800278d 	.word	0x0800278d
 80026f0:	08002771 	.word	0x08002771
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681c      	ldr	r4, [r3, #0]
 80026f8:	f7ff f83a 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	60e3      	str	r3, [r4, #12]
      break;
 8002712:	e03e      	b.n	8002792 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681c      	ldr	r4, [r3, #0]
 8002718:	f7ff f83e 	bl	8001798 <HAL_RCC_GetPCLK2Freq>
 800271c:	4602      	mov	r2, r0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	60e3      	str	r3, [r4, #12]
      break;
 8002732:	e02e      	b.n	8002792 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0859      	lsrs	r1, r3, #1
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <UART_SetConfig+0x4d8>)
 8002740:	440b      	add	r3, r1
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	6849      	ldr	r1, [r1, #4]
 8002746:	fbb3 f3f1 	udiv	r3, r3, r1
 800274a:	b29b      	uxth	r3, r3
 800274c:	60d3      	str	r3, [r2, #12]
      break;
 800274e:	e020      	b.n	8002792 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681c      	ldr	r4, [r3, #0]
 8002754:	f7fe ff28 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	b29b      	uxth	r3, r3
 800276c:	60e3      	str	r3, [r4, #12]
      break;
 800276e:	e010      	b.n	8002792 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6852      	ldr	r2, [r2, #4]
 8002778:	0852      	lsrs	r2, r2, #1
 800277a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6852      	ldr	r2, [r2, #4]
 8002782:	fbb1 f2f2 	udiv	r2, r1, r2
 8002786:	b292      	uxth	r2, r2
 8002788:	60da      	str	r2, [r3, #12]
      break;
 800278a:	e002      	b.n	8002792 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	74fb      	strb	r3, [r7, #19]
      break;
 8002790:	bf00      	nop
    }
  }

  return ret;
 8002792:	7cfb      	ldrb	r3, [r7, #19]

}
 8002794:	4618      	mov	r0, r3
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}
 800279c:	01e84800 	.word	0x01e84800
 80027a0:	00f42400 	.word	0x00f42400

080027a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	6852      	ldr	r2, [r2, #4]
 80027c2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6852      	ldr	r2, [r2, #4]
 80027e4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	6852      	ldr	r2, [r2, #4]
 8002806:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	6852      	ldr	r2, [r2, #4]
 8002828:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6892      	ldr	r2, [r2, #8]
 800284a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002852:	430a      	orrs	r2, r1
 8002854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	6892      	ldr	r2, [r2, #8]
 800286c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002874:	430a      	orrs	r2, r1
 8002876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01a      	beq.n	80028ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	6852      	ldr	r2, [r2, #4]
 800288e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a2:	d10a      	bne.n	80028ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	6852      	ldr	r2, [r2, #4]
 80028ae:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	6852      	ldr	r2, [r2, #4]
 80028d0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  }
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028fa:	f7fd fe77 	bl	80005ec <HAL_GetTick>
 80028fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b08      	cmp	r3, #8
 800290c:	d10e      	bne.n	800292c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800290e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fc89 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e00c      	b.n	8002946 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UartDriver_init>:
 *      Author: Kowalik
 */

#include "UartDriver.h"

UartDriver_Status_TypeDef UartDriver_init(UartDriver_TypeDef* pSelf, UART_HandleTypeDef* pUartHandler, uint32_t baudRate){
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]

	if (pSelf->state != UartDriver_State_UnInitialized){
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <UartDriver_init+0x18>
		return UartDriver_Status_Errror;
 8002962:	2304      	movs	r3, #4
 8002964:	e01f      	b.n	80029a6 <UartDriver_init+0x58>
	}

	pSelf->pUartHandler = pUartHandler;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	605a      	str	r2, [r3, #4]
	pSelf->callbacksCounter = 0;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	811a      	strh	r2, [r3, #8]
	pSelf->receiveBuffer = 0;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	729a      	strb	r2, [r3, #10]

	if (pSelf->pUartHandler->gState == HAL_UART_STATE_RESET){
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <UartDriver_init+0x3c>
		return UartDriver_Status_Errror;
 8002986:	2304      	movs	r3, #4
 8002988:	e00d      	b.n	80029a6 <UartDriver_init+0x58>
	}

	pSelf->state = UartDriver_State_Initialized; //bacause UartDriver_changeBaudRate() needs state to be UartDriver_State_Initialized.
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]

	if (pSelf->pUartHandler->Init.BaudRate != baudRate){
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	429a      	cmp	r2, r3
 800299a:	d003      	beq.n	80029a4 <UartDriver_init+0x56>
		UartDriver_changeBaudRate(pSelf, baudRate);
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f805 	bl	80029ae <UartDriver_changeBaudRate>
	}

	return UartDriver_Status_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <UartDriver_changeBaudRate>:

UartDriver_Status_TypeDef UartDriver_changeBaudRate(UartDriver_TypeDef* pSelf, uint32_t baudRate){
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]

	if (pSelf->state != UartDriver_State_Initialized){
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d001      	beq.n	80029c4 <UartDriver_changeBaudRate+0x16>
		return UartDriver_Status_UnInitializedErrror;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e01e      	b.n	8002a02 <UartDriver_changeBaudRate+0x54>
	}

	pSelf->state = UartDriver_State_ChangeSettings;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_DeInit(pSelf->pUartHandler) != HAL_OK){
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fb6d 	bl	80020ae <HAL_UART_DeInit>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <UartDriver_changeBaudRate+0x30>
		return UartDriver_Status_Errror;
 80029da:	2304      	movs	r3, #4
 80029dc:	e011      	b.n	8002a02 <UartDriver_changeBaudRate+0x54>
	}

	pSelf->pUartHandler->Init.BaudRate = baudRate;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]

	if (HAL_UART_Init(pSelf->pUartHandler) != HAL_OK){
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fb0e 	bl	800200c <HAL_UART_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <UartDriver_changeBaudRate+0x4c>
		return UartDriver_Status_Errror;
 80029f6:	2304      	movs	r3, #4
 80029f8:	e003      	b.n	8002a02 <UartDriver_changeBaudRate+0x54>
	}

	pSelf->state = UartDriver_State_Initialized;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <UartDriver_sendBytes>:

UartDriver_Status_TypeDef UartDriver_sendBytes(UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint32_t bytes){
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]

	if (pSelf->state != UartDriver_State_Initialized && pSelf->state != UartDriver_State_Receiving){
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d005      	beq.n	8002a2a <UartDriver_sendBytes+0x20>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d001      	beq.n	8002a2a <UartDriver_sendBytes+0x20>
		return UartDriver_Status_UnInitializedErrror;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00d      	b.n	8002a46 <UartDriver_sendBytes+0x3c>
	}

	if (HAL_UART_Transmit(pSelf->pUartHandler, pBuffer, bytes, UART_TIMEOUT) != HAL_OK){
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6858      	ldr	r0, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	2364      	movs	r3, #100	; 0x64
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	f7ff fb72 	bl	800211e <HAL_UART_Transmit>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <UartDriver_sendBytes+0x3a>
		return UartDriver_Status_Errror;
 8002a40:	2304      	movs	r3, #4
 8002a42:	e000      	b.n	8002a46 <UartDriver_sendBytes+0x3c>
	}

	return UartDriver_Status_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08c      	sub	sp, #48	; 0x30
 8002a54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a56:	4a7f      	ldr	r2, [pc, #508]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b7c      	ldr	r3, [pc, #496]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a6e:	4a79      	ldr	r2, [pc, #484]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a70:	4b78      	ldr	r3, [pc, #480]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	4a73      	ldr	r2, [pc, #460]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a88:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	4a6d      	ldr	r2, [pc, #436]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002aa0:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b6a      	ldr	r3, [pc, #424]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab6:	4a67      	ldr	r2, [pc, #412]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f043 0308 	orr.w	r3, r3, #8
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ace:	4a61      	ldr	r2, [pc, #388]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002ad0:	4b60      	ldr	r3, [pc, #384]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <MX_GPIO_Init+0x204>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002aec:	485a      	ldr	r0, [pc, #360]	; (8002c58 <MX_GPIO_Init+0x208>)
 8002aee:	f7fe f997 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2140      	movs	r1, #64	; 0x40
 8002af6:	4859      	ldr	r0, [pc, #356]	; (8002c5c <MX_GPIO_Init+0x20c>)
 8002af8:	f7fe f992 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b02:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <MX_GPIO_Init+0x210>)
 8002b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4854      	ldr	r0, [pc, #336]	; (8002c64 <MX_GPIO_Init+0x214>)
 8002b12:	f7fd fecf 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002b16:	2332      	movs	r3, #50	; 0x32
 8002b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b26:	230b      	movs	r3, #11
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	484c      	ldr	r0, [pc, #304]	; (8002c64 <MX_GPIO_Init+0x214>)
 8002b32:	f7fd febf 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002b36:	2386      	movs	r3, #134	; 0x86
 8002b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b46:	230b      	movs	r3, #11
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4845      	ldr	r0, [pc, #276]	; (8002c68 <MX_GPIO_Init+0x218>)
 8002b52:	f7fd feaf 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b64:	2303      	movs	r3, #3
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b68:	230b      	movs	r3, #11
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	4619      	mov	r1, r3
 8002b72:	4839      	ldr	r0, [pc, #228]	; (8002c58 <MX_GPIO_Init+0x208>)
 8002b74:	f7fd fe9e 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002b78:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4831      	ldr	r0, [pc, #196]	; (8002c58 <MX_GPIO_Init+0x208>)
 8002b92:	f7fd fe8f 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ba8:	2307      	movs	r3, #7
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	482e      	ldr	r0, [pc, #184]	; (8002c6c <MX_GPIO_Init+0x21c>)
 8002bb4:	f7fd fe7e 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002bb8:	2340      	movs	r3, #64	; 0x40
 8002bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4823      	ldr	r0, [pc, #140]	; (8002c5c <MX_GPIO_Init+0x20c>)
 8002bd0:	f7fd fe70 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	481d      	ldr	r0, [pc, #116]	; (8002c5c <MX_GPIO_Init+0x20c>)
 8002be8:	f7fd fe64 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002bec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bfe:	230a      	movs	r3, #10
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f107 031c 	add.w	r3, r7, #28
 8002c06:	4619      	mov	r1, r3
 8002c08:	4817      	ldr	r0, [pc, #92]	; (8002c68 <MX_GPIO_Init+0x218>)
 8002c0a:	f7fd fe53 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 031c 	add.w	r3, r7, #28
 8002c20:	4619      	mov	r1, r3
 8002c22:	4811      	ldr	r0, [pc, #68]	; (8002c68 <MX_GPIO_Init+0x218>)
 8002c24:	f7fd fe46 	bl	80008b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002c28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c36:	2303      	movs	r3, #3
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c3a:	230b      	movs	r3, #11
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	; (8002c5c <MX_GPIO_Init+0x20c>)
 8002c46:	f7fd fe35 	bl	80008b4 <HAL_GPIO_Init>

}
 8002c4a:	bf00      	nop
 8002c4c:	3730      	adds	r7, #48	; 0x30
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40021800 	.word	0x40021800
 8002c60:	10110000 	.word	0x10110000
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020c00 	.word	0x40020c00

08002c70 <LedDriver_init>:
 *      Author: Kowalik
 */

#include "led_driver.h"

LedDriver_Status_TypeDef LedDriver_init(LedDriver_TypeDef* pSelf, LedDriver_Port_TypeDef* port, LedDriver_Pin_TypeDef* pin){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
	if (pSelf->state != LedDriver_State_UnInitialized){
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <LedDriver_init+0x18>
		return LedDriver_Status_Errror;
 8002c84:	2302      	movs	r3, #2
 8002c86:	e01b      	b.n	8002cc0 <LedDriver_init+0x50>
	}

	pSelf->port				= port;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	605a      	str	r2, [r3, #4]
	pSelf->pin				= pin;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	609a      	str	r2, [r3, #8]
	pSelf->onTimeMs			= 0;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
	pSelf->offTimeMs		= 0;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
	pSelf->onOffTimeCounter	= 0;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(pSelf->port, *(pSelf->pin), GPIO_PIN_SET);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6858      	ldr	r0, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f7fe f8b4 	bl	8000e20 <HAL_GPIO_WritePin>

	pSelf->state = LedDriver_State_Off;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 8002cbe:	2300      	movs	r3, #0

}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <LedDriver_OnLed>:

LedDriver_Status_TypeDef LedDriver_OnLed(LedDriver_TypeDef* pSelf){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	if (pSelf->state == LedDriver_State_UnInitialized){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <LedDriver_OnLed+0x14>
		return LedDriver_Status_UnInitializedErrror;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e00c      	b.n	8002cf6 <LedDriver_OnLed+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *(pSelf->pin), GPIO_PIN_RESET);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6858      	ldr	r0, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fe f899 	bl	8000e20 <HAL_GPIO_WritePin>

	pSelf->state = LedDriver_State_OnStady;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 8002cf4:	2300      	movs	r3, #0

}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <LedDriver_OffLed>:

LedDriver_Status_TypeDef LedDriver_OffLed(LedDriver_TypeDef* pSelf){
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	if (pSelf->state == LedDriver_State_UnInitialized){
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <LedDriver_OffLed+0x14>
		return LedDriver_Status_UnInitializedErrror;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00c      	b.n	8002d2c <LedDriver_OffLed+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *(pSelf->pin), GPIO_PIN_SET);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6858      	ldr	r0, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fe f87e 	bl	8000e20 <HAL_GPIO_WritePin>

	pSelf->state = LedDriver_State_Off;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d3a:	f7fd fc05 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d3e:	f000 f849 	bl	8002dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d42:	f7ff fe85 	bl	8002a50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002d46:	f000 f9a9 	bl	800309c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LedDriver_Pin_TypeDef ledDebug2Pin = LD2_Pin;
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	80fb      	strh	r3, [r7, #6]
  LedDriver_init(&ledDriver, (LedDriver_Port_TypeDef*)LD2_GPIO_Port, &ledDebug2Pin);
 8002d4e:	1dbb      	adds	r3, r7, #6
 8002d50:	461a      	mov	r2, r3
 8002d52:	491b      	ldr	r1, [pc, #108]	; (8002dc0 <main+0x8c>)
 8002d54:	481b      	ldr	r0, [pc, #108]	; (8002dc4 <main+0x90>)
 8002d56:	f7ff ff8b 	bl	8002c70 <LedDriver_init>

  LedDriver_OnLed(&ledDriver);
 8002d5a:	481a      	ldr	r0, [pc, #104]	; (8002dc4 <main+0x90>)
 8002d5c:	f7ff ffb4 	bl	8002cc8 <LedDriver_OnLed>
  HAL_Delay(500);
 8002d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d64:	f7fd fc4e 	bl	8000604 <HAL_Delay>
  LedDriver_OffLed(&ledDriver);
 8002d68:	4816      	ldr	r0, [pc, #88]	; (8002dc4 <main+0x90>)
 8002d6a:	f7ff ffc8 	bl	8002cfe <LedDriver_OffLed>

  uint8_t buffer[] = {1, 2, 3, 4};
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <main+0x94>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	603b      	str	r3, [r7, #0]

  UartDriver_init(&uartDriver, &huart1, 9600);
 8002d74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d78:	4914      	ldr	r1, [pc, #80]	; (8002dcc <main+0x98>)
 8002d7a:	4815      	ldr	r0, [pc, #84]	; (8002dd0 <main+0x9c>)
 8002d7c:	f7ff fde7 	bl	800294e <UartDriver_init>
  UartDriver_sendBytes(&uartDriver, buffer, 4);
 8002d80:	463b      	mov	r3, r7
 8002d82:	2204      	movs	r2, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4812      	ldr	r0, [pc, #72]	; (8002dd0 <main+0x9c>)
 8002d88:	f7ff fe3f 	bl	8002a0a <UartDriver_sendBytes>
  UartDriver_changeBaudRate(&uartDriver, 38400);
 8002d8c:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 8002d90:	480f      	ldr	r0, [pc, #60]	; (8002dd0 <main+0x9c>)
 8002d92:	f7ff fe0c 	bl	80029ae <UartDriver_changeBaudRate>
  UartDriver_sendBytes(&uartDriver, buffer, 4);
 8002d96:	463b      	mov	r3, r7
 8002d98:	2204      	movs	r2, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480c      	ldr	r0, [pc, #48]	; (8002dd0 <main+0x9c>)
 8002d9e:	f7ff fe34 	bl	8002a0a <UartDriver_sendBytes>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LedDriver_OnLed(&ledDriver);
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <main+0x90>)
 8002da4:	f7ff ff90 	bl	8002cc8 <LedDriver_OnLed>
	  HAL_Delay(500);
 8002da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dac:	f7fd fc2a 	bl	8000604 <HAL_Delay>
	  LedDriver_OffLed(&ledDriver);
 8002db0:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <main+0x90>)
 8002db2:	f7ff ffa4 	bl	8002cfe <LedDriver_OffLed>
	  HAL_Delay(100);
 8002db6:	2064      	movs	r0, #100	; 0x64
 8002db8:	f7fd fc24 	bl	8000604 <HAL_Delay>
	  LedDriver_OnLed(&ledDriver);
 8002dbc:	e7f1      	b.n	8002da2 <main+0x6e>
 8002dbe:	bf00      	nop
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	20000060 	.word	0x20000060
 8002dc8:	08003274 	.word	0x08003274
 8002dcc:	20000078 	.word	0x20000078
 8002dd0:	2000002c 	.word	0x2000002c

08002dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0b8      	sub	sp, #224	; 0xe0
 8002dd8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4a47      	ldr	r2, [pc, #284]	; (8002ef8 <SystemClock_Config+0x124>)
 8002ddc:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <SystemClock_Config+0x124>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <SystemClock_Config+0x124>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002df2:	4a42      	ldr	r2, [pc, #264]	; (8002efc <SystemClock_Config+0x128>)
 8002df4:	4b41      	ldr	r3, [pc, #260]	; (8002efc <SystemClock_Config+0x128>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <SystemClock_Config+0x128>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002e32:	2360      	movs	r3, #96	; 0x60
 8002e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe f853 	bl	8000ef4 <HAL_RCC_OscConfig>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <SystemClock_Config+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e54:	21aa      	movs	r1, #170	; 0xaa
 8002e56:	482a      	ldr	r0, [pc, #168]	; (8002f00 <SystemClock_Config+0x12c>)
 8002e58:	f000 f856 	bl	8002f08 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e5c:	f7fd fffa 	bl	8000e54 <HAL_PWREx_EnableOverDrive>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002e66:	21b1      	movs	r1, #177	; 0xb1
 8002e68:	4825      	ldr	r0, [pc, #148]	; (8002f00 <SystemClock_Config+0x12c>)
 8002e6a:	f000 f84d 	bl	8002f08 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e6e:	230f      	movs	r3, #15
 8002e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e92:	2103      	movs	r1, #3
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fa9f 	bl	80013d8 <HAL_RCC_ClockConfig>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <SystemClock_Config+0xd4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ea0:	21bf      	movs	r1, #191	; 0xbf
 8002ea2:	4817      	ldr	r0, [pc, #92]	; (8002f00 <SystemClock_Config+0x12c>)
 8002ea4:	f000 f830 	bl	8002f08 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ea8:	2340      	movs	r3, #64	; 0x40
 8002eaa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eac:	2300      	movs	r3, #0
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb0:	f107 0308 	add.w	r3, r7, #8
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fc83 	bl	80017c0 <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <SystemClock_Config+0xf4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002ec0:	21c6      	movs	r1, #198	; 0xc6
 8002ec2:	480f      	ldr	r0, [pc, #60]	; (8002f00 <SystemClock_Config+0x12c>)
 8002ec4:	f000 f820 	bl	8002f08 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002ec8:	f7fe fc46 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <SystemClock_Config+0x130>)
 8002ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fcb5 	bl	8000846 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002edc:	2004      	movs	r0, #4
 8002ede:	f7fd fcbf 	bl	8000860 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eea:	f7fd fc82 	bl	80007f2 <HAL_NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	37e0      	adds	r7, #224	; 0xe0
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000
 8002f00:	08003278 	.word	0x08003278
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002f12:	e7fe      	b.n	8002f12 <_Error_Handler+0xa>

08002f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4a28      	ldr	r2, [pc, #160]	; (8002fbc <HAL_MspInit+0xa8>)
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_MspInit+0xa8>)
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_MspInit+0xa8>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_MspInit+0xa8>)
 8002f34:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <HAL_MspInit+0xa8>)
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <HAL_MspInit+0xa8>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f7fd fc46 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	f06f 000b 	mvn.w	r0, #11
 8002f58:	f7fd fc4b 	bl	80007f2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	f06f 000a 	mvn.w	r0, #10
 8002f64:	f7fd fc45 	bl	80007f2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f06f 0009 	mvn.w	r0, #9
 8002f70:	f7fd fc3f 	bl	80007f2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002f74:	2200      	movs	r2, #0
 8002f76:	2100      	movs	r1, #0
 8002f78:	f06f 0004 	mvn.w	r0, #4
 8002f7c:	f7fd fc39 	bl	80007f2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	f06f 0003 	mvn.w	r0, #3
 8002f88:	f7fd fc33 	bl	80007f2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f06f 0001 	mvn.w	r0, #1
 8002f94:	f7fd fc2d 	bl	80007f2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f7fd fc27 	bl	80007f2 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2005      	movs	r0, #5
 8002faa:	f7fd fc22 	bl	80007f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002fae:	2005      	movs	r0, #5
 8002fb0:	f7fd fc3b 	bl	800082a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800

08002fc0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd2:	e7fe      	b.n	8002fd2 <HardFault_Handler+0x4>

08002fd4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd8:	e7fe      	b.n	8002fd8 <MemManage_Handler+0x4>

08002fda <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fde:	e7fe      	b.n	8002fde <BusFault_Handler+0x4>

08002fe0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe4:	e7fe      	b.n	8002fe4 <UsageFault_Handler+0x4>

08002fe6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003014:	f7fd fad6 	bl	80005c4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003018:	f7fd fc3e 	bl	8000898 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}

08003020 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003034:	4a15      	ldr	r2, [pc, #84]	; (800308c <SystemInit+0x5c>)
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <SystemInit+0x5c>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <SystemInit+0x60>)
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <SystemInit+0x60>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <SystemInit+0x60>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003056:	490e      	ldr	r1, [pc, #56]	; (8003090 <SystemInit+0x60>)
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <SystemInit+0x60>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <SystemInit+0x64>)
 800305e:	4013      	ands	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <SystemInit+0x60>)
 8003064:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <SystemInit+0x68>)
 8003066:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003068:	4a09      	ldr	r2, [pc, #36]	; (8003090 <SystemInit+0x60>)
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <SystemInit+0x60>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003072:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SystemInit+0x60>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <SystemInit+0x5c>)
 800307c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003080:	609a      	str	r2, [r3, #8]
#endif
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00
 8003090:	40023800 	.word	0x40023800
 8003094:	fef6ffff 	.word	0xfef6ffff
 8003098:	24003010 	.word	0x24003010

0800309c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80030a0:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <MX_USART1_UART_Init+0x60>)
 80030a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030c2:	220c      	movs	r2, #12
 80030c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030de:	4806      	ldr	r0, [pc, #24]	; (80030f8 <MX_USART1_UART_Init+0x5c>)
 80030e0:	f7fe ff94 	bl	800200c <HAL_UART_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <MX_USART1_UART_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80030ea:	2144      	movs	r1, #68	; 0x44
 80030ec:	4804      	ldr	r0, [pc, #16]	; (8003100 <MX_USART1_UART_Init+0x64>)
 80030ee:	f7ff ff0b 	bl	8002f08 <_Error_Handler>
  }

}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000078 	.word	0x20000078
 80030fc:	40011000 	.word	0x40011000
 8003100:	08003288 	.word	0x08003288

08003104 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <HAL_UART_MspInit+0x74>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d12c      	bne.n	8003170 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003116:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_UART_MspInit+0x78>)
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_UART_MspInit+0x78>)
 800311a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311c:	f043 0310 	orr.w	r3, r3, #16
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_UART_MspInit+0x78>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003140:	2304      	movs	r3, #4
 8003142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	4619      	mov	r1, r3
 800314a:	480d      	ldr	r0, [pc, #52]	; (8003180 <HAL_UART_MspInit+0x7c>)
 800314c:	f7fd fbb2 	bl	80008b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003150:	2340      	movs	r3, #64	; 0x40
 8003152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315c:	2303      	movs	r3, #3
 800315e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003160:	2307      	movs	r3, #7
 8003162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4619      	mov	r1, r3
 800316a:	4805      	ldr	r0, [pc, #20]	; (8003180 <HAL_UART_MspInit+0x7c>)
 800316c:	f7fd fba2 	bl	80008b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003170:	bf00      	nop
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40011000 	.word	0x40011000
 800317c:	40023800 	.word	0x40023800
 8003180:	40020400 	.word	0x40020400

08003184 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_UART_MspDeInit+0x30>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10a      	bne.n	80031ac <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003196:	4a08      	ldr	r2, [pc, #32]	; (80031b8 <HAL_UART_MspDeInit+0x34>)
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <HAL_UART_MspDeInit+0x34>)
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f023 0310 	bic.w	r3, r3, #16
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_6);
 80031a2:	f248 0140 	movw	r1, #32832	; 0x8040
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <HAL_UART_MspDeInit+0x38>)
 80031a8:	f7fd fd2e 	bl	8000c08 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40020400 	.word	0x40020400

080031c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031c6:	e003      	b.n	80031d0 <LoopCopyDataInit>

080031c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031ce:	3104      	adds	r1, #4

080031d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031d0:	480b      	ldr	r0, [pc, #44]	; (8003200 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031d8:	d3f6      	bcc.n	80031c8 <CopyDataInit>
  ldr  r2, =_sbss
 80031da:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80031dc:	e002      	b.n	80031e4 <LoopFillZerobss>

080031de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031e0:	f842 3b04 	str.w	r3, [r2], #4

080031e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80031e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031e8:	d3f9      	bcc.n	80031de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ea:	f7ff ff21 	bl	8003030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ee:	f000 f811 	bl	8003214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f2:	f7ff fd9f 	bl	8002d34 <main>
  bx  lr    
 80031f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031f8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80031fc:	080032c0 	.word	0x080032c0
  ldr  r0, =_sdata
 8003200:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003204:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003208:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800320c:	200000e8 	.word	0x200000e8

08003210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003210:	e7fe      	b.n	8003210 <ADC_IRQHandler>
	...

08003214 <__libc_init_array>:
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	4e0d      	ldr	r6, [pc, #52]	; (800324c <__libc_init_array+0x38>)
 8003218:	4c0d      	ldr	r4, [pc, #52]	; (8003250 <__libc_init_array+0x3c>)
 800321a:	1ba4      	subs	r4, r4, r6
 800321c:	10a4      	asrs	r4, r4, #2
 800321e:	2500      	movs	r5, #0
 8003220:	42a5      	cmp	r5, r4
 8003222:	d109      	bne.n	8003238 <__libc_init_array+0x24>
 8003224:	4e0b      	ldr	r6, [pc, #44]	; (8003254 <__libc_init_array+0x40>)
 8003226:	4c0c      	ldr	r4, [pc, #48]	; (8003258 <__libc_init_array+0x44>)
 8003228:	f000 f818 	bl	800325c <_init>
 800322c:	1ba4      	subs	r4, r4, r6
 800322e:	10a4      	asrs	r4, r4, #2
 8003230:	2500      	movs	r5, #0
 8003232:	42a5      	cmp	r5, r4
 8003234:	d105      	bne.n	8003242 <__libc_init_array+0x2e>
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800323c:	4798      	blx	r3
 800323e:	3501      	adds	r5, #1
 8003240:	e7ee      	b.n	8003220 <__libc_init_array+0xc>
 8003242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003246:	4798      	blx	r3
 8003248:	3501      	adds	r5, #1
 800324a:	e7f2      	b.n	8003232 <__libc_init_array+0x1e>
 800324c:	080032b8 	.word	0x080032b8
 8003250:	080032b8 	.word	0x080032b8
 8003254:	080032b8 	.word	0x080032b8
 8003258:	080032bc 	.word	0x080032bc

0800325c <_init>:
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325e:	bf00      	nop
 8003260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003262:	bc08      	pop	{r3}
 8003264:	469e      	mov	lr, r3
 8003266:	4770      	bx	lr

08003268 <_fini>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	bf00      	nop
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr
