
DataLoggerGPS_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005870  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08005a70  08005a70  00015a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08005d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002f4  200001e4  08005ee4  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004d8  08005ee4  000204d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000140a2  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000027ef  00000000  00000000  000342b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000908  00000000  00000000  00036aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007f0  00000000  00000000  000373b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002771c  00000000  00000000  00037ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009671  00000000  00000000  0005f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e98c6  00000000  00000000  0006892d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  001521f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002914  00000000  00000000  00152270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08005a58 	.word	0x08005a58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08005a58 	.word	0x08005a58

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b97a 	b.w	800061c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	468c      	mov	ip, r1
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	9e08      	ldr	r6, [sp, #32]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d151      	bne.n	80003f4 <__udivmoddi4+0xb4>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d96d      	bls.n	8000432 <__udivmoddi4+0xf2>
 8000356:	fab2 fe82 	clz	lr, r2
 800035a:	f1be 0f00 	cmp.w	lr, #0
 800035e:	d00b      	beq.n	8000378 <__udivmoddi4+0x38>
 8000360:	f1ce 0c20 	rsb	ip, lr, #32
 8000364:	fa01 f50e 	lsl.w	r5, r1, lr
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000370:	ea4c 0c05 	orr.w	ip, ip, r5
 8000374:	fa00 f40e 	lsl.w	r4, r0, lr
 8000378:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	fbbc f8fa 	udiv	r8, ip, sl
 8000382:	fa1f f987 	uxth.w	r9, r7
 8000386:	fb0a cc18 	mls	ip, sl, r8, ip
 800038a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800038e:	fb08 f309 	mul.w	r3, r8, r9
 8000392:	42ab      	cmp	r3, r5
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x6c>
 8000396:	19ed      	adds	r5, r5, r7
 8000398:	f108 32ff 	add.w	r2, r8, #4294967295
 800039c:	f080 8123 	bcs.w	80005e6 <__udivmoddi4+0x2a6>
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	f240 8120 	bls.w	80005e6 <__udivmoddi4+0x2a6>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	443d      	add	r5, r7
 80003ac:	1aed      	subs	r5, r5, r3
 80003ae:	b2a4      	uxth	r4, r4
 80003b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80003b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb00 f909 	mul.w	r9, r0, r9
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x98>
 80003c4:	19e4      	adds	r4, r4, r7
 80003c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ca:	f080 810a 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8107 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 0409 	sub.w	r4, r4, r9
 80003dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e0:	2100      	movs	r1, #0
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d061      	beq.n	80004aa <__udivmoddi4+0x16a>
 80003e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ea:	2300      	movs	r3, #0
 80003ec:	6034      	str	r4, [r6, #0]
 80003ee:	6073      	str	r3, [r6, #4]
 80003f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0xc8>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d054      	beq.n	80004a6 <__udivmoddi4+0x166>
 80003fc:	2100      	movs	r1, #0
 80003fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000402:	4608      	mov	r0, r1
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	fab3 f183 	clz	r1, r3
 800040c:	2900      	cmp	r1, #0
 800040e:	f040 808e 	bne.w	800052e <__udivmoddi4+0x1ee>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xdc>
 8000416:	4282      	cmp	r2, r0
 8000418:	f200 80fa 	bhi.w	8000610 <__udivmoddi4+0x2d0>
 800041c:	1a84      	subs	r4, r0, r2
 800041e:	eb65 0503 	sbc.w	r5, r5, r3
 8000422:	2001      	movs	r0, #1
 8000424:	46ac      	mov	ip, r5
 8000426:	2e00      	cmp	r6, #0
 8000428:	d03f      	beq.n	80004aa <__udivmoddi4+0x16a>
 800042a:	e886 1010 	stmia.w	r6, {r4, ip}
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	b912      	cbnz	r2, 800043a <__udivmoddi4+0xfa>
 8000434:	2701      	movs	r7, #1
 8000436:	fbb7 f7f2 	udiv	r7, r7, r2
 800043a:	fab7 fe87 	clz	lr, r7
 800043e:	f1be 0f00 	cmp.w	lr, #0
 8000442:	d134      	bne.n	80004ae <__udivmoddi4+0x16e>
 8000444:	1beb      	subs	r3, r5, r7
 8000446:	0c3a      	lsrs	r2, r7, #16
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	2101      	movs	r1, #1
 800044e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000452:	0c25      	lsrs	r5, r4, #16
 8000454:	fb02 3318 	mls	r3, r2, r8, r3
 8000458:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800045c:	fb0c f308 	mul.w	r3, ip, r8
 8000460:	42ab      	cmp	r3, r5
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x134>
 8000464:	19ed      	adds	r5, r5, r7
 8000466:	f108 30ff 	add.w	r0, r8, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x132>
 800046c:	42ab      	cmp	r3, r5
 800046e:	f200 80d1 	bhi.w	8000614 <__udivmoddi4+0x2d4>
 8000472:	4680      	mov	r8, r0
 8000474:	1aed      	subs	r5, r5, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb5 f0f2 	udiv	r0, r5, r2
 800047c:	fb02 5510 	mls	r5, r2, r0, r5
 8000480:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000484:	fb0c fc00 	mul.w	ip, ip, r0
 8000488:	45a4      	cmp	ip, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x15c>
 800048c:	19e4      	adds	r4, r4, r7
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x15a>
 8000494:	45a4      	cmp	ip, r4
 8000496:	f200 80b8 	bhi.w	800060a <__udivmoddi4+0x2ca>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a4:	e79d      	b.n	80003e2 <__udivmoddi4+0xa2>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1ce 0420 	rsb	r4, lr, #32
 80004b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80004b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80004ba:	fa20 f804 	lsr.w	r8, r0, r4
 80004be:	0c3a      	lsrs	r2, r7, #16
 80004c0:	fa25 f404 	lsr.w	r4, r5, r4
 80004c4:	ea48 0803 	orr.w	r8, r8, r3
 80004c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004d0:	fb02 4411 	mls	r4, r2, r1, r4
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004dc:	fb01 f30c 	mul.w	r3, r1, ip
 80004e0:	42ab      	cmp	r3, r5
 80004e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004e6:	d909      	bls.n	80004fc <__udivmoddi4+0x1bc>
 80004e8:	19ed      	adds	r5, r5, r7
 80004ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ee:	f080 808a 	bcs.w	8000606 <__udivmoddi4+0x2c6>
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	f240 8087 	bls.w	8000606 <__udivmoddi4+0x2c6>
 80004f8:	3902      	subs	r1, #2
 80004fa:	443d      	add	r5, r7
 80004fc:	1aeb      	subs	r3, r5, r3
 80004fe:	fa1f f588 	uxth.w	r5, r8
 8000502:	fbb3 f0f2 	udiv	r0, r3, r2
 8000506:	fb02 3310 	mls	r3, r2, r0, r3
 800050a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800050e:	fb00 f30c 	mul.w	r3, r0, ip
 8000512:	42ab      	cmp	r3, r5
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x1e6>
 8000516:	19ed      	adds	r5, r5, r7
 8000518:	f100 38ff 	add.w	r8, r0, #4294967295
 800051c:	d26f      	bcs.n	80005fe <__udivmoddi4+0x2be>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d96d      	bls.n	80005fe <__udivmoddi4+0x2be>
 8000522:	3802      	subs	r0, #2
 8000524:	443d      	add	r5, r7
 8000526:	1aeb      	subs	r3, r5, r3
 8000528:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800052c:	e78f      	b.n	800044e <__udivmoddi4+0x10e>
 800052e:	f1c1 0720 	rsb	r7, r1, #32
 8000532:	fa22 f807 	lsr.w	r8, r2, r7
 8000536:	408b      	lsls	r3, r1
 8000538:	fa05 f401 	lsl.w	r4, r5, r1
 800053c:	ea48 0303 	orr.w	r3, r8, r3
 8000540:	fa20 fe07 	lsr.w	lr, r0, r7
 8000544:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000548:	40fd      	lsrs	r5, r7
 800054a:	ea4e 0e04 	orr.w	lr, lr, r4
 800054e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000552:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000556:	fb0c 5519 	mls	r5, ip, r9, r5
 800055a:	fa1f f883 	uxth.w	r8, r3
 800055e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000562:	fb09 f408 	mul.w	r4, r9, r8
 8000566:	42ac      	cmp	r4, r5
 8000568:	fa02 f201 	lsl.w	r2, r2, r1
 800056c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000570:	d908      	bls.n	8000584 <__udivmoddi4+0x244>
 8000572:	18ed      	adds	r5, r5, r3
 8000574:	f109 30ff 	add.w	r0, r9, #4294967295
 8000578:	d243      	bcs.n	8000602 <__udivmoddi4+0x2c2>
 800057a:	42ac      	cmp	r4, r5
 800057c:	d941      	bls.n	8000602 <__udivmoddi4+0x2c2>
 800057e:	f1a9 0902 	sub.w	r9, r9, #2
 8000582:	441d      	add	r5, r3
 8000584:	1b2d      	subs	r5, r5, r4
 8000586:	fa1f fe8e 	uxth.w	lr, lr
 800058a:	fbb5 f0fc 	udiv	r0, r5, ip
 800058e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000592:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000596:	fb00 f808 	mul.w	r8, r0, r8
 800059a:	45a0      	cmp	r8, r4
 800059c:	d907      	bls.n	80005ae <__udivmoddi4+0x26e>
 800059e:	18e4      	adds	r4, r4, r3
 80005a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80005a4:	d229      	bcs.n	80005fa <__udivmoddi4+0x2ba>
 80005a6:	45a0      	cmp	r8, r4
 80005a8:	d927      	bls.n	80005fa <__udivmoddi4+0x2ba>
 80005aa:	3802      	subs	r0, #2
 80005ac:	441c      	add	r4, r3
 80005ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005b2:	eba4 0408 	sub.w	r4, r4, r8
 80005b6:	fba0 8902 	umull	r8, r9, r0, r2
 80005ba:	454c      	cmp	r4, r9
 80005bc:	46c6      	mov	lr, r8
 80005be:	464d      	mov	r5, r9
 80005c0:	d315      	bcc.n	80005ee <__udivmoddi4+0x2ae>
 80005c2:	d012      	beq.n	80005ea <__udivmoddi4+0x2aa>
 80005c4:	b156      	cbz	r6, 80005dc <__udivmoddi4+0x29c>
 80005c6:	ebba 030e 	subs.w	r3, sl, lr
 80005ca:	eb64 0405 	sbc.w	r4, r4, r5
 80005ce:	fa04 f707 	lsl.w	r7, r4, r7
 80005d2:	40cb      	lsrs	r3, r1
 80005d4:	431f      	orrs	r7, r3
 80005d6:	40cc      	lsrs	r4, r1
 80005d8:	6037      	str	r7, [r6, #0]
 80005da:	6074      	str	r4, [r6, #4]
 80005dc:	2100      	movs	r1, #0
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	4618      	mov	r0, r3
 80005e4:	e6f8      	b.n	80003d8 <__udivmoddi4+0x98>
 80005e6:	4690      	mov	r8, r2
 80005e8:	e6e0      	b.n	80003ac <__udivmoddi4+0x6c>
 80005ea:	45c2      	cmp	sl, r8
 80005ec:	d2ea      	bcs.n	80005c4 <__udivmoddi4+0x284>
 80005ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80005f2:	eb69 0503 	sbc.w	r5, r9, r3
 80005f6:	3801      	subs	r0, #1
 80005f8:	e7e4      	b.n	80005c4 <__udivmoddi4+0x284>
 80005fa:	4628      	mov	r0, r5
 80005fc:	e7d7      	b.n	80005ae <__udivmoddi4+0x26e>
 80005fe:	4640      	mov	r0, r8
 8000600:	e791      	b.n	8000526 <__udivmoddi4+0x1e6>
 8000602:	4681      	mov	r9, r0
 8000604:	e7be      	b.n	8000584 <__udivmoddi4+0x244>
 8000606:	4601      	mov	r1, r0
 8000608:	e778      	b.n	80004fc <__udivmoddi4+0x1bc>
 800060a:	3802      	subs	r0, #2
 800060c:	443c      	add	r4, r7
 800060e:	e745      	b.n	800049c <__udivmoddi4+0x15c>
 8000610:	4608      	mov	r0, r1
 8000612:	e708      	b.n	8000426 <__udivmoddi4+0xe6>
 8000614:	f1a8 0802 	sub.w	r8, r8, #2
 8000618:	443d      	add	r5, r7
 800061a:	e72b      	b.n	8000474 <__udivmoddi4+0x134>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f95f 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f806 	bl	800063c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f004 f844 	bl	80046bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x54>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x58>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	fbb3 f3f1 	udiv	r3, r3, r1
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f987 	bl	800096e <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d80a      	bhi.n	8000686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f941 	bl	80008fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_InitTick+0x5c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000010 	.word	0x20000010
 8000694:	20000004 	.word	0x20000004
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x20>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_IncTick+0x24>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000004 	.word	0x20000004
 80006c0:	2000020c 	.word	0x2000020c

080006c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_GetTick+0x14>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2000020c 	.word	0x2000020c

080006dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e4:	f7ff ffee 	bl	80006c4 <HAL_GetTick>
 80006e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f4:	d005      	beq.n	8000702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_Delay+0x40>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000702:	bf00      	nop
 8000704:	f7ff ffde 	bl	80006c4 <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	1ad2      	subs	r2, r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3f7      	bcc.n	8000704 <HAL_Delay+0x28>
  {
  }
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000004 	.word	0x20000004

08000720 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <NVIC_SetPriorityGrouping+0x40>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <NVIC_SetPriorityGrouping+0x44>)
 800074a:	4313      	orrs	r3, r2
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <NVIC_SetPriorityGrouping+0x40>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	05fa0000 	.word	0x05fa0000

08000768 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800078e:	4909      	ldr	r1, [pc, #36]	; (80007b4 <NVIC_EnableIRQ+0x30>)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	095b      	lsrs	r3, r3, #5
 8000796:	79fa      	ldrb	r2, [r7, #7]
 8000798:	f002 021f 	and.w	r2, r2, #31
 800079c:	2001      	movs	r0, #1
 800079e:	fa00 f202 	lsl.w	r2, r0, r2
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007c2:	4909      	ldr	r1, [pc, #36]	; (80007e8 <NVIC_DisableIRQ+0x30>)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	095b      	lsrs	r3, r3, #5
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	f002 021f 	and.w	r2, r2, #31
 80007d0:	2001      	movs	r0, #1
 80007d2:	fa00 f202 	lsl.w	r2, r0, r2
 80007d6:	3320      	adds	r3, #32
 80007d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100

080007ec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	6039      	str	r1, [r7, #0]
 80007f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da0b      	bge.n	8000818 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000800:	490d      	ldr	r1, [pc, #52]	; (8000838 <NVIC_SetPriority+0x4c>)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	3b04      	subs	r3, #4
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000816:	e009      	b.n	800082c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	4908      	ldr	r1, [pc, #32]	; (800083c <NVIC_SetPriority+0x50>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000ed00 	.word	0xe000ed00
 800083c:	e000e100 	.word	0xe000e100

08000840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f1c3 0307 	rsb	r3, r3, #7
 800085a:	2b04      	cmp	r3, #4
 800085c:	bf28      	it	cs
 800085e:	2304      	movcs	r3, #4
 8000860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3304      	adds	r3, #4
 8000866:	2b06      	cmp	r3, #6
 8000868:	d902      	bls.n	8000870 <NVIC_EncodePriority+0x30>
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3b03      	subs	r3, #3
 800086e:	e000      	b.n	8000872 <NVIC_EncodePriority+0x32>
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	2201      	movs	r2, #1
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	1e5a      	subs	r2, r3, #1
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	401a      	ands	r2, r3
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000886:	2101      	movs	r1, #1
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa01 f303 	lsl.w	r3, r1, r3
 800088e:	1e59      	subs	r1, r3, #1
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000894:	4313      	orrs	r3, r2
         );
}
 8000896:	4618      	mov	r0, r3
 8000898:	3724      	adds	r7, #36	; 0x24
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b4:	d301      	bcc.n	80008ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00f      	b.n	80008da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <SysTick_Config+0x40>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c2:	210f      	movs	r1, #15
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <SysTick_Config+0x40>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SysTick_Config+0x40>)
 80008d4:	2207      	movs	r2, #7
 80008d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff ff15 	bl	8000720 <NVIC_SetPriorityGrouping>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	4603      	mov	r3, r0
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000910:	f7ff ff2a 	bl	8000768 <NVIC_GetPriorityGrouping>
 8000914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff ff90 	bl	8000840 <NVIC_EncodePriority>
 8000920:	4602      	mov	r2, r0
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <NVIC_SetPriority>
}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	4603      	mov	r3, r0
 800093e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff1d 	bl	8000784 <NVIC_EnableIRQ>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff29 	bl	80007b8 <NVIC_DisableIRQ>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff94 	bl	80008a4 <SysTick_Config>
 800097c:	4603      	mov	r3, r0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b04      	cmp	r3, #4
 8000994:	d106      	bne.n	80009a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000996:	4a09      	ldr	r2, [pc, #36]	; (80009bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80009a2:	e005      	b.n	80009b0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f023 0304 	bic.w	r3, r3, #4
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009c4:	f000 f802 	bl	80009cc <HAL_SYSTICK_Callback>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d004      	beq.n	80009f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e00c      	b.n	8000a12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2205      	movs	r2, #5
 80009fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	6812      	ldr	r2, [r2, #0]
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	e175      	b.n	8000d2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a40:	2201      	movs	r2, #1
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	f040 8164 	bne.w	8000d26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x4e>
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d123      	bne.n	8000ab6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	08da      	lsrs	r2, r3, #3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3208      	adds	r2, #8
 8000a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	220f      	movs	r2, #15
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	f003 0307 	and.w	r3, r3, #7
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	08da      	lsrs	r2, r3, #3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3208      	adds	r2, #8
 8000ab0:	69b9      	ldr	r1, [r7, #24]
 8000ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4013      	ands	r3, r2
 8000acc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0203 	and.w	r2, r3, #3
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d00b      	beq.n	8000b0a <HAL_GPIO_Init+0xea>
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d007      	beq.n	8000b0a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afe:	2b11      	cmp	r3, #17
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b12      	cmp	r3, #18
 8000b08:	d130      	bne.n	8000b6c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	f003 0201 	and.w	r2, r3, #1
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4013      	ands	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 80be 	beq.w	8000d26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4a65      	ldr	r2, [pc, #404]	; (8000d40 <HAL_GPIO_Init+0x320>)
 8000bac:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <HAL_GPIO_Init+0x320>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <HAL_GPIO_Init+0x320>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000bc2:	4a60      	ldr	r2, [pc, #384]	; (8000d44 <HAL_GPIO_Init+0x324>)
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	3302      	adds	r3, #2
 8000bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	220f      	movs	r2, #15
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4013      	ands	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <HAL_GPIO_Init+0x328>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d037      	beq.n	8000c5e <HAL_GPIO_Init+0x23e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a56      	ldr	r2, [pc, #344]	; (8000d4c <HAL_GPIO_Init+0x32c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d031      	beq.n	8000c5a <HAL_GPIO_Init+0x23a>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a55      	ldr	r2, [pc, #340]	; (8000d50 <HAL_GPIO_Init+0x330>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d02b      	beq.n	8000c56 <HAL_GPIO_Init+0x236>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a54      	ldr	r2, [pc, #336]	; (8000d54 <HAL_GPIO_Init+0x334>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d025      	beq.n	8000c52 <HAL_GPIO_Init+0x232>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a53      	ldr	r2, [pc, #332]	; (8000d58 <HAL_GPIO_Init+0x338>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d01f      	beq.n	8000c4e <HAL_GPIO_Init+0x22e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a52      	ldr	r2, [pc, #328]	; (8000d5c <HAL_GPIO_Init+0x33c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d019      	beq.n	8000c4a <HAL_GPIO_Init+0x22a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <HAL_GPIO_Init+0x340>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0x226>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a50      	ldr	r2, [pc, #320]	; (8000d64 <HAL_GPIO_Init+0x344>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d00d      	beq.n	8000c42 <HAL_GPIO_Init+0x222>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <HAL_GPIO_Init+0x348>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d007      	beq.n	8000c3e <HAL_GPIO_Init+0x21e>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a4e      	ldr	r2, [pc, #312]	; (8000d6c <HAL_GPIO_Init+0x34c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_GPIO_Init+0x21a>
 8000c36:	2309      	movs	r3, #9
 8000c38:	e012      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	e010      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c3e:	2308      	movs	r3, #8
 8000c40:	e00e      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c42:	2307      	movs	r3, #7
 8000c44:	e00c      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c46:	2306      	movs	r3, #6
 8000c48:	e00a      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	e008      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c4e:	2304      	movs	r3, #4
 8000c50:	e006      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c52:	2303      	movs	r3, #3
 8000c54:	e004      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c56:	2302      	movs	r3, #2
 8000c58:	e002      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <HAL_GPIO_Init+0x240>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	69fa      	ldr	r2, [r7, #28]
 8000c62:	f002 0203 	and.w	r2, r2, #3
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	4093      	lsls	r3, r2
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c70:	4934      	ldr	r1, [pc, #208]	; (8000d44 <HAL_GPIO_Init+0x324>)
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	3302      	adds	r3, #2
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ca2:	4a33      	ldr	r2, [pc, #204]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ca8:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ccc:	4a28      	ldr	r2, [pc, #160]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d20:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_GPIO_Init+0x350>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	f67f ae86 	bls.w	8000a40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40020c00 	.word	0x40020c00
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40021400 	.word	0x40021400
 8000d60:	40021800 	.word	0x40021800
 8000d64:	40021c00 	.word	0x40021c00
 8000d68:	40022000 	.word	0x40022000
 8000d6c:	40022400 	.word	0x40022400
 8000d70:	40013c00 	.word	0x40013c00

08000d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e0da      	b.n	8000f46 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	f040 80ca 	bne.w	8000f40 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2103      	movs	r1, #3
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08d9      	lsrs	r1, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3108      	adds	r1, #8
 8000dce:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	200f      	movs	r0, #15
 8000ddc:	fa00 f303 	lsl.w	r3, r0, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4019      	ands	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2103      	movs	r1, #3
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2101      	movs	r1, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	401a      	ands	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2103      	movs	r1, #3
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	401a      	ands	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8000e2c:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <HAL_GPIO_DeInit+0x1e8>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a43      	ldr	r2, [pc, #268]	; (8000f60 <HAL_GPIO_DeInit+0x1ec>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d037      	beq.n	8000ec6 <HAL_GPIO_DeInit+0x152>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a42      	ldr	r2, [pc, #264]	; (8000f64 <HAL_GPIO_DeInit+0x1f0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d031      	beq.n	8000ec2 <HAL_GPIO_DeInit+0x14e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a41      	ldr	r2, [pc, #260]	; (8000f68 <HAL_GPIO_DeInit+0x1f4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d02b      	beq.n	8000ebe <HAL_GPIO_DeInit+0x14a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a40      	ldr	r2, [pc, #256]	; (8000f6c <HAL_GPIO_DeInit+0x1f8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_DeInit+0x146>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a3f      	ldr	r2, [pc, #252]	; (8000f70 <HAL_GPIO_DeInit+0x1fc>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01f      	beq.n	8000eb6 <HAL_GPIO_DeInit+0x142>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a3e      	ldr	r2, [pc, #248]	; (8000f74 <HAL_GPIO_DeInit+0x200>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_DeInit+0x13e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a3d      	ldr	r2, [pc, #244]	; (8000f78 <HAL_GPIO_DeInit+0x204>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_DeInit+0x13a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <HAL_GPIO_DeInit+0x208>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_DeInit+0x136>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a3b      	ldr	r2, [pc, #236]	; (8000f80 <HAL_GPIO_DeInit+0x20c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_DeInit+0x132>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a3a      	ldr	r2, [pc, #232]	; (8000f84 <HAL_GPIO_DeInit+0x210>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_DeInit+0x12e>
 8000e9e:	2309      	movs	r3, #9
 8000ea0:	e012      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	e010      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_DeInit+0x154>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	fa03 f202 	lsl.w	r2, r3, r2
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d132      	bne.n	8000f40 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8000eea:	481c      	ldr	r0, [pc, #112]	; (8000f5c <HAL_GPIO_DeInit+0x1e8>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	491a      	ldr	r1, [pc, #104]	; (8000f5c <HAL_GPIO_DeInit+0x1e8>)
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	0892      	lsrs	r2, r2, #2
 8000ef6:	3202      	adds	r2, #2
 8000ef8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	43d2      	mvns	r2, r2
 8000f00:	400a      	ands	r2, r1
 8000f02:	3302      	adds	r3, #2
 8000f04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000f08:	491f      	ldr	r1, [pc, #124]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4013      	ands	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000f16:	491c      	ldr	r1, [pc, #112]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000f24:	4918      	ldr	r1, [pc, #96]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000f32:	4915      	ldr	r1, [pc, #84]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_GPIO_DeInit+0x214>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	f67f af21 	bls.w	8000d90 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40021800 	.word	0x40021800
 8000f7c:	40021c00 	.word	0x40021c00
 8000f80:	40022000 	.word	0x40022000
 8000f84:	40022400 	.word	0x40022400
 8000f88:	40013c00 	.word	0x40013c00

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4a23      	ldr	r2, [pc, #140]	; (8001058 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fee:	f7ff fb69 	bl	80006c4 <HAL_GetTick>
 8000ff2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ff4:	e009      	b.n	800100a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ff6:	f7ff fb65 	bl	80006c4 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001004:	d901      	bls.n	800100a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e022      	b.n	8001050 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_PWREx_EnableOverDrive+0x9c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001016:	d1ee      	bne.n	8000ff6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_PWREx_EnableOverDrive+0x9c>)
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_PWREx_EnableOverDrive+0x9c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001022:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001024:	f7ff fb4e 	bl	80006c4 <HAL_GetTick>
 8001028:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800102a:	e009      	b.n	8001040 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800102c:	f7ff fb4a 	bl	80006c4 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103a:	d901      	bls.n	8001040 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e007      	b.n	8001050 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800104c:	d1ee      	bne.n	800102c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e25e      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8087 	beq.w	8001192 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001084:	4b96      	ldr	r3, [pc, #600]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b04      	cmp	r3, #4
 800108e:	d00c      	beq.n	80010aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001090:	4b93      	ldr	r3, [pc, #588]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d112      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62>
 800109c:	4b90      	ldr	r3, [pc, #576]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a8:	d10b      	bne.n	80010c2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010aa:	4b8d      	ldr	r3, [pc, #564]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d06c      	beq.n	8001190 <HAL_RCC_OscConfig+0x130>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d168      	bne.n	8001190 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e238      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x7a>
 80010cc:	4a84      	ldr	r2, [pc, #528]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80010ce:	4b84      	ldr	r3, [pc, #528]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	e02e      	b.n	8001138 <HAL_RCC_OscConfig+0xd8>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x9c>
 80010e2:	4a7f      	ldr	r2, [pc, #508]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80010e4:	4b7e      	ldr	r3, [pc, #504]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4a7c      	ldr	r2, [pc, #496]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80010f0:	4b7b      	ldr	r3, [pc, #492]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e01d      	b.n	8001138 <HAL_RCC_OscConfig+0xd8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0xc0>
 8001106:	4a76      	ldr	r2, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001108:	4b75      	ldr	r3, [pc, #468]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4a73      	ldr	r2, [pc, #460]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001114:	4b72      	ldr	r3, [pc, #456]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e00b      	b.n	8001138 <HAL_RCC_OscConfig+0xd8>
 8001120:	4a6f      	ldr	r2, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001122:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4a6c      	ldr	r2, [pc, #432]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 800112e:	4b6c      	ldr	r3, [pc, #432]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff fac0 	bl	80006c4 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fabc 	bl	80006c4 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1ec      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	4b61      	ldr	r3, [pc, #388]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0xe8>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001168:	f7ff faac 	bl	80006c4 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff faa8 	bl	80006c4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1d8      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x110>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d069      	beq.n	8001272 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800119e:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d11c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x190>
 80011b6:	4b4a      	ldr	r3, [pc, #296]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d116      	bne.n	80011f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_RCC_OscConfig+0x17a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e1ac      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011da:	4941      	ldr	r1, [pc, #260]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011dc:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e040      	b.n	8001272 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d023      	beq.n	8001240 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f8:	4a39      	ldr	r2, [pc, #228]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001204:	f7ff fa5e 	bl	80006c4 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120c:	f7ff fa5a 	bl	80006c4 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e18a      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	492d      	ldr	r1, [pc, #180]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
 800123e:	e018      	b.n	8001272 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001240:	4a27      	ldr	r2, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fa3a 	bl	80006c4 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fa36 	bl	80006c4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e166      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d038      	beq.n	80012f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d019      	beq.n	80012ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001286:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 800128a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001292:	f7ff fa17 	bl	80006c4 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fa13 	bl	80006c4 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e143      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80012ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x23a>
 80012b8:	e01a      	b.n	80012f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_RCC_OscConfig+0x280>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c6:	f7ff f9fd 	bl	80006c4 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff f9f9 	bl	80006c4 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d903      	bls.n	80012e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e129      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
 80012e0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e4:	4b95      	ldr	r3, [pc, #596]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80012e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ee      	bne.n	80012ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a4 	beq.w	8001446 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fe:	4b8f      	ldr	r3, [pc, #572]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10d      	bne.n	8001326 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4a8c      	ldr	r2, [pc, #560]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 800130c:	4b8b      	ldr	r3, [pc, #556]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001322:	2301      	movs	r3, #1
 8001324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001326:	4b86      	ldr	r3, [pc, #536]	; (8001540 <HAL_RCC_OscConfig+0x4e0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d118      	bne.n	8001364 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001332:	4a83      	ldr	r2, [pc, #524]	; (8001540 <HAL_RCC_OscConfig+0x4e0>)
 8001334:	4b82      	ldr	r3, [pc, #520]	; (8001540 <HAL_RCC_OscConfig+0x4e0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133e:	f7ff f9c1 	bl	80006c4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001346:	f7ff f9bd 	bl	80006c4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b64      	cmp	r3, #100	; 0x64
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e0ed      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001358:	4b79      	ldr	r3, [pc, #484]	; (8001540 <HAL_RCC_OscConfig+0x4e0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x31a>
 800136c:	4a73      	ldr	r2, [pc, #460]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 800136e:	4b73      	ldr	r3, [pc, #460]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
 8001378:	e02d      	b.n	80013d6 <HAL_RCC_OscConfig+0x376>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x33c>
 8001382:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001384:	4b6d      	ldr	r3, [pc, #436]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
 800138e:	4a6b      	ldr	r2, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001394:	f023 0304 	bic.w	r3, r3, #4
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	e01c      	b.n	80013d6 <HAL_RCC_OscConfig+0x376>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x35e>
 80013a4:	4a65      	ldr	r2, [pc, #404]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6713      	str	r3, [r2, #112]	; 0x70
 80013b0:	4a62      	ldr	r2, [pc, #392]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013b2:	4b62      	ldr	r3, [pc, #392]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6713      	str	r3, [r2, #112]	; 0x70
 80013bc:	e00b      	b.n	80013d6 <HAL_RCC_OscConfig+0x376>
 80013be:	4a5f      	ldr	r2, [pc, #380]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013c0:	4b5e      	ldr	r3, [pc, #376]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ca:	4a5c      	ldr	r2, [pc, #368]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013cc:	4b5b      	ldr	r3, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d015      	beq.n	800140a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013de:	f7ff f971 	bl	80006c4 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff f96d 	bl	80006c4 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e09b      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	4b4f      	ldr	r3, [pc, #316]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0ee      	beq.n	80013e6 <HAL_RCC_OscConfig+0x386>
 8001408:	e014      	b.n	8001434 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140a:	f7ff f95b 	bl	80006c4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff f957 	bl	80006c4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001420:	4293      	cmp	r3, r2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e085      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001428:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ee      	bne.n	8001412 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d105      	bne.n	8001446 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143a:	4a40      	ldr	r2, [pc, #256]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 800143c:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d071      	beq.n	8001532 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d069      	beq.n	800152e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d14b      	bne.n	80014fa <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4a36      	ldr	r2, [pc, #216]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001464:	4b35      	ldr	r3, [pc, #212]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff f929 	bl	80006c4 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff f925 	bl	80006c4 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e055      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001488:	4b2c      	ldr	r3, [pc, #176]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001494:	4929      	ldr	r1, [pc, #164]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69da      	ldr	r2, [r3, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	019b      	lsls	r3, r3, #6
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	3b01      	subs	r3, #1
 80014b0:	041b      	lsls	r3, r3, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	061b      	lsls	r3, r3, #24
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	071b      	lsls	r3, r3, #28
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff f8f7 	bl	80006c4 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff f8f3 	bl	80006c4 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e023      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x47a>
 80014f8:	e01b      	b.n	8001532 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001506:	f7ff f8dd 	bl	80006c4 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff f8d9 	bl	80006c4 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e009      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_RCC_OscConfig+0x4dc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x4ae>
 800152c:	e001      	b.n	8001532 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0ce      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800155c:	4b69      	ldr	r3, [pc, #420]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 020f 	and.w	r2, r3, #15
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d210      	bcs.n	800158c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	4966      	ldr	r1, [pc, #408]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	4b65      	ldr	r3, [pc, #404]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 020f 	bic.w	r2, r3, #15
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b62      	ldr	r3, [pc, #392]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 020f 	and.w	r2, r3, #15
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b6      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4b58      	ldr	r3, [pc, #352]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4b52      	ldr	r3, [pc, #328]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	494f      	ldr	r1, [pc, #316]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4b4f      	ldr	r3, [pc, #316]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d040      	beq.n	8001668 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d115      	bne.n	8001626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07d      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001606:	4b40      	ldr	r3, [pc, #256]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e071      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e069      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001626:	4938      	ldr	r1, [pc, #224]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 0203 	bic.w	r2, r3, #3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001638:	f7ff f844 	bl	80006c4 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	e00a      	b.n	8001656 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001640:	f7ff f840 	bl	80006c4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	; 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e051      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 020c 	and.w	r2, r3, #12
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	429a      	cmp	r2, r3
 8001666:	d1eb      	bne.n	8001640 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 020f 	and.w	r2, r3, #15
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d910      	bls.n	8001698 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4923      	ldr	r1, [pc, #140]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 020f 	bic.w	r2, r3, #15
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 020f 	and.w	r2, r3, #15
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e030      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4918      	ldr	r1, [pc, #96]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c2:	4911      	ldr	r1, [pc, #68]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f81d 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016da:	4601      	mov	r1, r0
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	fa21 f303 	lsr.w	r3, r1, r3
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_RCC_ClockConfig+0x1cc>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7fe ffa2 	bl	800063c <HAL_InitTick>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00
 8001708:	40023800 	.word	0x40023800
 800170c:	08005b98 	.word	0x08005b98
 8001710:	20000010 	.word	0x20000010

08001714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001718:	b08f      	sub	sp, #60	; 0x3c
 800171a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800172c:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b04      	cmp	r3, #4
 8001736:	d007      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x34>
 8001738:	2b08      	cmp	r3, #8
 800173a:	d008      	beq.n	800174e <HAL_RCC_GetSysClockFreq+0x3a>
 800173c:	2b00      	cmp	r3, #0
 800173e:	f040 80b2 	bne.w	80018a6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001742:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001746:	e0b1      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001748:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800174c:	e0ae      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800174e:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d04e      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001764:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	f04f 0400 	mov.w	r4, #0
 800176e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	ea01 0103 	and.w	r1, r1, r3
 800177a:	ea02 0204 	and.w	r2, r2, r4
 800177e:	460b      	mov	r3, r1
 8001780:	4614      	mov	r4, r2
 8001782:	0160      	lsls	r0, r4, #5
 8001784:	6278      	str	r0, [r7, #36]	; 0x24
 8001786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001788:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800178c:	6278      	str	r0, [r7, #36]	; 0x24
 800178e:	015b      	lsls	r3, r3, #5
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001796:	1a5b      	subs	r3, r3, r1
 8001798:	eb64 0402 	sbc.w	r4, r4, r2
 800179c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80017a0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80017a4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80017a8:	ebb8 0803 	subs.w	r8, r8, r3
 80017ac:	eb69 0904 	sbc.w	r9, r9, r4
 80017b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017c8:	eb18 0801 	adds.w	r8, r8, r1
 80017cc:	eb49 0902 	adc.w	r9, r9, r2
 80017d0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017e8:	4640      	mov	r0, r8
 80017ea:	4649      	mov	r1, r9
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	f04f 0400 	mov.w	r4, #0
 80017f2:	461a      	mov	r2, r3
 80017f4:	4623      	mov	r3, r4
 80017f6:	f7fe fd8b 	bl	8000310 <__aeabi_uldivmod>
 80017fa:	4603      	mov	r3, r0
 80017fc:	460c      	mov	r4, r1
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001800:	e043      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	f04f 0400 	mov.w	r4, #0
 800180c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	ea01 0103 	and.w	r1, r1, r3
 8001818:	ea02 0204 	and.w	r2, r2, r4
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	0160      	lsls	r0, r4, #5
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	015b      	lsls	r3, r3, #5
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001834:	1a5b      	subs	r3, r3, r1
 8001836:	eb64 0402 	sbc.w	r4, r4, r2
 800183a:	01a6      	lsls	r6, r4, #6
 800183c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001840:	019d      	lsls	r5, r3, #6
 8001842:	1aed      	subs	r5, r5, r3
 8001844:	eb66 0604 	sbc.w	r6, r6, r4
 8001848:	00f3      	lsls	r3, r6, #3
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	00eb      	lsls	r3, r5, #3
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	e897 0060 	ldmia.w	r7, {r5, r6}
 800185c:	186d      	adds	r5, r5, r1
 800185e:	eb46 0602 	adc.w	r6, r6, r2
 8001862:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001866:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800186a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800186e:	4655      	mov	r5, sl
 8001870:	465e      	mov	r6, fp
 8001872:	4628      	mov	r0, r5
 8001874:	4631      	mov	r1, r6
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	461a      	mov	r2, r3
 800187e:	4623      	mov	r3, r4
 8001880:	f7fe fd46 	bl	8000310 <__aeabi_uldivmod>
 8001884:	4603      	mov	r3, r0
 8001886:	460c      	mov	r4, r1
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	3301      	adds	r3, #1
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800189a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018a4:	e002      	b.n	80018ac <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	373c      	adds	r7, #60	; 0x3c
 80018b2:	46bd      	mov	sp, r7
 80018b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	00f42400 	.word	0x00f42400
 80018c0:	007a1200 	.word	0x007a1200

080018c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000010 	.word	0x20000010

080018dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018e0:	f7ff fff0 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 80018e4:	4601      	mov	r1, r0
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	0a9b      	lsrs	r3, r3, #10
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	4a03      	ldr	r2, [pc, #12]	; (8001900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	08005ba8 	.word	0x08005ba8

08001904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001908:	f7ff ffdc 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 800190c:	4601      	mov	r1, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	0b5b      	lsrs	r3, r3, #13
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4a03      	ldr	r2, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	08005ba8 	.word	0x08005ba8

0800192c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d012      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001954:	4a69      	ldr	r2, [pc, #420]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001956:	4b69      	ldr	r3, [pc, #420]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800195e:	6093      	str	r3, [r2, #8]
 8001960:	4966      	ldr	r1, [pc, #408]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001962:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d017      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001986:	495d      	ldr	r1, [pc, #372]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001988:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800198a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800198e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	4313      	orrs	r3, r2
 8001998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a4:	d101      	bne.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d017      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019c2:	494e      	ldr	r1, [pc, #312]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4313      	orrs	r3, r2
 80019d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e0:	d101      	bne.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 808b 	beq.w	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	4a3a      	ldr	r2, [pc, #232]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1c:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a28:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a2a:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a34:	f7fe fe46 	bl	80006c4 <HAL_GetTick>
 8001a38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3c:	f7fe fe42 	bl	80006c4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e38d      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d035      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d02e      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a78:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a82:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a84:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001a9a:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7fe fe0a 	bl	80006c4 <HAL_GetTick>
 8001ab0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7fe fe06 	bl	80006c4 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e34f      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0ee      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ae2:	d111      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001af4:	400b      	ands	r3, r1
 8001af6:	4313      	orrs	r3, r2
 8001af8:	6083      	str	r3, [r0, #8]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000
 8001b04:	0ffffcff 	.word	0x0ffffcff
 8001b08:	4ab2      	ldr	r2, [pc, #712]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b0a:	4bb2      	ldr	r3, [pc, #712]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b12:	6093      	str	r3, [r2, #8]
 8001b14:	49af      	ldr	r1, [pc, #700]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b16:	4baf      	ldr	r3, [pc, #700]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b22:	4313      	orrs	r3, r2
 8001b24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d010      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b32:	4aa8      	ldr	r2, [pc, #672]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b34:	4ba7      	ldr	r3, [pc, #668]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b42:	49a4      	ldr	r1, [pc, #656]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b44:	4ba3      	ldr	r3, [pc, #652]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b46:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b60:	499c      	ldr	r1, [pc, #624]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b62:	4b9c      	ldr	r3, [pc, #624]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b82:	4994      	ldr	r1, [pc, #592]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b84:	4b93      	ldr	r3, [pc, #588]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00a      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ba4:	498b      	ldr	r1, [pc, #556]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001ba6:	4b8b      	ldr	r3, [pc, #556]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001bc6:	4983      	ldr	r1, [pc, #524]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bc8:	4b82      	ldr	r3, [pc, #520]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00a      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001be8:	497a      	ldr	r1, [pc, #488]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bea:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf0:	f023 0203 	bic.w	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00a      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c0a:	4972      	ldr	r1, [pc, #456]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c0c:	4b71      	ldr	r3, [pc, #452]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	f023 020c 	bic.w	r2, r3, #12
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00a      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c2c:	4969      	ldr	r1, [pc, #420]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c2e:	4b69      	ldr	r3, [pc, #420]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c4e:	4961      	ldr	r1, [pc, #388]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c50:	4b60      	ldr	r3, [pc, #384]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00a      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c70:	4958      	ldr	r1, [pc, #352]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c72:	4b58      	ldr	r3, [pc, #352]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	4313      	orrs	r3, r2
 8001c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c92:	4950      	ldr	r1, [pc, #320]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c94:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001cb4:	4947      	ldr	r1, [pc, #284]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001cb6:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00a      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001cd6:	493f      	ldr	r1, [pc, #252]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001cd8:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00a      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cf8:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001cfa:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d011      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d1a:	492e      	ldr	r1, [pc, #184]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d38:	d101      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d5a:	491e      	ldr	r1, [pc, #120]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d7c:	4915      	ldr	r1, [pc, #84]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d84:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001da0:	490c      	ldr	r1, [pc, #48]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8001dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dcc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	e001      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001dee:	4981      	ldr	r1, [pc, #516]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001df0:	4b80      	ldr	r3, [pc, #512]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001df6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e14:	f040 80d6 	bne.w	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e18:	4a76      	ldr	r2, [pc, #472]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e24:	f7fe fc4e 	bl	80006c4 <HAL_GetTick>
 8001e28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x512>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e2c:	f7fe fc4a 	bl	80006c4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x512>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e195      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e3e:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x500>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d021      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11d      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e64:	0c1b      	lsrs	r3, r3, #16
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e6c:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e7a:	495e      	ldr	r1, [pc, #376]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	019a      	lsls	r2, r3, #6
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	431a      	orrs	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	061b      	lsls	r3, r3, #24
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	071b      	lsls	r3, r3, #28
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02e      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec4:	d129      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ed4:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eda:	0f1b      	lsrs	r3, r3, #28
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ee2:	4944      	ldr	r1, [pc, #272]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	019a      	lsls	r2, r3, #6
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	071b      	lsls	r3, r3, #28
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f02:	493c      	ldr	r1, [pc, #240]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f04:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0a:	f023 021f 	bic.w	r2, r3, #31
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	3b01      	subs	r3, #1
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01d      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f26:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f2c:	0e1b      	lsrs	r3, r3, #24
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f34:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f3a:	0f1b      	lsrs	r3, r3, #28
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f42:	492c      	ldr	r1, [pc, #176]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	019a      	lsls	r2, r3, #6
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	431a      	orrs	r2, r3
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	431a      	orrs	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	071b      	lsls	r3, r3, #28
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d011      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f6e:	4921      	ldr	r1, [pc, #132]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	019a      	lsls	r2, r3, #6
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	061b      	lsls	r3, r3, #24
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	071b      	lsls	r3, r3, #28
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f9e:	f7fe fb91 	bl	80006c4 <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fa6:	f7fe fb8d 	bl	80006c4 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0d8      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	f040 80ce 	bne.w	8002168 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fcc:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fb74 	bl	80006c4 <HAL_GetTick>
 8001fdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fde:	e00b      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fe0:	f7fe fb70 	bl	80006c4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d904      	bls.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0bb      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002004:	d0ec      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002022:	2b00      	cmp	r3, #0
 8002024:	d02e      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d12a      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800202e:	4b51      	ldr	r3, [pc, #324]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800203c:	4b4d      	ldr	r3, [pc, #308]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	0f1b      	lsrs	r3, r3, #28
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800204a:	494a      	ldr	r1, [pc, #296]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	019a      	lsls	r2, r3, #6
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	431a      	orrs	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	071b      	lsls	r3, r3, #28
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800206a:	4942      	ldr	r1, [pc, #264]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800206c:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002072:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	3b01      	subs	r3, #1
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d022      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002098:	d11d      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a0:	0e1b      	lsrs	r3, r3, #24
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	0f1b      	lsrs	r3, r3, #28
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020b6:	492f      	ldr	r1, [pc, #188]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	019a      	lsls	r2, r3, #6
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	071b      	lsls	r3, r3, #28
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d028      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	0e1b      	lsrs	r3, r3, #24
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	0c1b      	lsrs	r3, r3, #16
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80020fe:	491d      	ldr	r1, [pc, #116]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	019a      	lsls	r2, r3, #6
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	071b      	lsls	r3, r3, #28
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800211e:	4915      	ldr	r1, [pc, #84]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002136:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002140:	f7fe fac0 	bl	80006c4 <HAL_GetTick>
 8002144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002148:	f7fe fabc 	bl	80006c4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e007      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002166:	d1ef      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e043      	b.n	8002212 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f002 fdf6 	bl	8004d90 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fb9b 	bl	80028f8 <UART_SetConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e022      	b.n	8002212 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fdfd 	bl	8002dd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	6852      	ldr	r2, [r2, #4]
 80021e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	6892      	ldr	r2, [r2, #8]
 80021f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fe84 	bl	8002f18 <UART_CheckIdleState>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_UART_DeInit>:
  * @brief DeInitializes the UART peripheral
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e02a      	b.n	8002282 <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2224      	movs	r2, #36	; 0x24
 8002230:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f002 fddf 	bl	8004e20 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_UART_Transmit_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	4613      	mov	r3, r2
 8002296:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d132      	bne.n	800230a <HAL_UART_Transmit_IT+0x80>
  {
    if((pData == NULL ) || (Size == 0U))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_UART_Transmit_IT+0x26>
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e02b      	b.n	800230c <HAL_UART_Transmit_IT+0x82>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_UART_Transmit_IT+0x38>
 80022be:	2302      	movs	r3, #2
 80022c0:	e024      	b.n	800230c <HAL_UART_Transmit_IT+0x82>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	88fa      	ldrh	r2, [r7, #6]
 80022dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2221      	movs	r2, #33	; 0x21
 80022ea:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002304:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_UART_Transmit_IT+0x82>
  }
  else
  {
    return HAL_BUSY;
 800230a:	2302      	movs	r3, #2
  }
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_UART_Receive_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	d172      	bne.n	8002418 <HAL_UART_Receive_IT+0x100>
  {
    if((pData == NULL ) || (Size == 0U))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_UART_Receive_IT+0x26>
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06b      	b.n	800241a <HAL_UART_Receive_IT+0x102>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_UART_Receive_IT+0x38>
 800234c:	2302      	movs	r3, #2
 800234e:	e064      	b.n	800241a <HAL_UART_Receive_IT+0x102>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	d10e      	bne.n	8002396 <HAL_UART_Receive_IT+0x7e>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_UART_Receive_IT+0x74>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002386:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800238a:	e028      	b.n	80023de <HAL_UART_Receive_IT+0xc6>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	22ff      	movs	r2, #255	; 0xff
 8002390:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002394:	e023      	b.n	80023de <HAL_UART_Receive_IT+0xc6>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_UART_Receive_IT+0xa2>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_UART_Receive_IT+0x98>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023ae:	e016      	b.n	80023de <HAL_UART_Receive_IT+0xc6>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	227f      	movs	r2, #127	; 0x7f
 80023b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023b8:	e011      	b.n	80023de <HAL_UART_Receive_IT+0xc6>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023c2:	d10c      	bne.n	80023de <HAL_UART_Receive_IT+0xc6>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d104      	bne.n	80023d6 <HAL_UART_Receive_IT+0xbe>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	227f      	movs	r2, #127	; 0x7f
 80023d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80023d4:	e003      	b.n	80023de <HAL_UART_Receive_IT+0xc6>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	223f      	movs	r2, #63	; 0x3f
 80023da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2222      	movs	r2, #34	; 0x22
 80023e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	6892      	ldr	r2, [r2, #8]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002412:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <HAL_UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <HAL_UART_IRQHandler>:
  * @brief This function handles UART interrupt request.
  * @param huart uart handle
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_UART_IRQHandler+0x4a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_UART_IRQHandler+0x4a>
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_UART_IRQHandler+0x4a>
    {
      UART_Receive_IT(huart);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f9ba 	bl	80027e4 <UART_Receive_IT>
      return;
 8002470:	e0da      	b.n	8002628 <HAL_UART_IRQHandler+0x200>
    }
  }

  /* If some errors occur */
  if(   (errorflags != RESET)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80b9 	beq.w	80025ec <HAL_UART_IRQHandler+0x1c4>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80ae 	beq.w	80025ec <HAL_UART_IRQHandler+0x1c4>
  {

    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00e      	beq.n	80024b8 <HAL_UART_IRQHandler+0x90>
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00e      	beq.n	80024e0 <HAL_UART_IRQHandler+0xb8>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00e      	beq.n	8002508 <HAL_UART_IRQHandler+0xe0>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2204      	movs	r2, #4
 80024fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002500:	f043 0202 	orr.w	r2, r3, #2
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d013      	beq.n	800253a <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002518:	2b00      	cmp	r3, #0
 800251a:	d104      	bne.n	8002526 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2208      	movs	r2, #8
 800252c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002532:	f043 0208 	orr.w	r2, r3, #8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d071      	beq.n	8002626 <HAL_UART_IRQHandler+0x1fe>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_UART_IRQHandler+0x134>
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_IRQHandler+0x134>
      {
        UART_Receive_IT(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f944 	bl	80027e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <HAL_UART_IRQHandler+0x14e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002572:	2b00      	cmp	r3, #0
 8002574:	d031      	beq.n	80025da <HAL_UART_IRQHandler+0x1b2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f99f 	bl	80028ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d023      	beq.n	80025d2 <HAL_UART_IRQHandler+0x1aa>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	6892      	ldr	r2, [r2, #8]
 8002594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002598:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d013      	beq.n	80025ca <HAL_UART_IRQHandler+0x1a2>
          {
            /* Set the UART DMA Abort callback :
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_UART_IRQHandler+0x208>)
 80025a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fa13 	bl	80009da <HAL_DMA_Abort_IT>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_UART_IRQHandler+0x1c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80025c4:	4610      	mov	r0, r2
 80025c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	e00e      	b.n	80025e8 <HAL_UART_IRQHandler+0x1c0>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f892 	bl	80026f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d0:	e00a      	b.n	80025e8 <HAL_UART_IRQHandler+0x1c0>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f88e 	bl	80026f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d8:	e006      	b.n	80025e8 <HAL_UART_IRQHandler+0x1c0>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f88a 	bl	80026f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80025e6:	e01e      	b.n	8002626 <HAL_UART_IRQHandler+0x1fe>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e8:	bf00      	nop
    return;
 80025ea:	e01c      	b.n	8002626 <HAL_UART_IRQHandler+0x1fe>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_UART_IRQHandler+0x1e0>
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_UART_IRQHandler+0x1e0>
  {
    UART_Transmit_IT(huart);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f881 	bl	8002708 <UART_Transmit_IT>
    return;
 8002606:	e00f      	b.n	8002628 <HAL_UART_IRQHandler+0x200>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_UART_IRQHandler+0x200>
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_UART_IRQHandler+0x200>
  {
    UART_EndTransmit_IT(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f8c9 	bl	80027b4 <UART_EndTransmit_IT>
    return;
 8002622:	bf00      	nop
 8002624:	e000      	b.n	8002628 <HAL_UART_IRQHandler+0x200>
    return;
 8002626:	bf00      	nop
  }

}
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	080026c9 	.word	0x080026c9

08002634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002644:	e02c      	b.n	80026a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d028      	beq.n	80026a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <UART_WaitOnFlagUntilTimeout+0x30>
 8002654:	f7fe f836 	bl	80006c4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	429a      	cmp	r2, r3
 8002662:	d31d      	bcc.n	80026a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002672:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e00f      	b.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	401a      	ands	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d0c3      	beq.n	8002646 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f804 	bl	80026f4 <HAL_UART_ErrorCallback>
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b21      	cmp	r3, #33	; 0x21
 800271a:	d144      	bne.n	80027a6 <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d111      	bne.n	800274c <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002736:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002746:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e02d      	b.n	80027a8 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002754:	d113      	bne.n	800277e <UART_Transmit_IT+0x76>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	8812      	ldrh	r2, [r2, #0]
 800276c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	1c9a      	adds	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	64da      	str	r2, [r3, #76]	; 0x4c
 800277c:	e008      	b.n	8002790 <UART_Transmit_IT+0x88>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	1c58      	adds	r0, r3, #1
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	64c8      	str	r0, [r1, #76]	; 0x4c
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	6293      	str	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e000      	b.n	80027a8 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 80027a6:	2302      	movs	r3, #2
  }
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f001 fe2b 	bl	8004430 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027f2:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b22      	cmp	r3, #34	; 0x22
 80027fe:	d14f      	bne.n	80028a0 <UART_Receive_IT+0xbc>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002808:	d115      	bne.n	8002836 <UART_Receive_IT+0x52>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d111      	bne.n	8002836 <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b29a      	uxth	r2, r3
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	4013      	ands	r3, r2
 8002824:	b29a      	uxth	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	1c9a      	adds	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
 8002834:	e00d      	b.n	8002852 <UART_Receive_IT+0x6e>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6551      	str	r1, [r2, #84]	; 0x54
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002846:	b2d1      	uxtb	r1, r2
 8002848:	89fa      	ldrh	r2, [r7, #14]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	400a      	ands	r2, r1
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4619      	mov	r1, r3
 8002862:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002878:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	6892      	ldr	r2, [r2, #8]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f001 fda8 	bl	80043e8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e00a      	b.n	80028b2 <UART_Receive_IT+0xce>
    }

    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e008      	b.n	80028b2 <UART_Receive_IT+0xce>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	6992      	ldr	r2, [r2, #24]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6812      	ldr	r2, [r2, #0]
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002904:	2310      	movs	r3, #16
 8002906:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002908:	2300      	movs	r3, #0
 800290a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800290c:	2300      	movs	r3, #0
 800290e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4baa      	ldr	r3, [pc, #680]	; (8002be0 <UART_SetConfig+0x2e8>)
 8002938:	400b      	ands	r3, r1
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	430b      	orrs	r3, r1
 800293e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	6852      	ldr	r2, [r2, #4]
 800294a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	6892      	ldr	r2, [r2, #8]
 800296c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a9a      	ldr	r2, [pc, #616]	; (8002be4 <UART_SetConfig+0x2ec>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d11f      	bne.n	80029c0 <UART_SetConfig+0xc8>
 8002980:	4b99      	ldr	r3, [pc, #612]	; (8002be8 <UART_SetConfig+0x2f0>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b03      	cmp	r3, #3
 800298c:	f200 813e 	bhi.w	8002c0c <UART_SetConfig+0x314>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <UART_SetConfig+0xa0>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029a9 	.word	0x080029a9
 800299c:	080029b5 	.word	0x080029b5
 80029a0:	080029af 	.word	0x080029af
 80029a4:	080029bb 	.word	0x080029bb
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
 80029ac:	e12e      	b.n	8002c0c <UART_SetConfig+0x314>
 80029ae:	2302      	movs	r3, #2
 80029b0:	75fb      	strb	r3, [r7, #23]
 80029b2:	e12b      	b.n	8002c0c <UART_SetConfig+0x314>
 80029b4:	2304      	movs	r3, #4
 80029b6:	75fb      	strb	r3, [r7, #23]
 80029b8:	e128      	b.n	8002c0c <UART_SetConfig+0x314>
 80029ba:	2308      	movs	r3, #8
 80029bc:	75fb      	strb	r3, [r7, #23]
 80029be:	e125      	b.n	8002c0c <UART_SetConfig+0x314>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a89      	ldr	r2, [pc, #548]	; (8002bec <UART_SetConfig+0x2f4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d130      	bne.n	8002a2c <UART_SetConfig+0x134>
 80029ca:	4b87      	ldr	r3, [pc, #540]	; (8002be8 <UART_SetConfig+0x2f0>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	f200 8119 	bhi.w	8002c0c <UART_SetConfig+0x314>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <UART_SetConfig+0xe8>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002c0d 	.word	0x08002c0d
 80029e8:	08002c0d 	.word	0x08002c0d
 80029ec:	08002c0d 	.word	0x08002c0d
 80029f0:	08002a21 	.word	0x08002a21
 80029f4:	08002c0d 	.word	0x08002c0d
 80029f8:	08002c0d 	.word	0x08002c0d
 80029fc:	08002c0d 	.word	0x08002c0d
 8002a00:	08002a1b 	.word	0x08002a1b
 8002a04:	08002c0d 	.word	0x08002c0d
 8002a08:	08002c0d 	.word	0x08002c0d
 8002a0c:	08002c0d 	.word	0x08002c0d
 8002a10:	08002a27 	.word	0x08002a27
 8002a14:	2300      	movs	r3, #0
 8002a16:	75fb      	strb	r3, [r7, #23]
 8002a18:	e0f8      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	75fb      	strb	r3, [r7, #23]
 8002a1e:	e0f5      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a20:	2304      	movs	r3, #4
 8002a22:	75fb      	strb	r3, [r7, #23]
 8002a24:	e0f2      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a26:	2308      	movs	r3, #8
 8002a28:	75fb      	strb	r3, [r7, #23]
 8002a2a:	e0ef      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6f      	ldr	r2, [pc, #444]	; (8002bf0 <UART_SetConfig+0x2f8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d11c      	bne.n	8002a70 <UART_SetConfig+0x178>
 8002a36:	4b6c      	ldr	r3, [pc, #432]	; (8002be8 <UART_SetConfig+0x2f0>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d00f      	beq.n	8002a64 <UART_SetConfig+0x16c>
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d802      	bhi.n	8002a4e <UART_SetConfig+0x156>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <UART_SetConfig+0x160>
 8002a4c:	e0de      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d005      	beq.n	8002a5e <UART_SetConfig+0x166>
 8002a52:	2b30      	cmp	r3, #48	; 0x30
 8002a54:	d009      	beq.n	8002a6a <UART_SetConfig+0x172>
 8002a56:	e0d9      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	75fb      	strb	r3, [r7, #23]
 8002a5c:	e0d6      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	75fb      	strb	r3, [r7, #23]
 8002a62:	e0d3      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a64:	2304      	movs	r3, #4
 8002a66:	75fb      	strb	r3, [r7, #23]
 8002a68:	e0d0      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	75fb      	strb	r3, [r7, #23]
 8002a6e:	e0cd      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a5f      	ldr	r2, [pc, #380]	; (8002bf4 <UART_SetConfig+0x2fc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d11c      	bne.n	8002ab4 <UART_SetConfig+0x1bc>
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <UART_SetConfig+0x2f0>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d00f      	beq.n	8002aa8 <UART_SetConfig+0x1b0>
 8002a88:	2b40      	cmp	r3, #64	; 0x40
 8002a8a:	d802      	bhi.n	8002a92 <UART_SetConfig+0x19a>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <UART_SetConfig+0x1a4>
 8002a90:	e0bc      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d005      	beq.n	8002aa2 <UART_SetConfig+0x1aa>
 8002a96:	2bc0      	cmp	r3, #192	; 0xc0
 8002a98:	d009      	beq.n	8002aae <UART_SetConfig+0x1b6>
 8002a9a:	e0b7      	b.n	8002c0c <UART_SetConfig+0x314>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
 8002aa0:	e0b4      	b.n	8002c0c <UART_SetConfig+0x314>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	75fb      	strb	r3, [r7, #23]
 8002aa6:	e0b1      	b.n	8002c0c <UART_SetConfig+0x314>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	75fb      	strb	r3, [r7, #23]
 8002aac:	e0ae      	b.n	8002c0c <UART_SetConfig+0x314>
 8002aae:	2308      	movs	r3, #8
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	e0ab      	b.n	8002c0c <UART_SetConfig+0x314>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a4f      	ldr	r2, [pc, #316]	; (8002bf8 <UART_SetConfig+0x300>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d120      	bne.n	8002b00 <UART_SetConfig+0x208>
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <UART_SetConfig+0x2f0>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002acc:	d012      	beq.n	8002af4 <UART_SetConfig+0x1fc>
 8002ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad2:	d802      	bhi.n	8002ada <UART_SetConfig+0x1e2>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <UART_SetConfig+0x1f0>
 8002ad8:	e098      	b.n	8002c0c <UART_SetConfig+0x314>
 8002ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ade:	d006      	beq.n	8002aee <UART_SetConfig+0x1f6>
 8002ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae4:	d009      	beq.n	8002afa <UART_SetConfig+0x202>
 8002ae6:	e091      	b.n	8002c0c <UART_SetConfig+0x314>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	75fb      	strb	r3, [r7, #23]
 8002aec:	e08e      	b.n	8002c0c <UART_SetConfig+0x314>
 8002aee:	2302      	movs	r3, #2
 8002af0:	75fb      	strb	r3, [r7, #23]
 8002af2:	e08b      	b.n	8002c0c <UART_SetConfig+0x314>
 8002af4:	2304      	movs	r3, #4
 8002af6:	75fb      	strb	r3, [r7, #23]
 8002af8:	e088      	b.n	8002c0c <UART_SetConfig+0x314>
 8002afa:	2308      	movs	r3, #8
 8002afc:	75fb      	strb	r3, [r7, #23]
 8002afe:	e085      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3d      	ldr	r2, [pc, #244]	; (8002bfc <UART_SetConfig+0x304>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d120      	bne.n	8002b4c <UART_SetConfig+0x254>
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <UART_SetConfig+0x2f0>)
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b18:	d012      	beq.n	8002b40 <UART_SetConfig+0x248>
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1e:	d802      	bhi.n	8002b26 <UART_SetConfig+0x22e>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <UART_SetConfig+0x23c>
 8002b24:	e072      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2a:	d006      	beq.n	8002b3a <UART_SetConfig+0x242>
 8002b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b30:	d009      	beq.n	8002b46 <UART_SetConfig+0x24e>
 8002b32:	e06b      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b34:	2301      	movs	r3, #1
 8002b36:	75fb      	strb	r3, [r7, #23]
 8002b38:	e068      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	75fb      	strb	r3, [r7, #23]
 8002b3e:	e065      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b40:	2304      	movs	r3, #4
 8002b42:	75fb      	strb	r3, [r7, #23]
 8002b44:	e062      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b46:	2308      	movs	r3, #8
 8002b48:	75fb      	strb	r3, [r7, #23]
 8002b4a:	e05f      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <UART_SetConfig+0x308>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d120      	bne.n	8002b98 <UART_SetConfig+0x2a0>
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <UART_SetConfig+0x2f0>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b64:	d012      	beq.n	8002b8c <UART_SetConfig+0x294>
 8002b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6a:	d802      	bhi.n	8002b72 <UART_SetConfig+0x27a>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d007      	beq.n	8002b80 <UART_SetConfig+0x288>
 8002b70:	e04c      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b76:	d006      	beq.n	8002b86 <UART_SetConfig+0x28e>
 8002b78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b7c:	d009      	beq.n	8002b92 <UART_SetConfig+0x29a>
 8002b7e:	e045      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]
 8002b84:	e042      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b86:	2302      	movs	r3, #2
 8002b88:	75fb      	strb	r3, [r7, #23]
 8002b8a:	e03f      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	75fb      	strb	r3, [r7, #23]
 8002b90:	e03c      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b92:	2308      	movs	r3, #8
 8002b94:	75fb      	strb	r3, [r7, #23]
 8002b96:	e039      	b.n	8002c0c <UART_SetConfig+0x314>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <UART_SetConfig+0x30c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d135      	bne.n	8002c0e <UART_SetConfig+0x316>
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <UART_SetConfig+0x2f0>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb0:	d012      	beq.n	8002bd8 <UART_SetConfig+0x2e0>
 8002bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb6:	d802      	bhi.n	8002bbe <UART_SetConfig+0x2c6>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <UART_SetConfig+0x2d4>
 8002bbc:	e026      	b.n	8002c0c <UART_SetConfig+0x314>
 8002bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc2:	d006      	beq.n	8002bd2 <UART_SetConfig+0x2da>
 8002bc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bc8:	d01e      	beq.n	8002c08 <UART_SetConfig+0x310>
 8002bca:	e01f      	b.n	8002c0c <UART_SetConfig+0x314>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]
 8002bd0:	e01c      	b.n	8002c0c <UART_SetConfig+0x314>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	75fb      	strb	r3, [r7, #23]
 8002bd6:	e019      	b.n	8002c0c <UART_SetConfig+0x314>
 8002bd8:	2304      	movs	r3, #4
 8002bda:	75fb      	strb	r3, [r7, #23]
 8002bdc:	e016      	b.n	8002c0c <UART_SetConfig+0x314>
 8002bde:	bf00      	nop
 8002be0:	efff69f3 	.word	0xefff69f3
 8002be4:	40011000 	.word	0x40011000
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40004400 	.word	0x40004400
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40004c00 	.word	0x40004c00
 8002bf8:	40005000 	.word	0x40005000
 8002bfc:	40011400 	.word	0x40011400
 8002c00:	40007800 	.word	0x40007800
 8002c04:	40007c00 	.word	0x40007c00
 8002c08:	2308      	movs	r3, #8
 8002c0a:	75fb      	strb	r3, [r7, #23]
 8002c0c:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c16:	d16c      	bne.n	8002cf2 <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d854      	bhi.n	8002cc8 <UART_SetConfig+0x3d0>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <UART_SetConfig+0x32c>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08002c65 	.word	0x08002c65
 8002c2c:	08002c81 	.word	0x08002c81
 8002c30:	08002cc9 	.word	0x08002cc9
 8002c34:	08002c97 	.word	0x08002c97
 8002c38:	08002cc9 	.word	0x08002cc9
 8002c3c:	08002cc9 	.word	0x08002cc9
 8002c40:	08002cc9 	.word	0x08002cc9
 8002c44:	08002cb3 	.word	0x08002cb3
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c48:	f7fe fe48 	bl	80018dc <HAL_RCC_GetPCLK1Freq>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	005a      	lsls	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	441a      	add	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	82bb      	strh	r3, [r7, #20]
      break;
 8002c62:	e034      	b.n	8002cce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c64:	f7fe fe4e 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	005a      	lsls	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	82bb      	strh	r3, [r7, #20]
      break;
 8002c7e:	e026      	b.n	8002cce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	085a      	lsrs	r2, r3, #1
 8002c86:	4b51      	ldr	r3, [pc, #324]	; (8002dcc <UART_SetConfig+0x4d4>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6852      	ldr	r2, [r2, #4]
 8002c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c92:	82bb      	strh	r3, [r7, #20]
      break;
 8002c94:	e01b      	b.n	8002cce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c96:	f7fe fd3d 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	005a      	lsls	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	441a      	add	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	82bb      	strh	r3, [r7, #20]
      break;
 8002cb0:	e00d      	b.n	8002cce <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	82bb      	strh	r3, [r7, #20]
      break;
 8002cc6:	e002      	b.n	8002cce <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	74fb      	strb	r3, [r7, #19]
      break;
 8002ccc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002cce:	8abb      	ldrh	r3, [r7, #20]
 8002cd0:	f023 030f 	bic.w	r3, r3, #15
 8002cd4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cd6:	8abb      	ldrh	r3, [r7, #20]
 8002cd8:	105b      	asrs	r3, r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	897b      	ldrh	r3, [r7, #10]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	897a      	ldrh	r2, [r7, #10]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e067      	b.n	8002dc2 <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d861      	bhi.n	8002dbc <UART_SetConfig+0x4c4>
 8002cf8:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <UART_SetConfig+0x408>)
 8002cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfe:	bf00      	nop
 8002d00:	08002d25 	.word	0x08002d25
 8002d04:	08002d45 	.word	0x08002d45
 8002d08:	08002d65 	.word	0x08002d65
 8002d0c:	08002dbd 	.word	0x08002dbd
 8002d10:	08002d81 	.word	0x08002d81
 8002d14:	08002dbd 	.word	0x08002dbd
 8002d18:	08002dbd 	.word	0x08002dbd
 8002d1c:	08002dbd 	.word	0x08002dbd
 8002d20:	08002da1 	.word	0x08002da1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681c      	ldr	r4, [r3, #0]
 8002d28:	f7fe fdd8 	bl	80018dc <HAL_RCC_GetPCLK1Freq>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	441a      	add	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	60e3      	str	r3, [r4, #12]
      break;
 8002d42:	e03e      	b.n	8002dc2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681c      	ldr	r4, [r3, #0]
 8002d48:	f7fe fddc 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	60e3      	str	r3, [r4, #12]
      break;
 8002d62:	e02e      	b.n	8002dc2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	0859      	lsrs	r1, r3, #1
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <UART_SetConfig+0x4d8>)
 8002d70:	440b      	add	r3, r1
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	6849      	ldr	r1, [r1, #4]
 8002d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	60d3      	str	r3, [r2, #12]
      break;
 8002d7e:	e020      	b.n	8002dc2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681c      	ldr	r4, [r3, #0]
 8002d84:	f7fe fcc6 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	441a      	add	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	60e3      	str	r3, [r4, #12]
      break;
 8002d9e:	e010      	b.n	8002dc2 <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6852      	ldr	r2, [r2, #4]
 8002da8:	0852      	lsrs	r2, r2, #1
 8002daa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6852      	ldr	r2, [r2, #4]
 8002db2:	fbb1 f2f2 	udiv	r2, r1, r2
 8002db6:	b292      	uxth	r2, r2
 8002db8:	60da      	str	r2, [r3, #12]
      break;
 8002dba:	e002      	b.n	8002dc2 <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	74fb      	strb	r3, [r7, #19]
      break;
 8002dc0:	bf00      	nop
    }
  }

  return ret;
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]

}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}
 8002dcc:	01e84800 	.word	0x01e84800
 8002dd0:	00f42400 	.word	0x00f42400

08002dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	6852      	ldr	r2, [r2, #4]
 8002df2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	6852      	ldr	r2, [r2, #4]
 8002e36:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	6852      	ldr	r2, [r2, #4]
 8002e58:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	6892      	ldr	r2, [r2, #8]
 8002e7a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	6892      	ldr	r2, [r2, #8]
 8002e9c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01a      	beq.n	8002eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	6852      	ldr	r2, [r2, #4]
 8002ebe:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed2:	d10a      	bne.n	8002eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	6852      	ldr	r2, [r2, #4]
 8002ede:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	6852      	ldr	r2, [r2, #4]
 8002f00:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f2a:	f7fd fbcb 	bl	80006c4 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d10e      	bne.n	8002f5c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fb71 	bl	8002634 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e00c      	b.n	8002f76 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <DigitalOutDriver_init>:
 */

#include "digital_out_driver.h"

DigitalOutDriver_Status_TypeDef DigitalOutDriver_init(DigitalOutDriver_TypeDef* pSelf, DigitalOutDriver_Port_TypeDef* port, DigitalOutDriver_Pin_TypeDef* pin,
		DigitalOutDriver_StartLevel_TypeDef startLevel){
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	70fb      	strb	r3, [r7, #3]
	if (pSelf->state != DigitalOutDriver_State_UnInitialized){
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <DigitalOutDriver_init+0x1a>
		return DigitalOutDriver_Status_Errror;
 8002f94:	2302      	movs	r3, #2
 8002f96:	e02c      	b.n	8002ff2 <DigitalOutDriver_init+0x74>
	}

	pSelf->state = DigitalOutDriver_State_DuringInitalization;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]

	pSelf->port				= port;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	605a      	str	r2, [r3, #4]
	pSelf->pin				= pin;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
	pSelf->onTimeMs			= 0;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
	pSelf->offTimeMs		= 0;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
	pSelf->onOffTimeCounter	= 0;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	615a      	str	r2, [r3, #20]

	DigitalOutDriver_Status_TypeDef ret;

	switch (startLevel) {
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d109      	bne.n	8002fd6 <DigitalOutDriver_init+0x58>
	case DigitalOutDriver_StartLevel_High:
		if ((ret = DigitalOutDriver_setHigh(pSelf)) != DigitalOutDriver_Status_OK){
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f829 	bl	800301a <DigitalOutDriver_setHigh>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <DigitalOutDriver_init+0x6c>
			return ret;
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	e00d      	b.n	8002ff2 <DigitalOutDriver_init+0x74>
		}
		break;
	case DigitalOutDriver_StartLevel_Low:
	default:
		if ((ret = DigitalOutDriver_setLow(pSelf)) != DigitalOutDriver_Status_OK){
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f83a 	bl	8003050 <DigitalOutDriver_setLow>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	75fb      	strb	r3, [r7, #23]
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <DigitalOutDriver_init+0x70>
			return ret;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	e003      	b.n	8002ff2 <DigitalOutDriver_init+0x74>
		break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <DigitalOutDriver_init+0x72>
		}
		break;
 8002fee:	bf00      	nop
	}

	return DigitalOutDriver_Status_OK;
 8002ff0:	2300      	movs	r3, #0

}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <DigitalOutDriver_getState>:

DigitalOutDriver_Status_TypeDef DigitalOutDriver_getState(DigitalOutDriver_TypeDef* pSelf, DigitalOutDriver_State_TypeDef* pRetState){
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
	*pRetState = pSelf->state;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	701a      	strb	r2, [r3, #0]

	return DigitalOutDriver_Status_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <DigitalOutDriver_setHigh>:

DigitalOutDriver_Status_TypeDef DigitalOutDriver_setHigh(DigitalOutDriver_TypeDef* pSelf){
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
	if (pSelf->state == DigitalOutDriver_State_UnInitialized){
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <DigitalOutDriver_setHigh+0x14>
		return DigitalOutDriver_Status_UnInitializedErrror;
 800302a:	2301      	movs	r3, #1
 800302c:	e00c      	b.n	8003048 <DigitalOutDriver_setHigh+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *(pSelf->pin), GPIO_PIN_SET);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6858      	ldr	r0, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	4619      	mov	r1, r3
 800303c:	f7fd ffa6 	bl	8000f8c <HAL_GPIO_WritePin>

	pSelf->state = DigitalOutDriver_State_High_Stady;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2204      	movs	r2, #4
 8003044:	701a      	strb	r2, [r3, #0]

	return DigitalOutDriver_Status_OK;
 8003046:	2300      	movs	r3, #0

}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <DigitalOutDriver_setLow>:

DigitalOutDriver_Status_TypeDef DigitalOutDriver_setLow(DigitalOutDriver_TypeDef* pSelf){
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	if (pSelf->state == DigitalOutDriver_State_UnInitialized){
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <DigitalOutDriver_setLow+0x14>
		return DigitalOutDriver_Status_UnInitializedErrror;
 8003060:	2301      	movs	r3, #1
 8003062:	e00c      	b.n	800307e <DigitalOutDriver_setLow+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *(pSelf->pin), GPIO_PIN_RESET);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6858      	ldr	r0, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	4619      	mov	r1, r3
 8003072:	f7fd ff8b 	bl	8000f8c <HAL_GPIO_WritePin>

	pSelf->state = DigitalOutDriver_State_Low;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	701a      	strb	r2, [r3, #0]

	return DigitalOutDriver_Status_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <DigitalOutDriver_toggle>:

	return DigitalOutDriver_Status_OK;

}

DigitalOutDriver_Status_TypeDef DigitalOutDriver_toggle(DigitalOutDriver_TypeDef* pSelf){
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
	if (pSelf->state == DigitalOutDriver_State_UnInitialized){
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <DigitalOutDriver_toggle+0x14>
		return DigitalOutDriver_Status_UnInitializedErrror;
 8003096:	2301      	movs	r3, #1
 8003098:	e01b      	b.n	80030d2 <DigitalOutDriver_toggle+0x4c>
	}

	DigitalOutDriver_State_TypeDef state;
	if (DigitalOutDriver_getState(pSelf, &state) != DigitalOutDriver_Status_OK){
 800309a:	f107 030f 	add.w	r3, r7, #15
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ffaa 	bl	8002ffa <DigitalOutDriver_getState>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <DigitalOutDriver_toggle+0x2a>
		return DigitalOutDriver_Status_Errror;
 80030ac:	2302      	movs	r3, #2
 80030ae:	e010      	b.n	80030d2 <DigitalOutDriver_toggle+0x4c>
	}

	if (state == DigitalOutDriver_State_High_Stady){
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d104      	bne.n	80030c0 <DigitalOutDriver_toggle+0x3a>
		return DigitalOutDriver_setLow(pSelf);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ffca 	bl	8003050 <DigitalOutDriver_setLow>
 80030bc:	4603      	mov	r3, r0
 80030be:	e008      	b.n	80030d2 <DigitalOutDriver_toggle+0x4c>
	} else if (state == DigitalOutDriver_State_Low){
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d104      	bne.n	80030d0 <DigitalOutDriver_toggle+0x4a>
		return DigitalOutDriver_setHigh(pSelf);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffa7 	bl	800301a <DigitalOutDriver_setHigh>
 80030cc:	4603      	mov	r3, r0
 80030ce:	e000      	b.n	80030d2 <DigitalOutDriver_toggle+0x4c>
	} else {
		return DigitalOutDriver_Status_Errror;
 80030d0:	2302      	movs	r3, #2
	}
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	; 0x30
 80030e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	4a88      	ldr	r2, [pc, #544]	; (8003304 <MX_GPIO_Init+0x228>)
 80030e4:	4b87      	ldr	r3, [pc, #540]	; (8003304 <MX_GPIO_Init+0x228>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b85      	ldr	r3, [pc, #532]	; (8003304 <MX_GPIO_Init+0x228>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030fa:	4a82      	ldr	r2, [pc, #520]	; (8003304 <MX_GPIO_Init+0x228>)
 80030fc:	4b81      	ldr	r3, [pc, #516]	; (8003304 <MX_GPIO_Init+0x228>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b7f      	ldr	r3, [pc, #508]	; (8003304 <MX_GPIO_Init+0x228>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4a7c      	ldr	r2, [pc, #496]	; (8003304 <MX_GPIO_Init+0x228>)
 8003114:	4b7b      	ldr	r3, [pc, #492]	; (8003304 <MX_GPIO_Init+0x228>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b79      	ldr	r3, [pc, #484]	; (8003304 <MX_GPIO_Init+0x228>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	4a76      	ldr	r2, [pc, #472]	; (8003304 <MX_GPIO_Init+0x228>)
 800312c:	4b75      	ldr	r3, [pc, #468]	; (8003304 <MX_GPIO_Init+0x228>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <MX_GPIO_Init+0x228>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	4a70      	ldr	r2, [pc, #448]	; (8003304 <MX_GPIO_Init+0x228>)
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <MX_GPIO_Init+0x228>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b6d      	ldr	r3, [pc, #436]	; (8003304 <MX_GPIO_Init+0x228>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800315a:	4a6a      	ldr	r2, [pc, #424]	; (8003304 <MX_GPIO_Init+0x228>)
 800315c:	4b69      	ldr	r3, [pc, #420]	; (8003304 <MX_GPIO_Init+0x228>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <MX_GPIO_Init+0x228>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DUBUG_OUT_0_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003172:	2200      	movs	r2, #0
 8003174:	f644 0181 	movw	r1, #18561	; 0x4881
 8003178:	4863      	ldr	r0, [pc, #396]	; (8003308 <MX_GPIO_Init+0x22c>)
 800317a:	f7fd ff07 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC05_KEY_GPIO_Port, HC05_KEY_Pin, GPIO_PIN_SET);
 800317e:	2201      	movs	r2, #1
 8003180:	2102      	movs	r1, #2
 8003182:	4861      	ldr	r0, [pc, #388]	; (8003308 <MX_GPIO_Init+0x22c>)
 8003184:	f7fd ff02 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	485f      	ldr	r0, [pc, #380]	; (800330c <MX_GPIO_Init+0x230>)
 800318e:	f7fd fefd 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003198:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <MX_GPIO_Init+0x234>)
 800319a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	4619      	mov	r1, r3
 80031a6:	485b      	ldr	r0, [pc, #364]	; (8003314 <MX_GPIO_Init+0x238>)
 80031a8:	f7fd fc3a 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80031ac:	2332      	movs	r3, #50	; 0x32
 80031ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b0:	2302      	movs	r3, #2
 80031b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b8:	2303      	movs	r3, #3
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031bc:	230b      	movs	r3, #11
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4853      	ldr	r0, [pc, #332]	; (8003314 <MX_GPIO_Init+0x238>)
 80031c8:	f7fd fc2a 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80031cc:	2386      	movs	r3, #134	; 0x86
 80031ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031dc:	230b      	movs	r3, #11
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	484c      	ldr	r0, [pc, #304]	; (8003318 <MX_GPIO_Init+0x23c>)
 80031e8:	f7fd fc1a 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DUBUG_OUT_0_Pin|LD3_Pin|LD2_Pin;
 80031ec:	f644 0381 	movw	r3, #18561	; 0x4881
 80031f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f2:	2301      	movs	r3, #1
 80031f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fe:	f107 031c 	add.w	r3, r7, #28
 8003202:	4619      	mov	r1, r3
 8003204:	4840      	ldr	r0, [pc, #256]	; (8003308 <MX_GPIO_Init+0x22c>)
 8003206:	f7fd fc0b 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HC05_KEY_Pin;
 800320a:	2302      	movs	r3, #2
 800320c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800320e:	2311      	movs	r3, #17
 8003210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003212:	2301      	movs	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HC05_KEY_GPIO_Port, &GPIO_InitStruct);
 800321a:	f107 031c 	add.w	r3, r7, #28
 800321e:	4619      	mov	r1, r3
 8003220:	4839      	ldr	r0, [pc, #228]	; (8003308 <MX_GPIO_Init+0x22c>)
 8003222:	f7fd fbfd 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800322a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	2302      	movs	r3, #2
 800322e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003234:	2303      	movs	r3, #3
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003238:	230b      	movs	r3, #11
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	4619      	mov	r1, r3
 8003242:	4831      	ldr	r0, [pc, #196]	; (8003308 <MX_GPIO_Init+0x22c>)
 8003244:	f7fd fbec 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003248:	f44f 7340 	mov.w	r3, #768	; 0x300
 800324c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800325a:	2307      	movs	r3, #7
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	4619      	mov	r1, r3
 8003264:	482d      	ldr	r0, [pc, #180]	; (800331c <MX_GPIO_Init+0x240>)
 8003266:	f7fd fbdb 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800326a:	2340      	movs	r3, #64	; 0x40
 800326c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800326e:	2301      	movs	r3, #1
 8003270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	4619      	mov	r1, r3
 8003280:	4822      	ldr	r0, [pc, #136]	; (800330c <MX_GPIO_Init+0x230>)
 8003282:	f7fd fbcd 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	481c      	ldr	r0, [pc, #112]	; (800330c <MX_GPIO_Init+0x230>)
 800329a:	f7fd fbc1 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800329e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80032a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032b0:	230a      	movs	r3, #10
 80032b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	4817      	ldr	r0, [pc, #92]	; (8003318 <MX_GPIO_Init+0x23c>)
 80032bc:	f7fd fbb0 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80032c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032ce:	f107 031c 	add.w	r3, r7, #28
 80032d2:	4619      	mov	r1, r3
 80032d4:	4810      	ldr	r0, [pc, #64]	; (8003318 <MX_GPIO_Init+0x23c>)
 80032d6:	f7fd fba3 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80032da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80032de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032ec:	230b      	movs	r3, #11
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	4619      	mov	r1, r3
 80032f6:	4805      	ldr	r0, [pc, #20]	; (800330c <MX_GPIO_Init+0x230>)
 80032f8:	f7fd fb92 	bl	8000a20 <HAL_GPIO_Init>

}
 80032fc:	bf00      	nop
 80032fe:	3730      	adds	r7, #48	; 0x30
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	40020400 	.word	0x40020400
 800330c:	40021800 	.word	0x40021800
 8003310:	10110000 	.word	0x10110000
 8003314:	40020800 	.word	0x40020800
 8003318:	40020000 	.word	0x40020000
 800331c:	40020c00 	.word	0x40020c00

08003320 <HC05Driver_init>:
static HC05Driver_Status_TypeDef HC05Driver_setDataMode(HC05Driver_TypeDef* pSelf);

HC05Driver_State_TypeDef HC05Driver_init(HC05Driver_TypeDef* pSelf, HC05Driver_Role_TypeDef role, \
		UartDriver_TypeDef* pUartDriver, DigitalOutDriver_TypeDef* pKeyPinDriver, uint32_t baudRate,
		char* name, uint16_t password)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	460b      	mov	r3, r1
 800332e:	72fb      	strb	r3, [r7, #11]

	if (pSelf->state != HC05Driver_State_UnInitialized){
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	7a1b      	ldrb	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HC05Driver_init+0x1c>
		return HC05Driver_Status_Error;
 8003338:	2305      	movs	r3, #5
 800333a:	e0b1      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if (role != HC05Driver_Role_Slave){
 800333c:	7afb      	ldrb	r3, [r7, #11]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HC05Driver_init+0x26>
		return HC05Driver_Status_UnsuportedError;
 8003342:	2304      	movs	r3, #4
 8003344:	e0ac      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	HC05Driver_Status_TypeDef ret = HC05Driver_Status_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	757b      	strb	r3, [r7, #21]

	pSelf->state = HC05Driver_State_HardAT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	721a      	strb	r2, [r3, #8]
	pSelf->pUartDriver = pUartDriver;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
	pSelf->pKeyPinDriver = pKeyPinDriver;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	605a      	str	r2, [r3, #4]
	pSelf->dataBaudRate = baudRate;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	60da      	str	r2, [r3, #12]

	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8003362:	2300      	movs	r3, #0
 8003364:	82fb      	strh	r3, [r7, #22]
 8003366:	e017      	b.n	8003398 <HC05Driver_init+0x78>
		pSelf->callbacks[i] 			= NULL;
 8003368:	8afb      	ldrh	r3, [r7, #22]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	3324      	adds	r3, #36	; 0x24
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	2200      	movs	r2, #0
 8003374:	605a      	str	r2, [r3, #4]
		pSelf->callbackArgs[i] 			= NULL;
 8003376:	8afb      	ldrh	r3, [r7, #22]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	3326      	adds	r3, #38	; 0x26
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	2200      	movs	r2, #0
 8003382:	605a      	str	r2, [r3, #4]
		pSelf->callbacksIterators[i] 	= -1;
 8003384:	8afa      	ldrh	r2, [r7, #22]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3248      	adds	r2, #72	; 0x48
 800338a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800338e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8003392:	8afb      	ldrh	r3, [r7, #22]
 8003394:	3301      	adds	r3, #1
 8003396:	82fb      	strh	r3, [r7, #22]
 8003398:	8afb      	ldrh	r3, [r7, #22]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d9e4      	bls.n	8003368 <HC05Driver_init+0x48>
	}

	memset(pSelf->buffer, 0, HC05_BUFFER_SIZE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3310      	adds	r3, #16
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fdae 	bl	8004f08 <memset>

	uint32_t	tmpUartBaudRate;
	if (UartDriver_getBaudRate(pSelf->pUartDriver, &tmpUartBaudRate) != UartDriver_Status_OK){
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f107 0210 	add.w	r2, r7, #16
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 faa6 	bl	8004908 <UartDriver_getBaudRate>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HC05Driver_init+0xa6>
		return HC05Driver_Status_Error;
 80033c2:	2305      	movs	r3, #5
 80033c4:	e06c      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if (tmpUartBaudRate != HC05_HARD_AT_BAUDRATE){
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
 80033cc:	d00b      	beq.n	80033e6 <HC05Driver_init+0xc6>
		if (UartDriver_setBaudRate(pSelf->pUartDriver, HC05_HARD_AT_BAUDRATE) != UartDriver_Status_OK){
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f44f 4116 	mov.w	r1, #38400	; 0x9600
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 faac 	bl	8004934 <UartDriver_setBaudRate>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HC05Driver_init+0xc6>
			return HC05Driver_Status_Error;
 80033e2:	2305      	movs	r3, #5
 80033e4:	e05c      	b.n	80034a0 <HC05Driver_init+0x180>
		}
	}

	HAL_Delay(HC05_START_UP_DELAY_MS);
 80033e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033ea:	f7fd f977 	bl	80006dc <HAL_Delay>

	if ((ret = HC05Driver_sendTestATCommand(pSelf)) != HC05Driver_Status_OK){
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f85a 	bl	80034a8 <HC05Driver_sendTestATCommand>
 80033f4:	4603      	mov	r3, r0
 80033f6:	757b      	strb	r3, [r7, #21]
 80033f8:	7d7b      	ldrb	r3, [r7, #21]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HC05Driver_init+0xe2>
		return ret;
 80033fe:	7d7b      	ldrb	r3, [r7, #21]
 8003400:	e04e      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setDeviceName(pSelf, name)) != HC05Driver_Status_OK){
 8003402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fb8f 	bl	8003b28 <HC05Driver_setDeviceName>
 800340a:	4603      	mov	r3, r0
 800340c:	757b      	strb	r3, [r7, #21]
 800340e:	7d7b      	ldrb	r3, [r7, #21]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HC05Driver_init+0xf8>
		return ret;
 8003414:	7d7b      	ldrb	r3, [r7, #21]
 8003416:	e043      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setBaudRate(pSelf, pSelf->dataBaudRate)) != HC05Driver_Status_OK){
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4619      	mov	r1, r3
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f938 	bl	8003694 <HC05Driver_setBaudRate>
 8003424:	4603      	mov	r3, r0
 8003426:	757b      	strb	r3, [r7, #21]
 8003428:	7d7b      	ldrb	r3, [r7, #21]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HC05Driver_init+0x112>
		return ret;
 800342e:	7d7b      	ldrb	r3, [r7, #21]
 8003430:	e036      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setPassword(pSelf, password)) != HC05Driver_Status_OK){
 8003432:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003434:	4619      	mov	r1, r3
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fa62 	bl	8003900 <HC05Driver_setPassword>
 800343c:	4603      	mov	r3, r0
 800343e:	757b      	strb	r3, [r7, #21]
 8003440:	7d7b      	ldrb	r3, [r7, #21]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HC05Driver_init+0x12a>
		return ret;
 8003446:	7d7b      	ldrb	r3, [r7, #21]
 8003448:	e02a      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setDeviceRole(pSelf, role)) != HC05Driver_Status_OK){
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	4619      	mov	r1, r3
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fc80 	bl	8003d54 <HC05Driver_setDeviceRole>
 8003454:	4603      	mov	r3, r0
 8003456:	757b      	strb	r3, [r7, #21]
 8003458:	7d7b      	ldrb	r3, [r7, #21]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HC05Driver_init+0x142>
		return ret;
 800345e:	7d7b      	ldrb	r3, [r7, #21]
 8003460:	e01e      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_resetNormalMode(pSelf)) != HC05Driver_Status_OK){
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fec8 	bl	80041f8 <HC05Driver_resetNormalMode>
 8003468:	4603      	mov	r3, r0
 800346a:	757b      	strb	r3, [r7, #21]
 800346c:	7d7b      	ldrb	r3, [r7, #21]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HC05Driver_init+0x156>
		return ret;
 8003472:	7d7b      	ldrb	r3, [r7, #21]
 8003474:	e014      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_sendTestATCommand(pSelf)) != HC05Driver_Status_OK){
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f816 	bl	80034a8 <HC05Driver_sendTestATCommand>
 800347c:	4603      	mov	r3, r0
 800347e:	757b      	strb	r3, [r7, #21]
 8003480:	7d7b      	ldrb	r3, [r7, #21]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HC05Driver_init+0x16a>
		return ret;
 8003486:	7d7b      	ldrb	r3, [r7, #21]
 8003488:	e00a      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	if ((ret = HC05Driver_setDataMode(pSelf)) != HC05Driver_Status_OK){
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fe66 	bl	800415c <HC05Driver_setDataMode>
 8003490:	4603      	mov	r3, r0
 8003492:	757b      	strb	r3, [r7, #21]
 8003494:	7d7b      	ldrb	r3, [r7, #21]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HC05Driver_init+0x17e>
		return ret;
 800349a:	7d7b      	ldrb	r3, [r7, #21]
 800349c:	e000      	b.n	80034a0 <HC05Driver_init+0x180>
	}

	return HC05Driver_Status_OK;
 800349e:	2300      	movs	r3, #0

}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HC05Driver_sendTestATCommand>:

HC05Driver_Status_TypeDef HC05Driver_sendTestATCommand(HC05Driver_TypeDef* pSelf){
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7a1b      	ldrb	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HC05Driver_sendTestATCommand+0x14>
		return HC05Driver_Status_UnInitializedError;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e047      	b.n	800354c <HC05Driver_sendTestATCommand+0xa4>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 ff51 	bl	8004364 <HC05Driver_setATMode>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HC05Driver_sendTestATCommand+0x28>
		return ret;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	e03d      	b.n	800354c <HC05Driver_sendTestATCommand+0xa4>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3310      	adds	r3, #16
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	491f      	ldr	r1, [pc, #124]	; (8003554 <HC05Driver_sendTestATCommand+0xac>)
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fd65 	bl	8004fa8 <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3310      	adds	r3, #16
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	491c      	ldr	r1, [pc, #112]	; (8003558 <HC05Driver_sendTestATCommand+0xb0>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fd3a 	bl	8004f60 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681c      	ldr	r4, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f103 0510 	add.w	r5, r3, #16
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3310      	adds	r3, #16
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc feaa 	bl	8000254 <strlen>
 8003500:	4603      	mov	r3, r0
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f103 0110 	add.w	r1, r3, #16
 800350a:	230a      	movs	r3, #10
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	460b      	mov	r3, r1
 8003514:	4629      	mov	r1, r5
 8003516:	4620      	mov	r0, r4
 8003518:	f001 fab5 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HC05Driver_sendTestATCommand+0x7e>
		return HC05Driver_Status_Error;
 8003522:	2305      	movs	r3, #5
 8003524:	e012      	b.n	800354c <HC05Driver_sendTestATCommand+0xa4>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3310      	adds	r3, #16
 800352a:	490b      	ldr	r1, [pc, #44]	; (8003558 <HC05Driver_sendTestATCommand+0xb0>)
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fd77 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3310      	adds	r3, #16
 8003536:	2202      	movs	r2, #2
 8003538:	4908      	ldr	r1, [pc, #32]	; (800355c <HC05Driver_sendTestATCommand+0xb4>)
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fd49 	bl	8004fd2 <strncmp>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HC05Driver_sendTestATCommand+0xa2>
		return HC05Driver_Status_Error;
 8003546:	2305      	movs	r3, #5
 8003548:	e000      	b.n	800354c <HC05Driver_sendTestATCommand+0xa4>
	}

	return HC05Driver_Status_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	08005a70 	.word	0x08005a70
 8003558:	08005a74 	.word	0x08005a74
 800355c:	08005a78 	.word	0x08005a78

08003560 <HC05Driver_getBaudRate>:
	}

	return HC05Driver_Status_OK;
}

HC05Driver_Status_TypeDef HC05Driver_getBaudRate(HC05Driver_TypeDef* pSelf, uint32_t* pRetBaudRate){
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7a1b      	ldrb	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HC05Driver_getBaudRate+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003572:	2301      	movs	r3, #1
 8003574:	e07e      	b.n	8003674 <HC05Driver_getBaudRate+0x114>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fef4 	bl	8004364 <HC05Driver_setATMode>
 800357c:	4603      	mov	r3, r0
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HC05Driver_getBaudRate+0x2a>
		return ret;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	e074      	b.n	8003674 <HC05Driver_getBaudRate+0x114>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3310      	adds	r3, #16
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	493a      	ldr	r1, [pc, #232]	; (800367c <HC05Driver_getBaudRate+0x11c>)
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fd08 	bl	8004fa8 <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_UART_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3310      	adds	r3, #16
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	4938      	ldr	r1, [pc, #224]	; (8003680 <HC05Driver_getBaudRate+0x120>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fcdd 	bl	8004f60 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3310      	adds	r3, #16
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	4935      	ldr	r1, [pc, #212]	; (8003684 <HC05Driver_getBaudRate+0x124>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 fcd6 	bl	8004f60 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681c      	ldr	r4, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f103 0510 	add.w	r5, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3310      	adds	r3, #16
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fc fe46 	bl	8000254 <strlen>
 80035c8:	4603      	mov	r3, r0
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f103 0110 	add.w	r1, r3, #16
 80035d2:	230a      	movs	r3, #10
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	460b      	mov	r3, r1
 80035dc:	4629      	mov	r1, r5
 80035de:	4620      	mov	r0, r4
 80035e0:	f001 fa51 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HC05Driver_getBaudRate+0x8e>
		return HC05Driver_Status_Error;
 80035ea:	2305      	movs	r3, #5
 80035ec:	e042      	b.n	8003674 <HC05Driver_getBaudRate+0x114>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3310      	adds	r3, #16
 80035f2:	4924      	ldr	r1, [pc, #144]	; (8003684 <HC05Driver_getBaudRate+0x124>)
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 fd13 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_UART_AT_COMMNAND_RESPONSE, strlen(HC05_GET_UART_AT_COMMNAND_RESPONSE)) != 0){
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3310      	adds	r3, #16
 80035fe:	2206      	movs	r2, #6
 8003600:	4921      	ldr	r1, [pc, #132]	; (8003688 <HC05Driver_getBaudRate+0x128>)
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fce5 	bl	8004fd2 <strncmp>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HC05Driver_getBaudRate+0xb2>
		return HC05Driver_Status_Error;
 800360e:	2305      	movs	r3, #5
 8003610:	e030      	b.n	8003674 <HC05Driver_getBaudRate+0x114>
	}

	strtok ((char*)pSelf->buffer, ",");
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3310      	adds	r3, #16
 8003616:	491d      	ldr	r1, [pc, #116]	; (800368c <HC05Driver_getBaudRate+0x12c>)
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fd01 	bl	8005020 <strtok>
	*pRetBaudRate = atoi((char*)(pSelf->buffer + strlen(HC05_GET_UART_AT_COMMNAND_RESPONSE)));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3310      	adds	r3, #16
 8003622:	3306      	adds	r3, #6
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fc46 	bl	8004eb6 <atoi>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	601a      	str	r2, [r3, #0]
	//TODO tutaj sprawdzic parity i bity stopu

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 0110 	add.w	r1, r3, #16
 800363c:	230a      	movs	r3, #10
 800363e:	2280      	movs	r2, #128	; 0x80
 8003640:	f001 f9c8 	bl	80049d4 <UartDriver_receiveBytesTerminationSign>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HC05Driver_getBaudRate+0xee>
		return HC05Driver_Status_Error;
 800364a:	2305      	movs	r3, #5
 800364c:	e012      	b.n	8003674 <HC05Driver_getBaudRate+0x114>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3310      	adds	r3, #16
 8003652:	490c      	ldr	r1, [pc, #48]	; (8003684 <HC05Driver_getBaudRate+0x124>)
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fce3 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3310      	adds	r3, #16
 800365e:	2202      	movs	r2, #2
 8003660:	490b      	ldr	r1, [pc, #44]	; (8003690 <HC05Driver_getBaudRate+0x130>)
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fcb5 	bl	8004fd2 <strncmp>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HC05Driver_getBaudRate+0x112>
		return HC05Driver_Status_Error;
 800366e:	2305      	movs	r3, #5
 8003670:	e000      	b.n	8003674 <HC05Driver_getBaudRate+0x114>
	}

	return HC05Driver_Status_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bdb0      	pop	{r4, r5, r7, pc}
 800367c:	08005a70 	.word	0x08005a70
 8003680:	08005a84 	.word	0x08005a84
 8003684:	08005a74 	.word	0x08005a74
 8003688:	08005a8c 	.word	0x08005a8c
 800368c:	08005a94 	.word	0x08005a94
 8003690:	08005a78 	.word	0x08005a78

08003694 <HC05Driver_setBaudRate>:

HC05Driver_Status_TypeDef HC05Driver_setBaudRate(HC05Driver_TypeDef* pSelf, uint32_t baudRate){
 8003694:	b5b0      	push	{r4, r5, r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7a1b      	ldrb	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HC05Driver_setBaudRate+0x16>
		return HC05Driver_Status_UnInitializedError;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e088      	b.n	80037bc <HC05Driver_setBaudRate+0x128>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fe5a 	bl	8004364 <HC05Driver_setATMode>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HC05Driver_setBaudRate+0x2a>
		return ret;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	e07e      	b.n	80037bc <HC05Driver_setBaudRate+0x128>
	}

	uint32_t	currentBaudRate;
	if ((ret = HC05Driver_getBaudRate(pSelf, &currentBaudRate)) != HC05Driver_Status_OK){
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff4b 	bl	8003560 <HC05Driver_getBaudRate>
 80036ca:	4603      	mov	r3, r0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HC05Driver_setBaudRate+0x44>
		return ret;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	e071      	b.n	80037bc <HC05Driver_setBaudRate+0x128>
	}

	if (baudRate != currentBaudRate){
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d06c      	beq.n	80037ba <HC05Driver_setBaudRate+0x126>

							strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3310      	adds	r3, #16
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	4937      	ldr	r1, [pc, #220]	; (80037c4 <HC05Driver_setBaudRate+0x130>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 fc5d 	bl	8004fa8 <strlcpy>
		uint16_t length = 	strlcat((char*)pSelf->buffer, HC05_SET_UART_AT_COMMNAND, HC05_BUFFER_SIZE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3310      	adds	r3, #16
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	4934      	ldr	r1, [pc, #208]	; (80037c8 <HC05Driver_setBaudRate+0x134>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fc32 	bl	8004f60 <strlcat>
 80036fc:	4603      	mov	r3, r0
 80036fe:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, "%lu", baudRate);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f103 0210 	add.w	r2, r3, #16
 8003706:	89bb      	ldrh	r3, [r7, #12]
 8003708:	4413      	add	r3, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	492f      	ldr	r1, [pc, #188]	; (80037cc <HC05Driver_setBaudRate+0x138>)
 800370e:	4618      	mov	r0, r3
 8003710:	f001 fc02 	bl	8004f18 <siprintf>
 8003714:	4603      	mov	r3, r0
 8003716:	b29a      	uxth	r2, r3
 8003718:	89bb      	ldrh	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, ",%lu", HC05_STOP_BIT_SETUP);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f103 0210 	add.w	r2, r3, #16
 8003724:	89bb      	ldrh	r3, [r7, #12]
 8003726:	4413      	add	r3, r2
 8003728:	2200      	movs	r2, #0
 800372a:	4929      	ldr	r1, [pc, #164]	; (80037d0 <HC05Driver_setBaudRate+0x13c>)
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fbf3 	bl	8004f18 <siprintf>
 8003732:	4603      	mov	r3, r0
 8003734:	b29a      	uxth	r2, r3
 8003736:	89bb      	ldrh	r3, [r7, #12]
 8003738:	4413      	add	r3, r2
 800373a:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, ",%lu", HC05_PARITY_SETUP);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f103 0210 	add.w	r2, r3, #16
 8003742:	89bb      	ldrh	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	2200      	movs	r2, #0
 8003748:	4921      	ldr	r1, [pc, #132]	; (80037d0 <HC05Driver_setBaudRate+0x13c>)
 800374a:	4618      	mov	r0, r3
 800374c:	f001 fbe4 	bl	8004f18 <siprintf>
 8003750:	4603      	mov	r3, r0
 8003752:	b29a      	uxth	r2, r3
 8003754:	89bb      	ldrh	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	81bb      	strh	r3, [r7, #12]
							strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3310      	adds	r3, #16
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	491c      	ldr	r1, [pc, #112]	; (80037d4 <HC05Driver_setBaudRate+0x140>)
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fbfc 	bl	8004f60 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681c      	ldr	r4, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f103 0510 	add.w	r5, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3310      	adds	r3, #16
 8003776:	4618      	mov	r0, r3
 8003778:	f7fc fd6c 	bl	8000254 <strlen>
 800377c:	4603      	mov	r3, r0
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0110 	add.w	r1, r3, #16
 8003786:	230a      	movs	r3, #10
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	460b      	mov	r3, r1
 8003790:	4629      	mov	r1, r5
 8003792:	4620      	mov	r0, r4
 8003794:	f001 f977 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HC05Driver_setBaudRate+0x10e>
			return HC05Driver_Status_Error;
 800379e:	2305      	movs	r3, #5
 80037a0:	e00c      	b.n	80037bc <HC05Driver_setBaudRate+0x128>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3310      	adds	r3, #16
 80037a6:	2202      	movs	r2, #2
 80037a8:	490b      	ldr	r1, [pc, #44]	; (80037d8 <HC05Driver_setBaudRate+0x144>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fc11 	bl	8004fd2 <strncmp>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HC05Driver_setBaudRate+0x126>
			return HC05Driver_Status_Error;
 80037b6:	2305      	movs	r3, #5
 80037b8:	e000      	b.n	80037bc <HC05Driver_setBaudRate+0x128>
		}
	}

	return HC05Driver_Status_OK;
 80037ba:	2300      	movs	r3, #0

}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}
 80037c4:	08005a70 	.word	0x08005a70
 80037c8:	08005a98 	.word	0x08005a98
 80037cc:	08005aa0 	.word	0x08005aa0
 80037d0:	08005aa4 	.word	0x08005aa4
 80037d4:	08005a74 	.word	0x08005a74
 80037d8:	08005a78 	.word	0x08005a78

080037dc <HC05Driver_getPassword>:

HC05Driver_Status_TypeDef HC05Driver_getPassword(HC05Driver_TypeDef* pSelf, uint32_t* pRetPassword){
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7a1b      	ldrb	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HC05Driver_getPassword+0x16>
		return HC05Driver_Status_UnInitializedError;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e078      	b.n	80038e4 <HC05Driver_getPassword+0x108>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fdb6 	bl	8004364 <HC05Driver_setATMode>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HC05Driver_getPassword+0x2a>
		return ret;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	e06e      	b.n	80038e4 <HC05Driver_getPassword+0x108>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3310      	adds	r3, #16
 800380a:	2280      	movs	r2, #128	; 0x80
 800380c:	4937      	ldr	r1, [pc, #220]	; (80038ec <HC05Driver_getPassword+0x110>)
 800380e:	4618      	mov	r0, r3
 8003810:	f001 fbca 	bl	8004fa8 <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_PSWD_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3310      	adds	r3, #16
 8003818:	2280      	movs	r2, #128	; 0x80
 800381a:	4935      	ldr	r1, [pc, #212]	; (80038f0 <HC05Driver_getPassword+0x114>)
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fb9f 	bl	8004f60 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3310      	adds	r3, #16
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	4932      	ldr	r1, [pc, #200]	; (80038f4 <HC05Driver_getPassword+0x118>)
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fb98 	bl	8004f60 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681c      	ldr	r4, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f103 0510 	add.w	r5, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3310      	adds	r3, #16
 800383e:	4618      	mov	r0, r3
 8003840:	f7fc fd08 	bl	8000254 <strlen>
 8003844:	4603      	mov	r3, r0
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f103 0110 	add.w	r1, r3, #16
 800384e:	230a      	movs	r3, #10
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	460b      	mov	r3, r1
 8003858:	4629      	mov	r1, r5
 800385a:	4620      	mov	r0, r4
 800385c:	f001 f913 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HC05Driver_getPassword+0x8e>
		return HC05Driver_Status_Error;
 8003866:	2305      	movs	r3, #5
 8003868:	e03c      	b.n	80038e4 <HC05Driver_getPassword+0x108>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3310      	adds	r3, #16
 800386e:	4921      	ldr	r1, [pc, #132]	; (80038f4 <HC05Driver_getPassword+0x118>)
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fbd5 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_PSWD_AT_COMMNAND_RESPONSE, strlen(HC05_GET_PSWD_AT_COMMNAND_RESPONSE)) != 0){
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3310      	adds	r3, #16
 800387a:	2206      	movs	r2, #6
 800387c:	491e      	ldr	r1, [pc, #120]	; (80038f8 <HC05Driver_getPassword+0x11c>)
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fba7 	bl	8004fd2 <strncmp>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HC05Driver_getPassword+0xb2>
		return HC05Driver_Status_Error;
 800388a:	2305      	movs	r3, #5
 800388c:	e02a      	b.n	80038e4 <HC05Driver_getPassword+0x108>
	}

	*pRetPassword = atoi((char*)(pSelf->buffer + strlen(HC05_GET_PSWD_AT_COMMNAND_RESPONSE)));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3310      	adds	r3, #16
 8003892:	3306      	adds	r3, #6
 8003894:	4618      	mov	r0, r3
 8003896:	f001 fb0e 	bl	8004eb6 <atoi>
 800389a:	4603      	mov	r3, r0
 800389c:	461a      	mov	r2, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	601a      	str	r2, [r3, #0]

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f103 0110 	add.w	r1, r3, #16
 80038ac:	230a      	movs	r3, #10
 80038ae:	2280      	movs	r2, #128	; 0x80
 80038b0:	f001 f890 	bl	80049d4 <UartDriver_receiveBytesTerminationSign>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HC05Driver_getPassword+0xe2>
		return HC05Driver_Status_Error;
 80038ba:	2305      	movs	r3, #5
 80038bc:	e012      	b.n	80038e4 <HC05Driver_getPassword+0x108>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3310      	adds	r3, #16
 80038c2:	490c      	ldr	r1, [pc, #48]	; (80038f4 <HC05Driver_getPassword+0x118>)
 80038c4:	4618      	mov	r0, r3
 80038c6:	f001 fbab 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3310      	adds	r3, #16
 80038ce:	2202      	movs	r2, #2
 80038d0:	490a      	ldr	r1, [pc, #40]	; (80038fc <HC05Driver_getPassword+0x120>)
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fb7d 	bl	8004fd2 <strncmp>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HC05Driver_getPassword+0x106>
		return HC05Driver_Status_Error;
 80038de:	2305      	movs	r3, #5
 80038e0:	e000      	b.n	80038e4 <HC05Driver_getPassword+0x108>
	}

	return HC05Driver_Status_OK;
 80038e2:	2300      	movs	r3, #0

}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bdb0      	pop	{r4, r5, r7, pc}
 80038ec:	08005a70 	.word	0x08005a70
 80038f0:	08005aac 	.word	0x08005aac
 80038f4:	08005a74 	.word	0x08005a74
 80038f8:	08005ab4 	.word	0x08005ab4
 80038fc:	08005a78 	.word	0x08005a78

08003900 <HC05Driver_setPassword>:

HC05Driver_Status_TypeDef HC05Driver_setPassword(HC05Driver_TypeDef* pSelf, uint32_t password){
 8003900:	b5b0      	push	{r4, r5, r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7a1b      	ldrb	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HC05Driver_setPassword+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003912:	2301      	movs	r3, #1
 8003914:	e06a      	b.n	80039ec <HC05Driver_setPassword+0xec>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fd24 	bl	8004364 <HC05Driver_setATMode>
 800391c:	4603      	mov	r3, r0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HC05Driver_setPassword+0x2a>
		return ret;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	e060      	b.n	80039ec <HC05Driver_setPassword+0xec>
	}

	uint32_t	currentPassword;
	if ((ret = HC05Driver_getPassword(pSelf, &currentPassword)) != HC05Driver_Status_OK){
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff53 	bl	80037dc <HC05Driver_getPassword>
 8003936:	4603      	mov	r3, r0
 8003938:	73fb      	strb	r3, [r7, #15]
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HC05Driver_setPassword+0x44>
		return ret;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	e053      	b.n	80039ec <HC05Driver_setPassword+0xec>
	}

	if (password != currentPassword){
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d04e      	beq.n	80039ea <HC05Driver_setPassword+0xea>

							strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3310      	adds	r3, #16
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	4928      	ldr	r1, [pc, #160]	; (80039f4 <HC05Driver_setPassword+0xf4>)
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fb27 	bl	8004fa8 <strlcpy>
		uint16_t length = 	strlcat((char*)pSelf->buffer, HC05_SET_PSWD_AT_COMMNAND, HC05_BUFFER_SIZE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3310      	adds	r3, #16
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	4925      	ldr	r1, [pc, #148]	; (80039f8 <HC05Driver_setPassword+0xf8>)
 8003962:	4618      	mov	r0, r3
 8003964:	f001 fafc 	bl	8004f60 <strlcat>
 8003968:	4603      	mov	r3, r0
 800396a:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, "%lu", password);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f103 0210 	add.w	r2, r3, #16
 8003972:	89bb      	ldrh	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	4920      	ldr	r1, [pc, #128]	; (80039fc <HC05Driver_setPassword+0xfc>)
 800397a:	4618      	mov	r0, r3
 800397c:	f001 facc 	bl	8004f18 <siprintf>
 8003980:	4603      	mov	r3, r0
 8003982:	b29a      	uxth	r2, r3
 8003984:	89bb      	ldrh	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	81bb      	strh	r3, [r7, #12]
							strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3310      	adds	r3, #16
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	491b      	ldr	r1, [pc, #108]	; (8003a00 <HC05Driver_setPassword+0x100>)
 8003992:	4618      	mov	r0, r3
 8003994:	f001 fae4 	bl	8004f60 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681c      	ldr	r4, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f103 0510 	add.w	r5, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3310      	adds	r3, #16
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fc54 	bl	8000254 <strlen>
 80039ac:	4603      	mov	r3, r0
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f103 0110 	add.w	r1, r3, #16
 80039b6:	230a      	movs	r3, #10
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	460b      	mov	r3, r1
 80039c0:	4629      	mov	r1, r5
 80039c2:	4620      	mov	r0, r4
 80039c4:	f001 f85f 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HC05Driver_setPassword+0xd2>
			return HC05Driver_Status_Error;
 80039ce:	2305      	movs	r3, #5
 80039d0:	e00c      	b.n	80039ec <HC05Driver_setPassword+0xec>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3310      	adds	r3, #16
 80039d6:	2202      	movs	r2, #2
 80039d8:	490a      	ldr	r1, [pc, #40]	; (8003a04 <HC05Driver_setPassword+0x104>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 faf9 	bl	8004fd2 <strncmp>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HC05Driver_setPassword+0xea>
			return HC05Driver_Status_Error;
 80039e6:	2305      	movs	r3, #5
 80039e8:	e000      	b.n	80039ec <HC05Driver_setPassword+0xec>
		}
	}

	return HC05Driver_Status_OK;
 80039ea:	2300      	movs	r3, #0

}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bdb0      	pop	{r4, r5, r7, pc}
 80039f4:	08005a70 	.word	0x08005a70
 80039f8:	08005abc 	.word	0x08005abc
 80039fc:	08005aa0 	.word	0x08005aa0
 8003a00:	08005a74 	.word	0x08005a74
 8003a04:	08005a78 	.word	0x08005a78

08003a08 <HC05Driver_getDeviceName>:

HC05Driver_Status_TypeDef HC05Driver_getDeviceName(HC05Driver_TypeDef* pSelf, char* pRetDeviceName){
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7a1b      	ldrb	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HC05Driver_getDeviceName+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e076      	b.n	8003b0c <HC05Driver_getDeviceName+0x104>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fca0 	bl	8004364 <HC05Driver_setATMode>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HC05Driver_getDeviceName+0x2a>
		return ret;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	e06c      	b.n	8003b0c <HC05Driver_getDeviceName+0x104>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3310      	adds	r3, #16
 8003a36:	2280      	movs	r2, #128	; 0x80
 8003a38:	4936      	ldr	r1, [pc, #216]	; (8003b14 <HC05Driver_getDeviceName+0x10c>)
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fab4 	bl	8004fa8 <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_NAME_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3310      	adds	r3, #16
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	4934      	ldr	r1, [pc, #208]	; (8003b18 <HC05Driver_getDeviceName+0x110>)
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fa89 	bl	8004f60 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3310      	adds	r3, #16
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	4931      	ldr	r1, [pc, #196]	; (8003b1c <HC05Driver_getDeviceName+0x114>)
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fa82 	bl	8004f60 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681c      	ldr	r4, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f103 0510 	add.w	r5, r3, #16
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3310      	adds	r3, #16
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fbf2 	bl	8000254 <strlen>
 8003a70:	4603      	mov	r3, r0
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 0110 	add.w	r1, r3, #16
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	460b      	mov	r3, r1
 8003a84:	4629      	mov	r1, r5
 8003a86:	4620      	mov	r0, r4
 8003a88:	f000 fffd 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HC05Driver_getDeviceName+0x8e>
		return HC05Driver_Status_Error;
 8003a92:	2305      	movs	r3, #5
 8003a94:	e03a      	b.n	8003b0c <HC05Driver_getDeviceName+0x104>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3310      	adds	r3, #16
 8003a9a:	4920      	ldr	r1, [pc, #128]	; (8003b1c <HC05Driver_getDeviceName+0x114>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 fabf 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_NAME_AT_COMMNAND_RESPONSE, strlen(HC05_GET_NAME_AT_COMMNAND_RESPONSE)) != 0){
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3310      	adds	r3, #16
 8003aa6:	2206      	movs	r2, #6
 8003aa8:	491d      	ldr	r1, [pc, #116]	; (8003b20 <HC05Driver_getDeviceName+0x118>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fa91 	bl	8004fd2 <strncmp>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HC05Driver_getDeviceName+0xb2>
		return HC05Driver_Status_Error;
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e028      	b.n	8003b0c <HC05Driver_getDeviceName+0x104>
	}

	strncpy(pRetDeviceName, (char*)(pSelf->buffer+strlen(HC05_GET_NAME_AT_COMMNAND_RESPONSE)), HC05_MAX_NAME_LENGTH);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3310      	adds	r3, #16
 8003abe:	3306      	adds	r3, #6
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	f001 fa96 	bl	8004ff6 <strncpy>

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f103 0110 	add.w	r1, r3, #16
 8003ad4:	230a      	movs	r3, #10
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	f000 ff7c 	bl	80049d4 <UartDriver_receiveBytesTerminationSign>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HC05Driver_getDeviceName+0xde>
		return HC05Driver_Status_Error;
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	e012      	b.n	8003b0c <HC05Driver_getDeviceName+0x104>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3310      	adds	r3, #16
 8003aea:	490c      	ldr	r1, [pc, #48]	; (8003b1c <HC05Driver_getDeviceName+0x114>)
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 fa97 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3310      	adds	r3, #16
 8003af6:	2202      	movs	r2, #2
 8003af8:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HC05Driver_getDeviceName+0x11c>)
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 fa69 	bl	8004fd2 <strncmp>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HC05Driver_getDeviceName+0x102>
		return HC05Driver_Status_Error;
 8003b06:	2305      	movs	r3, #5
 8003b08:	e000      	b.n	8003b0c <HC05Driver_getDeviceName+0x104>
	}

	return HC05Driver_Status_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bdb0      	pop	{r4, r5, r7, pc}
 8003b14:	08005a70 	.word	0x08005a70
 8003b18:	08005ac4 	.word	0x08005ac4
 8003b1c:	08005a74 	.word	0x08005a74
 8003b20:	08005acc 	.word	0x08005acc
 8003b24:	08005a78 	.word	0x08005a78

08003b28 <HC05Driver_setDeviceName>:

HC05Driver_Status_TypeDef HC05Driver_setDeviceName(HC05Driver_TypeDef* pSelf, char* deviceName){
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b08e      	sub	sp, #56	; 0x38
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7a1b      	ldrb	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HC05Driver_setDeviceName+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e06b      	b.n	8003c16 <HC05Driver_setDeviceName+0xee>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fc10 	bl	8004364 <HC05Driver_setATMode>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HC05Driver_setDeviceName+0x30>
		return ret;
 8003b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b56:	e05e      	b.n	8003c16 <HC05Driver_setDeviceName+0xee>
	}

	char currentName[HC05_MAX_NAME_LENGTH];
	if ((ret = HC05Driver_getDeviceName(pSelf, currentName)) != HC05Driver_Status_OK){
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff ff52 	bl	8003a08 <HC05Driver_getDeviceName>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HC05Driver_setDeviceName+0x50>
		return ret;
 8003b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b76:	e04e      	b.n	8003c16 <HC05Driver_setDeviceName+0xee>
	}

	if (strcmp(currentName, deviceName) != 0){
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	6839      	ldr	r1, [r7, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fb5e 	bl	8000240 <strcmp>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d044      	beq.n	8003c14 <HC05Driver_setDeviceName+0xec>

		strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3310      	adds	r3, #16
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	4923      	ldr	r1, [pc, #140]	; (8003c20 <HC05Driver_setDeviceName+0xf8>)
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fa08 	bl	8004fa8 <strlcpy>
		strlcat((char*)pSelf->buffer, HC05_SET_NAME_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3310      	adds	r3, #16
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	4921      	ldr	r1, [pc, #132]	; (8003c24 <HC05Driver_setDeviceName+0xfc>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 f9dd 	bl	8004f60 <strlcat>
		strlcat((char*)pSelf->buffer, deviceName,  HC05_BUFFER_SIZE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3310      	adds	r3, #16
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f9d6 	bl	8004f60 <strlcat>
		strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	2280      	movs	r2, #128	; 0x80
 8003bba:	491b      	ldr	r1, [pc, #108]	; (8003c28 <HC05Driver_setDeviceName+0x100>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f9cf 	bl	8004f60 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681c      	ldr	r4, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f103 0510 	add.w	r5, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3310      	adds	r3, #16
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fc fb3f 	bl	8000254 <strlen>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f103 0110 	add.w	r1, r3, #16
 8003be0:	230a      	movs	r3, #10
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	460b      	mov	r3, r1
 8003bea:	4629      	mov	r1, r5
 8003bec:	4620      	mov	r0, r4
 8003bee:	f000 ff4a 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HC05Driver_setDeviceName+0xd4>
			return HC05Driver_Status_Error;
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	e00c      	b.n	8003c16 <HC05Driver_setDeviceName+0xee>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3310      	adds	r3, #16
 8003c00:	2202      	movs	r2, #2
 8003c02:	490a      	ldr	r1, [pc, #40]	; (8003c2c <HC05Driver_setDeviceName+0x104>)
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f9e4 	bl	8004fd2 <strncmp>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HC05Driver_setDeviceName+0xec>
			return HC05Driver_Status_Error;
 8003c10:	2305      	movs	r3, #5
 8003c12:	e000      	b.n	8003c16 <HC05Driver_setDeviceName+0xee>
		}
	}

	return HC05Driver_Status_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3730      	adds	r7, #48	; 0x30
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	08005a70 	.word	0x08005a70
 8003c24:	08005ad4 	.word	0x08005ad4
 8003c28:	08005a74 	.word	0x08005a74
 8003c2c:	08005a78 	.word	0x08005a78

08003c30 <HC05Driver_getDeviceRole>:

HC05Driver_Status_TypeDef HC05Driver_getDeviceRole(HC05Driver_TypeDef* pSelf, HC05Driver_Role_TypeDef* pRetRole){
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	7a1b      	ldrb	r3, [r3, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HC05Driver_getDeviceRole+0x16>
		return HC05Driver_Status_UnInitializedError;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e078      	b.n	8003d38 <HC05Driver_getDeviceRole+0x108>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fb8c 	bl	8004364 <HC05Driver_setATMode>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HC05Driver_getDeviceRole+0x2a>
		return ret;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	e06e      	b.n	8003d38 <HC05Driver_getDeviceRole+0x108>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	2280      	movs	r2, #128	; 0x80
 8003c60:	4937      	ldr	r1, [pc, #220]	; (8003d40 <HC05Driver_getDeviceRole+0x110>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f9a0 	bl	8004fa8 <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_ROLE_AT_COMMAND, HC05_BUFFER_SIZE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3310      	adds	r3, #16
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	4935      	ldr	r1, [pc, #212]	; (8003d44 <HC05Driver_getDeviceRole+0x114>)
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 f975 	bl	8004f60 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3310      	adds	r3, #16
 8003c7a:	2280      	movs	r2, #128	; 0x80
 8003c7c:	4932      	ldr	r1, [pc, #200]	; (8003d48 <HC05Driver_getDeviceRole+0x118>)
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 f96e 	bl	8004f60 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681c      	ldr	r4, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f103 0510 	add.w	r5, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3310      	adds	r3, #16
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fade 	bl	8000254 <strlen>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f103 0110 	add.w	r1, r3, #16
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	460b      	mov	r3, r1
 8003cac:	4629      	mov	r1, r5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f000 fee9 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HC05Driver_getDeviceRole+0x8e>
		return HC05Driver_Status_Error;
 8003cba:	2305      	movs	r3, #5
 8003cbc:	e03c      	b.n	8003d38 <HC05Driver_getDeviceRole+0x108>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	4921      	ldr	r1, [pc, #132]	; (8003d48 <HC05Driver_getDeviceRole+0x118>)
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 f9ab 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_ROLE_AT_COMMNAND_RESPONSE, strlen(HC05_GET_ROLE_AT_COMMNAND_RESPONSE)) != 0){
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3310      	adds	r3, #16
 8003cce:	2206      	movs	r2, #6
 8003cd0:	491e      	ldr	r1, [pc, #120]	; (8003d4c <HC05Driver_getDeviceRole+0x11c>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f97d 	bl	8004fd2 <strncmp>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HC05Driver_getDeviceRole+0xb2>
		return HC05Driver_Status_Error;
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e02a      	b.n	8003d38 <HC05Driver_getDeviceRole+0x108>
	}

	*pRetRole = atoi((char*)(pSelf->buffer + strlen(HC05_GET_ROLE_AT_COMMNAND_RESPONSE)));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	3306      	adds	r3, #6
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f8e4 	bl	8004eb6 <atoi>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	701a      	strb	r2, [r3, #0]

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f103 0110 	add.w	r1, r3, #16
 8003d00:	230a      	movs	r3, #10
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	f000 fe66 	bl	80049d4 <UartDriver_receiveBytesTerminationSign>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HC05Driver_getDeviceRole+0xe2>
		return HC05Driver_Status_Error;
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e012      	b.n	8003d38 <HC05Driver_getDeviceRole+0x108>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3310      	adds	r3, #16
 8003d16:	490c      	ldr	r1, [pc, #48]	; (8003d48 <HC05Driver_getDeviceRole+0x118>)
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 f981 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3310      	adds	r3, #16
 8003d22:	2202      	movs	r2, #2
 8003d24:	490a      	ldr	r1, [pc, #40]	; (8003d50 <HC05Driver_getDeviceRole+0x120>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f953 	bl	8004fd2 <strncmp>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HC05Driver_getDeviceRole+0x106>
		return HC05Driver_Status_Error;
 8003d32:	2305      	movs	r3, #5
 8003d34:	e000      	b.n	8003d38 <HC05Driver_getDeviceRole+0x108>
	}

	return HC05Driver_Status_OK;
 8003d36:	2300      	movs	r3, #0

}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d40:	08005a70 	.word	0x08005a70
 8003d44:	08005adc 	.word	0x08005adc
 8003d48:	08005a74 	.word	0x08005a74
 8003d4c:	08005ae4 	.word	0x08005ae4
 8003d50:	08005a78 	.word	0x08005a78

08003d54 <HC05Driver_setDeviceRole>:

HC05Driver_Status_TypeDef HC05Driver_setDeviceRole(HC05Driver_TypeDef* pSelf, HC05Driver_Role_TypeDef role){
 8003d54:	b5b0      	push	{r4, r5, r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7a1b      	ldrb	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HC05Driver_setDeviceRole+0x18>
		return HC05Driver_Status_UnInitializedError;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e06a      	b.n	8003e42 <HC05Driver_setDeviceRole+0xee>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 faf9 	bl	8004364 <HC05Driver_setATMode>
 8003d72:	4603      	mov	r3, r0
 8003d74:	73fb      	strb	r3, [r7, #15]
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HC05Driver_setDeviceRole+0x2c>
		return ret;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	e060      	b.n	8003e42 <HC05Driver_setDeviceRole+0xee>
	}

	HC05Driver_Role_TypeDef	currentRole;
	if ((ret = HC05Driver_getDeviceRole(pSelf, &currentRole)) != HC05Driver_Status_OK){
 8003d80:	f107 030b 	add.w	r3, r7, #11
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff52 	bl	8003c30 <HC05Driver_getDeviceRole>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HC05Driver_setDeviceRole+0x46>
		return ret;
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	e053      	b.n	8003e42 <HC05Driver_setDeviceRole+0xee>
	}

	if (role != currentRole){
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d04e      	beq.n	8003e40 <HC05Driver_setDeviceRole+0xec>

							strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3310      	adds	r3, #16
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	4928      	ldr	r1, [pc, #160]	; (8003e4c <HC05Driver_setDeviceRole+0xf8>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f8fc 	bl	8004fa8 <strlcpy>
		uint16_t length = 	strlcat((char*)pSelf->buffer, HC05_SET_PSWD_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3310      	adds	r3, #16
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	4926      	ldr	r1, [pc, #152]	; (8003e50 <HC05Driver_setDeviceRole+0xfc>)
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 f8d1 	bl	8004f60 <strlcat>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	81bb      	strh	r3, [r7, #12]
		length += 			sprintf ((char*)pSelf->buffer + length, "%du", role);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f103 0210 	add.w	r2, r3, #16
 8003dc8:	89bb      	ldrh	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	4921      	ldr	r1, [pc, #132]	; (8003e54 <HC05Driver_setDeviceRole+0x100>)
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 f8a1 	bl	8004f18 <siprintf>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	89bb      	ldrh	r3, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	81bb      	strh	r3, [r7, #12]
							strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3310      	adds	r3, #16
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	491c      	ldr	r1, [pc, #112]	; (8003e58 <HC05Driver_setDeviceRole+0x104>)
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 f8b9 	bl	8004f60 <strlcat>

		if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681c      	ldr	r4, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f103 0510 	add.w	r5, r3, #16
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fa29 	bl	8000254 <strlen>
 8003e02:	4603      	mov	r3, r0
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f103 0110 	add.w	r1, r3, #16
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	460b      	mov	r3, r1
 8003e16:	4629      	mov	r1, r5
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 fe34 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HC05Driver_setDeviceRole+0xd4>
			return HC05Driver_Status_Error;
 8003e24:	2305      	movs	r3, #5
 8003e26:	e00c      	b.n	8003e42 <HC05Driver_setDeviceRole+0xee>
		}
		if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3310      	adds	r3, #16
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	490b      	ldr	r1, [pc, #44]	; (8003e5c <HC05Driver_setDeviceRole+0x108>)
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f8ce 	bl	8004fd2 <strncmp>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HC05Driver_setDeviceRole+0xec>
			return HC05Driver_Status_Error;
 8003e3c:	2305      	movs	r3, #5
 8003e3e:	e000      	b.n	8003e42 <HC05Driver_setDeviceRole+0xee>
		}
	}

	return HC05Driver_Status_OK;
 8003e40:	2300      	movs	r3, #0

}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bdb0      	pop	{r4, r5, r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	08005a70 	.word	0x08005a70
 8003e50:	08005abc 	.word	0x08005abc
 8003e54:	08005aec 	.word	0x08005aec
 8003e58:	08005a74 	.word	0x08005a74
 8003e5c:	08005a78 	.word	0x08005a78

08003e60 <HC05Driver_getState>:

HC05Driver_Status_TypeDef HC05Driver_getState(HC05Driver_TypeDef* pSelf, HC05Driver_State_TypeDef* pRetState){
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized || pSelf->state == HC05Driver_State_HardAT){
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7a1b      	ldrb	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HC05Driver_getState+0x1a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	7a1b      	ldrb	r3, [r3, #8]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <HC05Driver_getState+0x26>
		*pRetState = pSelf->state;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	7a1a      	ldrb	r2, [r3, #8]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
		return HC05Driver_Status_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e0e8      	b.n	8004058 <HC05Driver_getState+0x1f8>
	}

	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_setATMode(pSelf)) != HC05Driver_Status_OK) {
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa6c 	bl	8004364 <HC05Driver_setATMode>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HC05Driver_getState+0x3a>
		return ret;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	e0de      	b.n	8004058 <HC05Driver_getState+0x1f8>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	2280      	movs	r2, #128	; 0x80
 8003ea0:	496f      	ldr	r1, [pc, #444]	; (8004060 <HC05Driver_getState+0x200>)
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f880 	bl	8004fa8 <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_GET_STATE_AT_COMMNAND, HC05_BUFFER_SIZE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3310      	adds	r3, #16
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	496d      	ldr	r1, [pc, #436]	; (8004064 <HC05Driver_getState+0x204>)
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f855 	bl	8004f60 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3310      	adds	r3, #16
 8003eba:	2280      	movs	r2, #128	; 0x80
 8003ebc:	496a      	ldr	r1, [pc, #424]	; (8004068 <HC05Driver_getState+0x208>)
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 f84e 	bl	8004f60 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681c      	ldr	r4, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f103 0510 	add.w	r5, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc f9be 	bl	8000254 <strlen>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f103 0110 	add.w	r1, r3, #16
 8003ee2:	230a      	movs	r3, #10
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	460b      	mov	r3, r1
 8003eec:	4629      	mov	r1, r5
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 fdc9 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HC05Driver_getState+0x9e>
		return HC05Driver_Status_Error;
 8003efa:	2305      	movs	r3, #5
 8003efc:	e0ac      	b.n	8004058 <HC05Driver_getState+0x1f8>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3310      	adds	r3, #16
 8003f02:	4959      	ldr	r1, [pc, #356]	; (8004068 <HC05Driver_getState+0x208>)
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 f88b 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_GET_STATE_AT_COMMNAND_RESPONSE, strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)) != 0){
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	2207      	movs	r2, #7
 8003f10:	4956      	ldr	r1, [pc, #344]	; (800406c <HC05Driver_getState+0x20c>)
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f85d 	bl	8004fd2 <strncmp>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HC05Driver_getState+0xc2>
		return HC05Driver_Status_Error;
 8003f1e:	2305      	movs	r3, #5
 8003f20:	e09a      	b.n	8004058 <HC05Driver_getState+0x1f8>
	}

	if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_INITIALIZED_RESPONSE, strlen(HC05_INITIALIZED_RESPONSE)) == 0){
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3310      	adds	r3, #16
 8003f26:	3307      	adds	r3, #7
 8003f28:	220b      	movs	r2, #11
 8003f2a:	4951      	ldr	r1, [pc, #324]	; (8004070 <HC05Driver_getState+0x210>)
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f850 	bl	8004fd2 <strncmp>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <HC05Driver_getState+0xe0>
		*pRetState = HC05Driver_State_Initialized;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e06a      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_READY_RESPONSE, strlen(HC05_READY_RESPONSE)) == 0){
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3310      	adds	r3, #16
 8003f44:	3307      	adds	r3, #7
 8003f46:	2205      	movs	r2, #5
 8003f48:	494a      	ldr	r1, [pc, #296]	; (8004074 <HC05Driver_getState+0x214>)
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 f841 	bl	8004fd2 <strncmp>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HC05Driver_getState+0xfe>
		*pRetState = HC05Driver_State_Ready;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e05b      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_PAIRABLE_RESPONSE, strlen(HC05_PAIRABLE_RESPONSE)) == 0){
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3310      	adds	r3, #16
 8003f62:	3307      	adds	r3, #7
 8003f64:	2208      	movs	r2, #8
 8003f66:	4944      	ldr	r1, [pc, #272]	; (8004078 <HC05Driver_getState+0x218>)
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 f832 	bl	8004fd2 <strncmp>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <HC05Driver_getState+0x11c>
		*pRetState = HC05Driver_State_Pairable;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2205      	movs	r2, #5
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e04c      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_PAIRED_RESPONSE, strlen(HC05_PAIRED_RESPONSE)) == 0){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3310      	adds	r3, #16
 8003f80:	3307      	adds	r3, #7
 8003f82:	2206      	movs	r2, #6
 8003f84:	493d      	ldr	r1, [pc, #244]	; (800407c <HC05Driver_getState+0x21c>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 f823 	bl	8004fd2 <strncmp>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HC05Driver_getState+0x13a>
		*pRetState = HC05Driver_State_Paired;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2206      	movs	r2, #6
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e03d      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_INQUIRING_RESPONSE, strlen(HC05_PAIRED_RESPONSE)) == 0){
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3310      	adds	r3, #16
 8003f9e:	3307      	adds	r3, #7
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	4937      	ldr	r1, [pc, #220]	; (8004080 <HC05Driver_getState+0x220>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 f814 	bl	8004fd2 <strncmp>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <HC05Driver_getState+0x158>
		*pRetState = HC05Driver_State_Inquiring;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2207      	movs	r2, #7
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e02e      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_CONNECTING_RESPONSE, strlen(HC05_CONNECTING_RESPONSE)) == 0){
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3310      	adds	r3, #16
 8003fbc:	3307      	adds	r3, #7
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	4930      	ldr	r1, [pc, #192]	; (8004084 <HC05Driver_getState+0x224>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 f805 	bl	8004fd2 <strncmp>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HC05Driver_getState+0x176>
		*pRetState = HC05Driver_State_Connecting;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e01f      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_CONNECTED_RESPONSE, strlen(HC05_CONNECTED_RESPONSE)) == 0){
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3310      	adds	r3, #16
 8003fda:	3307      	adds	r3, #7
 8003fdc:	2209      	movs	r2, #9
 8003fde:	492a      	ldr	r1, [pc, #168]	; (8004088 <HC05Driver_getState+0x228>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fff6 	bl	8004fd2 <strncmp>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d103      	bne.n	8003ff4 <HC05Driver_getState+0x194>
		*pRetState = HC05Driver_State_Connected;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2209      	movs	r2, #9
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e010      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else if (strncmp((char*)(pSelf->buffer+strlen(HC05_GET_STATE_AT_COMMNAND_RESPONSE)), HC05_DISCONNECTED_RESPONSE, strlen(HC05_DISCONNECTED_RESPONSE)) == 0){
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3310      	adds	r3, #16
 8003ff8:	3307      	adds	r3, #7
 8003ffa:	220c      	movs	r2, #12
 8003ffc:	4923      	ldr	r1, [pc, #140]	; (800408c <HC05Driver_getState+0x22c>)
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 ffe7 	bl	8004fd2 <strncmp>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HC05Driver_getState+0x1b2>
		*pRetState = HC05Driver_State_Disconnected;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	220a      	movs	r2, #10
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	e001      	b.n	8004016 <HC05Driver_getState+0x1b6>
	} else {
		return HC05Driver_Status_Error;
 8004012:	2305      	movs	r3, #5
 8004014:	e020      	b.n	8004058 <HC05Driver_getState+0x1f8>
	}

	if (UartDriver_receiveBytesTerminationSign(pSelf->pUartDriver, pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0110 	add.w	r1, r3, #16
 8004020:	230a      	movs	r3, #10
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	f000 fcd6 	bl	80049d4 <UartDriver_receiveBytesTerminationSign>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HC05Driver_getState+0x1d2>
		return HC05Driver_Status_Error;
 800402e:	2305      	movs	r3, #5
 8004030:	e012      	b.n	8004058 <HC05Driver_getState+0x1f8>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3310      	adds	r3, #16
 8004036:	490c      	ldr	r1, [pc, #48]	; (8004068 <HC05Driver_getState+0x208>)
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fff1 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3310      	adds	r3, #16
 8004042:	2202      	movs	r2, #2
 8004044:	4912      	ldr	r1, [pc, #72]	; (8004090 <HC05Driver_getState+0x230>)
 8004046:	4618      	mov	r0, r3
 8004048:	f000 ffc3 	bl	8004fd2 <strncmp>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HC05Driver_getState+0x1f6>
		return HC05Driver_Status_Error;
 8004052:	2305      	movs	r3, #5
 8004054:	e000      	b.n	8004058 <HC05Driver_getState+0x1f8>
	}

	return HC05Driver_Status_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bdb0      	pop	{r4, r5, r7, pc}
 8004060:	08005a70 	.word	0x08005a70
 8004064:	08005af0 	.word	0x08005af0
 8004068:	08005a74 	.word	0x08005a74
 800406c:	08005af8 	.word	0x08005af8
 8004070:	08005b00 	.word	0x08005b00
 8004074:	08005b0c 	.word	0x08005b0c
 8004078:	08005b14 	.word	0x08005b14
 800407c:	08005b20 	.word	0x08005b20
 8004080:	08005b28 	.word	0x08005b28
 8004084:	08005b34 	.word	0x08005b34
 8004088:	08005b40 	.word	0x08005b40
 800408c:	08005b4c 	.word	0x08005b4c
 8004090:	08005a78 	.word	0x08005a78

08004094 <HC05Driver_setReceiveDataCallback>:

	return HC05Driver_Status_OK;

}

HC05Driver_Status_TypeDef HC05Driver_setReceiveDataCallback(HC05Driver_TypeDef* pSelf, void (*foo)(uint8_t byte, void* pArgs), void* pArgs, HC05Driver_CallbackIterator_TypeDef* pRetCallbackIterator){
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	7a1b      	ldrb	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HC05Driver_setReceiveDataCallback+0x1a>
		return HC05Driver_Status_UnInitializedError;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e052      	b.n	8004154 <HC05Driver_setReceiveDataCallback+0xc0>
	}

	DigitalOutDriver_State_TypeDef	keyState;
	if (DigitalOutDriver_getState(pSelf->pKeyPinDriver, &keyState) != DigitalOutDriver_Status_OK){
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f107 0215 	add.w	r2, r7, #21
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe ff9e 	bl	8002ffa <DigitalOutDriver_getState>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HC05Driver_setReceiveDataCallback+0x34>
		return HC05Driver_Status_Error;
 80040c4:	2305      	movs	r3, #5
 80040c6:	e045      	b.n	8004154 <HC05Driver_setReceiveDataCallback+0xc0>
	}

	uint16_t i;
	for (i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80040c8:	2300      	movs	r3, #0
 80040ca:	82fb      	strh	r3, [r7, #22]
 80040cc:	e020      	b.n	8004110 <HC05Driver_setReceiveDataCallback+0x7c>
		if (pSelf->callbacks[i] == NULL){
 80040ce:	8afb      	ldrh	r3, [r7, #22]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	3324      	adds	r3, #36	; 0x24
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d115      	bne.n	800410a <HC05Driver_setReceiveDataCallback+0x76>
			pSelf->callbacks[i] = foo;
 80040de:	8afb      	ldrh	r3, [r7, #22]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	605a      	str	r2, [r3, #4]
			pSelf->callbackArgs[i] = pArgs;
 80040ec:	8afb      	ldrh	r3, [r7, #22]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	3326      	adds	r3, #38	; 0x26
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	605a      	str	r2, [r3, #4]
			pSelf->callbacksIterators[i] = -1;
 80040fa:	8afa      	ldrh	r2, [r7, #22]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3248      	adds	r2, #72	; 0x48
 8004100:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004104:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			break;
 8004108:	e005      	b.n	8004116 <HC05Driver_setReceiveDataCallback+0x82>
	for (i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 800410a:	8afb      	ldrh	r3, [r7, #22]
 800410c:	3301      	adds	r3, #1
 800410e:	82fb      	strh	r3, [r7, #22]
 8004110:	8afb      	ldrh	r3, [r7, #22]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d9db      	bls.n	80040ce <HC05Driver_setReceiveDataCallback+0x3a>
		}
	}

	if (pRetCallbackIterator != NULL){
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HC05Driver_setReceiveDataCallback+0x90>
		*pRetCallbackIterator = (HC05Driver_CallbackIterator_TypeDef)i;
 800411c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	801a      	strh	r2, [r3, #0]
	}

	if (!(pSelf->state == HC05Driver_State_HardAT || keyState == DigitalOutDriver_State_High_Stady)){
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	7a1b      	ldrb	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d012      	beq.n	8004152 <HC05Driver_setReceiveDataCallback+0xbe>
 800412c:	7d7b      	ldrb	r3, [r7, #21]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d00f      	beq.n	8004152 <HC05Driver_setReceiveDataCallback+0xbe>

		if (UartDriver_setReceiveDataCallback(pSelf->pUartDriver, foo, pArgs, &pSelf->callbacksIterators[i]) != UartDriver_Status_OK){
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	8afb      	ldrh	r3, [r7, #22]
 8004138:	3348      	adds	r3, #72	; 0x48
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	f000 fcce 	bl	8004ae4 <UartDriver_setReceiveDataCallback>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HC05Driver_setReceiveDataCallback+0xbe>
			return HC05Driver_Status_Error;
 800414e:	2305      	movs	r3, #5
 8004150:	e000      	b.n	8004154 <HC05Driver_setReceiveDataCallback+0xc0>
		}
	}

	return HC05Driver_Status_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HC05Driver_setDataMode>:
	}

	return HC05Driver_Status_OK;
}

static HC05Driver_Status_TypeDef HC05Driver_setDataMode(HC05Driver_TypeDef* pSelf){
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

	if (pSelf->state == HC05Driver_State_UnInitialized){
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7a1b      	ldrb	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HC05Driver_setDataMode+0x14>
		return HC05Driver_Status_UnInitializedError;
 800416c:	2301      	movs	r3, #1
 800416e:	e03f      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	}

	if (pSelf->state == HC05Driver_State_HardAT){
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7a1b      	ldrb	r3, [r3, #8]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HC05Driver_setDataMode+0x20>
		return HC05Driver_Status_Error;
 8004178:	2305      	movs	r3, #5
 800417a:	e039      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	}

	if (DigitalOutDriver_setLow(pSelf->pKeyPinDriver) != DigitalOutDriver_Status_OK){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe ff65 	bl	8003050 <DigitalOutDriver_setLow>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HC05Driver_setDataMode+0x34>
		return HC05Driver_Status_Error;
 800418c:	2305      	movs	r3, #5
 800418e:	e02f      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	}

	HAL_Delay(HC05_AT_MODE_DELAY_MS);
 8004190:	201e      	movs	r0, #30
 8004192:	f7fc faa3 	bl	80006dc <HAL_Delay>

	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8004196:	2300      	movs	r3, #0
 8004198:	81fb      	strh	r3, [r7, #14]
 800419a:	e025      	b.n	80041e8 <HC05Driver_setDataMode+0x8c>
		if (pSelf->callbacks[i] != NULL){
 800419c:	89fb      	ldrh	r3, [r7, #14]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	3324      	adds	r3, #36	; 0x24
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01a      	beq.n	80041e2 <HC05Driver_setDataMode+0x86>
			if (UartDriver_setReceiveDataCallback(pSelf->pUartDriver, pSelf->callbacks[i], pSelf->callbackArgs[i], &pSelf->callbacksIterators[i]) != UartDriver_Status_OK){
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	89fb      	ldrh	r3, [r7, #14]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	3324      	adds	r3, #36	; 0x24
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	3326      	adds	r3, #38	; 0x26
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	685c      	ldr	r4, [r3, #4]
 80041c8:	89fb      	ldrh	r3, [r7, #14]
 80041ca:	3348      	adds	r3, #72	; 0x48
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	4622      	mov	r2, r4
 80041d4:	f000 fc86 	bl	8004ae4 <UartDriver_setReceiveDataCallback>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HC05Driver_setDataMode+0x86>
				return HC05Driver_Status_Error;
 80041de:	2305      	movs	r3, #5
 80041e0:	e006      	b.n	80041f0 <HC05Driver_setDataMode+0x94>
	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	3301      	adds	r3, #1
 80041e6:	81fb      	strh	r3, [r7, #14]
 80041e8:	89fb      	ldrh	r3, [r7, #14]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d9d6      	bls.n	800419c <HC05Driver_setDataMode+0x40>
			}
		}
	}

	return HC05Driver_Status_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd90      	pop	{r4, r7, pc}

080041f8 <HC05Driver_resetNormalMode>:

static HC05Driver_Status_TypeDef HC05Driver_resetNormalMode(HC05Driver_TypeDef* pSelf){
 80041f8:	b5b0      	push	{r4, r5, r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	6078      	str	r0, [r7, #4]

	// assume module initialized
	HC05Driver_State_TypeDef state;
	HC05Driver_Status_TypeDef ret;

	if ((ret = HC05Driver_getState(pSelf, &state)) != HC05Driver_Status_OK){
 8004200:	f107 030e 	add.w	r3, r7, #14
 8004204:	4619      	mov	r1, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fe2a 	bl	8003e60 <HC05Driver_getState>
 800420c:	4603      	mov	r3, r0
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HC05Driver_resetNormalMode+0x22>
		return ret;
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	e098      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	if (state != HC05Driver_State_HardAT){
 800421a:	7bbb      	ldrb	r3, [r7, #14]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d001      	beq.n	8004224 <HC05Driver_resetNormalMode+0x2c>
		return HC05Driver_Status_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e093      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	if (DigitalOutDriver_setLow(pSelf->pKeyPinDriver) != DigitalOutDriver_Status_OK){
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe ff11 	bl	8003050 <DigitalOutDriver_setLow>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HC05Driver_resetNormalMode+0x40>
		return HC05Driver_Status_Error;
 8004234:	2305      	movs	r3, #5
 8004236:	e089      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	strlcpy((char*)pSelf->buffer, HC05_AT_PREFIX_COMMAND, HC05_BUFFER_SIZE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3310      	adds	r3, #16
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	4945      	ldr	r1, [pc, #276]	; (8004354 <HC05Driver_resetNormalMode+0x15c>)
 8004240:	4618      	mov	r0, r3
 8004242:	f000 feb1 	bl	8004fa8 <strlcpy>
	strlcat((char*)pSelf->buffer, HC05_AT_RESET_COMMAND, HC05_BUFFER_SIZE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3310      	adds	r3, #16
 800424a:	2280      	movs	r2, #128	; 0x80
 800424c:	4942      	ldr	r1, [pc, #264]	; (8004358 <HC05Driver_resetNormalMode+0x160>)
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fe86 	bl	8004f60 <strlcat>
	strlcat((char*)pSelf->buffer, HC05_COMMAND_TERMINATION, HC05_BUFFER_SIZE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3310      	adds	r3, #16
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	4940      	ldr	r1, [pc, #256]	; (800435c <HC05Driver_resetNormalMode+0x164>)
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe7f 	bl	8004f60 <strlcat>

	if (UartDriver_sendAndReceiveTerminationSign(pSelf->pUartDriver, pSelf->buffer, strlen((char*)pSelf->buffer), pSelf->buffer, HC05_BUFFER_SIZE, HC05_COMMAND_TRIM_SIGN) != UartDriver_Status_OK){
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681c      	ldr	r4, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f103 0510 	add.w	r5, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3310      	adds	r3, #16
 8004270:	4618      	mov	r0, r3
 8004272:	f7fb ffef 	bl	8000254 <strlen>
 8004276:	4603      	mov	r3, r0
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f103 0110 	add.w	r1, r3, #16
 8004280:	230a      	movs	r3, #10
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	460b      	mov	r3, r1
 800428a:	4629      	mov	r1, r5
 800428c:	4620      	mov	r0, r4
 800428e:	f000 fbfa 	bl	8004a86 <UartDriver_sendAndReceiveTerminationSign>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HC05Driver_resetNormalMode+0xa4>
		return HC05Driver_Status_Error;
 8004298:	2305      	movs	r3, #5
 800429a:	e057      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	strtok ((char*)pSelf->buffer, "\r\n");
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3310      	adds	r3, #16
 80042a0:	492e      	ldr	r1, [pc, #184]	; (800435c <HC05Driver_resetNormalMode+0x164>)
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 febc 	bl	8005020 <strtok>

	if (strncmp((char*)pSelf->buffer, HC05_SET_OK_COMMAND_RESPONSE, strlen(HC05_SET_OK_COMMAND_RESPONSE)) != 0){
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3310      	adds	r3, #16
 80042ac:	2202      	movs	r2, #2
 80042ae:	492c      	ldr	r1, [pc, #176]	; (8004360 <HC05Driver_resetNormalMode+0x168>)
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe8e 	bl	8004fd2 <strncmp>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HC05Driver_resetNormalMode+0xc8>
		return HC05Driver_Status_Error;
 80042bc:	2305      	movs	r3, #5
 80042be:	e045      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	pSelf->state = HC05Driver_State_Data;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	721a      	strb	r2, [r3, #8]

	uint32_t	tmpUartBaudRate;
	if (UartDriver_getBaudRate(pSelf->pUartDriver, &tmpUartBaudRate) != UartDriver_Status_OK){
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f107 0208 	add.w	r2, r7, #8
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fb19 	bl	8004908 <UartDriver_getBaudRate>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HC05Driver_resetNormalMode+0xe8>
		return HC05Driver_Status_Error;
 80042dc:	2305      	movs	r3, #5
 80042de:	e035      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	if (tmpUartBaudRate != pSelf->dataBaudRate){
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d00c      	beq.n	8004304 <HC05Driver_resetNormalMode+0x10c>
		if (UartDriver_setBaudRate(pSelf->pUartDriver, pSelf->dataBaudRate) != UartDriver_Status_OK){
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	4619      	mov	r1, r3
 80042f4:	4610      	mov	r0, r2
 80042f6:	f000 fb1d 	bl	8004934 <UartDriver_setBaudRate>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HC05Driver_resetNormalMode+0x10c>
			return ret;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	e023      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
		}
	}

	HAL_Delay(HC05_START_UP_DELAY_MS); //TODO Zamiast delay zrobic while'a ktory bedzie wysylal komende z timeoutem kilka razy i czekal az w koncu dostanie odpowiedz
 8004304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004308:	f7fc f9e8 	bl	80006dc <HAL_Delay>

	if ((ret = HC05Driver_sendTestATCommand(pSelf)) != HC05Driver_Status_OK){
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff f8cb 	bl	80034a8 <HC05Driver_sendTestATCommand>
 8004312:	4603      	mov	r3, r0
 8004314:	73fb      	strb	r3, [r7, #15]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HC05Driver_resetNormalMode+0x128>
		return ret;
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	e015      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	if ((ret = HC05Driver_getState(pSelf, &state)) != HC05Driver_Status_OK){
 8004320:	f107 030e 	add.w	r3, r7, #14
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fd9a 	bl	8003e60 <HC05Driver_getState>
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HC05Driver_resetNormalMode+0x142>
		return ret;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	e008      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	if (state == HC05Driver_State_HardAT){
 800433a:	7bbb      	ldrb	r3, [r7, #14]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HC05Driver_resetNormalMode+0x14c>
		return HC05Driver_Status_Error;
 8004340:	2305      	movs	r3, #5
 8004342:	e003      	b.n	800434c <HC05Driver_resetNormalMode+0x154>
	}

	return HC05Driver_setDataMode(pSelf);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ff09 	bl	800415c <HC05Driver_setDataMode>
 800434a:	4603      	mov	r3, r0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bdb0      	pop	{r4, r5, r7, pc}
 8004354:	08005a70 	.word	0x08005a70
 8004358:	08005b5c 	.word	0x08005b5c
 800435c:	08005a74 	.word	0x08005a74
 8004360:	08005a78 	.word	0x08005a78

08004364 <HC05Driver_setATMode>:

static HC05Driver_Status_TypeDef HC05Driver_setATMode(HC05Driver_TypeDef* pSelf){
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

	if (pSelf->state != HC05Driver_State_HardAT){
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7a1b      	ldrb	r3, [r3, #8]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d00c      	beq.n	800438e <HC05Driver_setATMode+0x2a>
		if (DigitalOutDriver_setHigh(pSelf->pKeyPinDriver) != DigitalOutDriver_Status_OK){
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe fe4e 	bl	800301a <DigitalOutDriver_setHigh>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HC05Driver_setATMode+0x24>
			return HC05Driver_Status_Error;
 8004384:	2305      	movs	r3, #5
 8004386:	e02a      	b.n	80043de <HC05Driver_setATMode+0x7a>
		}
		HAL_Delay(HC05_AT_MODE_DELAY_MS);
 8004388:	201e      	movs	r0, #30
 800438a:	f7fc f9a7 	bl	80006dc <HAL_Delay>
	}

	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 800438e:	2300      	movs	r3, #0
 8004390:	81fb      	strh	r3, [r7, #14]
 8004392:	e020      	b.n	80043d6 <HC05Driver_setATMode+0x72>
		if (pSelf->callbacks[i] != NULL && pSelf->callbacksIterators[i] >= 0){
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	3324      	adds	r3, #36	; 0x24
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HC05Driver_setATMode+0x6c>
 80043a4:	89fa      	ldrh	r2, [r7, #14]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3248      	adds	r2, #72	; 0x48
 80043aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	db0e      	blt.n	80043d0 <HC05Driver_setATMode+0x6c>
			if (UartDriver_removeReceiveDataCallback(pSelf->pUartDriver, pSelf->callbacksIterators[i]) != UartDriver_Status_OK){
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	89fa      	ldrh	r2, [r7, #14]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3248      	adds	r2, #72	; 0x48
 80043bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f000 fbde 	bl	8004b82 <UartDriver_removeReceiveDataCallback>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HC05Driver_setATMode+0x6c>
				return HC05Driver_Status_Error;
 80043cc:	2305      	movs	r3, #5
 80043ce:	e006      	b.n	80043de <HC05Driver_setATMode+0x7a>
	for (uint16_t i=0; i<HC05_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80043d0:	89fb      	ldrh	r3, [r7, #14]
 80043d2:	3301      	adds	r3, #1
 80043d4:	81fb      	strh	r3, [r7, #14]
 80043d6:	89fb      	ldrh	r3, [r7, #14]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d9db      	bls.n	8004394 <HC05Driver_setATMode+0x30>
			}
		}
	}

	return HC05Driver_Status_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 0 */

extern UART_HandleTypeDef huart1;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	DigitalOutDriver_setHigh(&debugOut0);
 80043f0:	480b      	ldr	r0, [pc, #44]	; (8004420 <HAL_UART_RxCpltCallback+0x38>)
 80043f2:	f7fe fe12 	bl	800301a <DigitalOutDriver_setHigh>
	if (huart == (&huart1)){
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a0a      	ldr	r2, [pc, #40]	; (8004424 <HAL_UART_RxCpltCallback+0x3c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d109      	bne.n	8004412 <HAL_UART_RxCpltCallback+0x2a>
		if (UartDriver_receivedBytesCallback(&uart1Driver) != UartDriver_Status_OK){
 80043fe:	480a      	ldr	r0, [pc, #40]	; (8004428 <HAL_UART_RxCpltCallback+0x40>)
 8004400:	f000 fbfb 	bl	8004bfa <UartDriver_receivedBytesCallback>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_UART_RxCpltCallback+0x2a>
			Error_Handler();
 800440a:	2165      	movs	r1, #101	; 0x65
 800440c:	4807      	ldr	r0, [pc, #28]	; (800442c <HAL_UART_RxCpltCallback+0x44>)
 800440e:	f000 f94f 	bl	80046b0 <_Error_Handler>
		}
	}
	DigitalOutDriver_setLow(&debugOut0);
 8004412:	4803      	ldr	r0, [pc, #12]	; (8004420 <HAL_UART_RxCpltCallback+0x38>)
 8004414:	f7fe fe1c 	bl	8003050 <DigitalOutDriver_setLow>
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000258 	.word	0x20000258
 8004424:	20000464 	.word	0x20000464
 8004428:	2000032c 	.word	0x2000032c
 800442c:	08005b64 	.word	0x08005b64

08004430 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
	if (huart == (&huart1)){
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <HAL_UART_TxCpltCallback+0x2c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d109      	bne.n	8004454 <HAL_UART_TxCpltCallback+0x24>
		if (UartDriver_transmitCompleteCallback(&uart1Driver) != UartDriver_Status_OK){
 8004440:	4807      	ldr	r0, [pc, #28]	; (8004460 <HAL_UART_TxCpltCallback+0x30>)
 8004442:	f000 fbfb 	bl	8004c3c <UartDriver_transmitCompleteCallback>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_UART_TxCpltCallback+0x24>
			Error_Handler();
 800444c:	216e      	movs	r1, #110	; 0x6e
 800444e:	4805      	ldr	r0, [pc, #20]	; (8004464 <HAL_UART_TxCpltCallback+0x34>)
 8004450:	f000 f92e 	bl	80046b0 <_Error_Handler>
		}
	}
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000464 	.word	0x20000464
 8004460:	2000032c 	.word	0x2000032c
 8004464:	08005b64 	.word	0x08005b64

08004468 <foo>:

void foo(uint8_t byte, void* dummy){
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]

	DigitalOutDriver_toggle(&led3Driver);
 8004474:	4803      	ldr	r0, [pc, #12]	; (8004484 <foo+0x1c>)
 8004476:	f7fe fe06 	bl	8003086 <DigitalOutDriver_toggle>

}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000240 	.word	0x20000240

08004488 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800448e:	f7fc f8c7 	bl	8000620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004492:	f000 f873 	bl	800457c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004496:	f7fe fe21 	bl	80030dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800449a:	f000 fc45 	bl	8004d28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  DigitalOutDriver_init(&led1Driver, (DigitalOutDriver_Port_TypeDef*)LD1_GPIO_Port, &ledDebug1Pin, DigitalOutDriver_StartLevel_High);
 800449e:	2301      	movs	r3, #1
 80044a0:	4a26      	ldr	r2, [pc, #152]	; (800453c <main+0xb4>)
 80044a2:	4927      	ldr	r1, [pc, #156]	; (8004540 <main+0xb8>)
 80044a4:	4827      	ldr	r0, [pc, #156]	; (8004544 <main+0xbc>)
 80044a6:	f7fe fd6a 	bl	8002f7e <DigitalOutDriver_init>
  DigitalOutDriver_init(&led2Driver, (DigitalOutDriver_Port_TypeDef*)LD2_GPIO_Port, &ledDebug2Pin, DigitalOutDriver_StartLevel_High);
 80044aa:	2301      	movs	r3, #1
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <main+0xc0>)
 80044ae:	4924      	ldr	r1, [pc, #144]	; (8004540 <main+0xb8>)
 80044b0:	4826      	ldr	r0, [pc, #152]	; (800454c <main+0xc4>)
 80044b2:	f7fe fd64 	bl	8002f7e <DigitalOutDriver_init>
  DigitalOutDriver_init(&led3Driver, (DigitalOutDriver_Port_TypeDef*)LD3_GPIO_Port, &ledDebug3Pin, DigitalOutDriver_StartLevel_High);
 80044b6:	2301      	movs	r3, #1
 80044b8:	4a25      	ldr	r2, [pc, #148]	; (8004550 <main+0xc8>)
 80044ba:	4921      	ldr	r1, [pc, #132]	; (8004540 <main+0xb8>)
 80044bc:	4825      	ldr	r0, [pc, #148]	; (8004554 <main+0xcc>)
 80044be:	f7fe fd5e 	bl	8002f7e <DigitalOutDriver_init>

  DigitalOutDriver_init(&debugOut0, (DigitalOutDriver_Port_TypeDef*)DUBUG_OUT_0_GPIO_Port, &debugOut0Pin, DigitalOutDriver_StartLevel_High);
 80044c2:	2301      	movs	r3, #1
 80044c4:	4a24      	ldr	r2, [pc, #144]	; (8004558 <main+0xd0>)
 80044c6:	491e      	ldr	r1, [pc, #120]	; (8004540 <main+0xb8>)
 80044c8:	4824      	ldr	r0, [pc, #144]	; (800455c <main+0xd4>)
 80044ca:	f7fe fd58 	bl	8002f7e <DigitalOutDriver_init>

  DigitalOutDriver_init(&hc05KeyDriver, (DigitalOutDriver_Port_TypeDef*)HC05_KEY_GPIO_Port, &hc05KeyPin, DigitalOutDriver_StartLevel_High);
 80044ce:	2301      	movs	r3, #1
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <main+0xd8>)
 80044d2:	491b      	ldr	r1, [pc, #108]	; (8004540 <main+0xb8>)
 80044d4:	4823      	ldr	r0, [pc, #140]	; (8004564 <main+0xdc>)
 80044d6:	f7fe fd52 	bl	8002f7e <DigitalOutDriver_init>

  UartDriver_init(&uart1Driver, &huart1, 38400);
 80044da:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80044de:	4922      	ldr	r1, [pc, #136]	; (8004568 <main+0xe0>)
 80044e0:	4822      	ldr	r0, [pc, #136]	; (800456c <main+0xe4>)
 80044e2:	f000 f9b9 	bl	8004858 <UartDriver_init>

  HC05Driver_init(&hc05Driver, HC05Driver_Role_Slave, &uart1Driver, &hc05KeyDriver, HC05_DATA_BAUDRATE, HC05_DEVICE_NAME, HC05_PASSWORD);
 80044e6:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	4b20      	ldr	r3, [pc, #128]	; (8004570 <main+0xe8>)
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <main+0xdc>)
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <main+0xe4>)
 80044fa:	2100      	movs	r1, #0
 80044fc:	481d      	ldr	r0, [pc, #116]	; (8004574 <main+0xec>)
 80044fe:	f7fe ff0f 	bl	8003320 <HC05Driver_init>

//  BluetoothProtocolMiddleware_init(&btMiddleware, &hc05Driver);

  HC05Driver_Status_TypeDef st = HC05Driver_setReceiveDataCallback(&hc05Driver, foo, NULL, NULL);
 8004502:	2300      	movs	r3, #0
 8004504:	2200      	movs	r2, #0
 8004506:	491c      	ldr	r1, [pc, #112]	; (8004578 <main+0xf0>)
 8004508:	481a      	ldr	r0, [pc, #104]	; (8004574 <main+0xec>)
 800450a:	f7ff fdc3 	bl	8004094 <HC05Driver_setReceiveDataCallback>
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DigitalOutDriver_setHigh(&led2Driver);
 8004512:	480e      	ldr	r0, [pc, #56]	; (800454c <main+0xc4>)
 8004514:	f7fe fd81 	bl	800301a <DigitalOutDriver_setHigh>
	  HAL_Delay(200);
 8004518:	20c8      	movs	r0, #200	; 0xc8
 800451a:	f7fc f8df 	bl	80006dc <HAL_Delay>
	  DigitalOutDriver_setLow(&led2Driver);
 800451e:	480b      	ldr	r0, [pc, #44]	; (800454c <main+0xc4>)
 8004520:	f7fe fd96 	bl	8003050 <DigitalOutDriver_setLow>
	  HAL_Delay(400);
 8004524:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004528:	f7fc f8d8 	bl	80006dc <HAL_Delay>
	  DigitalOutDriver_toggle(&led1Driver);
 800452c:	4805      	ldr	r0, [pc, #20]	; (8004544 <main+0xbc>)
 800452e:	f7fe fdaa 	bl	8003086 <DigitalOutDriver_toggle>
	  HAL_Delay(100);
 8004532:	2064      	movs	r0, #100	; 0x64
 8004534:	f7fc f8d2 	bl	80006dc <HAL_Delay>
	  DigitalOutDriver_setHigh(&led2Driver);
 8004538:	e7eb      	b.n	8004512 <main+0x8a>
 800453a:	bf00      	nop
 800453c:	20000008 	.word	0x20000008
 8004540:	40020400 	.word	0x40020400
 8004544:	20000228 	.word	0x20000228
 8004548:	2000000a 	.word	0x2000000a
 800454c:	20000210 	.word	0x20000210
 8004550:	2000000c 	.word	0x2000000c
 8004554:	20000240 	.word	0x20000240
 8004558:	2000000e 	.word	0x2000000e
 800455c:	20000258 	.word	0x20000258
 8004560:	20000006 	.word	0x20000006
 8004564:	20000314 	.word	0x20000314
 8004568:	20000464 	.word	0x20000464
 800456c:	2000032c 	.word	0x2000032c
 8004570:	08005b74 	.word	0x08005b74
 8004574:	20000270 	.word	0x20000270
 8004578:	08004469 	.word	0x08004469

0800457c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0b8      	sub	sp, #224	; 0xe0
 8004580:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	4a47      	ldr	r2, [pc, #284]	; (80046a0 <SystemClock_Config+0x124>)
 8004584:	4b46      	ldr	r3, [pc, #280]	; (80046a0 <SystemClock_Config+0x124>)
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	; 0x40
 800458e:	4b44      	ldr	r3, [pc, #272]	; (80046a0 <SystemClock_Config+0x124>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800459a:	4a42      	ldr	r2, [pc, #264]	; (80046a4 <SystemClock_Config+0x128>)
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <SystemClock_Config+0x128>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80045a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <SystemClock_Config+0x128>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c4:	2302      	movs	r3, #2
 80045c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80045d2:	2304      	movs	r3, #4
 80045d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80045d8:	2360      	movs	r3, #96	; 0x60
 80045da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045de:	2302      	movs	r3, #2
 80045e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045e4:	2304      	movs	r3, #4
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fc fd36 	bl	8001060 <HAL_RCC_OscConfig>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 80045fa:	21e4      	movs	r1, #228	; 0xe4
 80045fc:	482a      	ldr	r0, [pc, #168]	; (80046a8 <SystemClock_Config+0x12c>)
 80045fe:	f000 f857 	bl	80046b0 <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004602:	f7fc fcdd 	bl	8000fc0 <HAL_PWREx_EnableOverDrive>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <SystemClock_Config+0x98>
  {
    _Error_Handler(__FILE__, __LINE__);
 800460c:	21eb      	movs	r1, #235	; 0xeb
 800460e:	4826      	ldr	r0, [pc, #152]	; (80046a8 <SystemClock_Config+0x12c>)
 8004610:	f000 f84e 	bl	80046b0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004614:	230f      	movs	r3, #15
 8004616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800461a:	2302      	movs	r3, #2
 800461c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800462a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004638:	2103      	movs	r1, #3
 800463a:	4618      	mov	r0, r3
 800463c:	f7fc ff82 	bl	8001544 <HAL_RCC_ClockConfig>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <SystemClock_Config+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004646:	21f9      	movs	r1, #249	; 0xf9
 8004648:	4817      	ldr	r0, [pc, #92]	; (80046a8 <SystemClock_Config+0x12c>)
 800464a:	f000 f831 	bl	80046b0 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004652:	2300      	movs	r3, #0
 8004654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd f966 	bl	800192c <HAL_RCCEx_PeriphCLKConfig>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <SystemClock_Config+0xf4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800466a:	480f      	ldr	r0, [pc, #60]	; (80046a8 <SystemClock_Config+0x12c>)
 800466c:	f000 f820 	bl	80046b0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004670:	f7fd f928 	bl	80018c4 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <SystemClock_Config+0x130>)
 8004678:	fba3 2302 	umull	r2, r3, r3, r2
 800467c:	099b      	lsrs	r3, r3, #6
 800467e:	4618      	mov	r0, r3
 8004680:	f7fc f975 	bl	800096e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004684:	2004      	movs	r0, #4
 8004686:	f7fc f97f 	bl	8000988 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	2100      	movs	r1, #0
 800468e:	f04f 30ff 	mov.w	r0, #4294967295
 8004692:	f7fc f934 	bl	80008fe <HAL_NVIC_SetPriority>
}
 8004696:	bf00      	nop
 8004698:	37e0      	adds	r7, #224	; 0xe0
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000
 80046a8:	08005b64 	.word	0x08005b64
 80046ac:	10624dd3 	.word	0x10624dd3

080046b0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80046ba:	e7fe      	b.n	80046ba <_Error_Handler+0xa>

080046bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	4a28      	ldr	r2, [pc, #160]	; (8004764 <HAL_MspInit+0xa8>)
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_MspInit+0xa8>)
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046cc:	6413      	str	r3, [r2, #64]	; 0x40
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <HAL_MspInit+0xa8>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046da:	4a22      	ldr	r2, [pc, #136]	; (8004764 <HAL_MspInit+0xa8>)
 80046dc:	4b21      	ldr	r3, [pc, #132]	; (8004764 <HAL_MspInit+0xa8>)
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e4:	6453      	str	r3, [r2, #68]	; 0x44
 80046e6:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_MspInit+0xa8>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f2:	2003      	movs	r0, #3
 80046f4:	f7fc f8f8 	bl	80008e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80046f8:	2200      	movs	r2, #0
 80046fa:	2100      	movs	r1, #0
 80046fc:	f06f 000b 	mvn.w	r0, #11
 8004700:	f7fc f8fd 	bl	80008fe <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004704:	2200      	movs	r2, #0
 8004706:	2100      	movs	r1, #0
 8004708:	f06f 000a 	mvn.w	r0, #10
 800470c:	f7fc f8f7 	bl	80008fe <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004710:	2200      	movs	r2, #0
 8004712:	2100      	movs	r1, #0
 8004714:	f06f 0009 	mvn.w	r0, #9
 8004718:	f7fc f8f1 	bl	80008fe <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800471c:	2200      	movs	r2, #0
 800471e:	2100      	movs	r1, #0
 8004720:	f06f 0004 	mvn.w	r0, #4
 8004724:	f7fc f8eb 	bl	80008fe <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004728:	2200      	movs	r2, #0
 800472a:	2100      	movs	r1, #0
 800472c:	f06f 0003 	mvn.w	r0, #3
 8004730:	f7fc f8e5 	bl	80008fe <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004734:	2200      	movs	r2, #0
 8004736:	2100      	movs	r1, #0
 8004738:	f06f 0001 	mvn.w	r0, #1
 800473c:	f7fc f8df 	bl	80008fe <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004740:	2200      	movs	r2, #0
 8004742:	2100      	movs	r1, #0
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	f7fc f8d9 	bl	80008fe <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800474c:	2200      	movs	r2, #0
 800474e:	2100      	movs	r1, #0
 8004750:	2005      	movs	r0, #5
 8004752:	f7fc f8d4 	bl	80008fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004756:	2005      	movs	r0, #5
 8004758:	f7fc f8ed 	bl	8000936 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800

08004768 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800477a:	e7fe      	b.n	800477a <HardFault_Handler+0x4>

0800477c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004780:	e7fe      	b.n	8004780 <MemManage_Handler+0x4>

08004782 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004786:	e7fe      	b.n	8004786 <BusFault_Handler+0x4>

08004788 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800478c:	e7fe      	b.n	800478c <UsageFault_Handler+0x4>

0800478e <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004792:	bf00      	nop
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80047aa:	b480      	push	{r7}
 80047ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047bc:	f7fb ff6e 	bl	800069c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80047c0:	f7fc f8fe 	bl	80009c0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047dc:	4802      	ldr	r0, [pc, #8]	; (80047e8 <USART1_IRQHandler+0x10>)
 80047de:	f7fd fe23 	bl	8002428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000464 	.word	0x20000464

080047ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f0:	4a15      	ldr	r2, [pc, #84]	; (8004848 <SystemInit+0x5c>)
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <SystemInit+0x5c>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004800:	4a12      	ldr	r2, [pc, #72]	; (800484c <SystemInit+0x60>)
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <SystemInit+0x60>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <SystemInit+0x60>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004812:	490e      	ldr	r1, [pc, #56]	; (800484c <SystemInit+0x60>)
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <SystemInit+0x60>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <SystemInit+0x64>)
 800481a:	4013      	ands	r3, r2
 800481c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800481e:	4b0b      	ldr	r3, [pc, #44]	; (800484c <SystemInit+0x60>)
 8004820:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <SystemInit+0x68>)
 8004822:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <SystemInit+0x60>)
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <SystemInit+0x60>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <SystemInit+0x60>)
 8004832:	2200      	movs	r2, #0
 8004834:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004836:	4b04      	ldr	r3, [pc, #16]	; (8004848 <SystemInit+0x5c>)
 8004838:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800483c:	609a      	str	r2, [r3, #8]
#endif
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00
 800484c:	40023800 	.word	0x40023800
 8004850:	fef6ffff 	.word	0xfef6ffff
 8004854:	24003010 	.word	0x24003010

08004858 <UartDriver_init>:

static UartDriver_Status_TypeDef UartDriver_TransmitBytes(UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t bytes);
static UartDriver_Status_TypeDef UartDriver_startReceiver(UartDriver_TypeDef* pSelf);
static UartDriver_Status_TypeDef UartDriver_stopReceiver(UartDriver_TypeDef* pSelf);

UartDriver_Status_TypeDef UartDriver_init(UartDriver_TypeDef* pSelf, UART_HandleTypeDef* pUartHandler, uint32_t baudRate){
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]

	if (pSelf->state != UartDriver_State_UnInitialized){
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <UartDriver_init+0x18>
		return UartDriver_Status_Error;
 800486c:	2308      	movs	r3, #8
 800486e:	e047      	b.n	8004900 <UartDriver_init+0xa8>
	}

	pSelf->pUartHandler = pUartHandler;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	605a      	str	r2, [r3, #4]
	pSelf->receiveBufferIterator = 0;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	81da      	strh	r2, [r3, #14]
	pSelf->transmitInProgress = 0;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	731a      	strb	r2, [r3, #12]
	memset((char*)pSelf->receiveBuffer, 0, UART_DRIVER_BUFFER_SIZE);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3310      	adds	r3, #16
 8004886:	2280      	movs	r2, #128	; 0x80
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fb3c 	bl	8004f08 <memset>

	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8004890:	2300      	movs	r3, #0
 8004892:	82fb      	strh	r3, [r7, #22]
 8004894:	e014      	b.n	80048c0 <UartDriver_init+0x68>
		pSelf->callbacks[i] = NULL;
 8004896:	8afa      	ldrh	r2, [r7, #22]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3224      	adds	r2, #36	; 0x24
 800489c:	2100      	movs	r1, #0
 800489e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pSelf->callbackArgs[i] = NULL;
 80048a2:	8afa      	ldrh	r2, [r7, #22]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3226      	adds	r2, #38	; 0x26
 80048a8:	2100      	movs	r1, #0
 80048aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pSelf->readIterators[i] = 0;
 80048ae:	8afa      	ldrh	r2, [r7, #22]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3250      	adds	r2, #80	; 0x50
 80048b4:	2100      	movs	r1, #0
 80048b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80048ba:	8afb      	ldrh	r3, [r7, #22]
 80048bc:	3301      	adds	r3, #1
 80048be:	82fb      	strh	r3, [r7, #22]
 80048c0:	8afb      	ldrh	r3, [r7, #22]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d9e7      	bls.n	8004896 <UartDriver_init+0x3e>
	}

	if (pSelf->pUartHandler->gState == HAL_UART_STATE_RESET){
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <UartDriver_init+0x80>
		return UartDriver_Status_Error;
 80048d4:	2308      	movs	r3, #8
 80048d6:	e013      	b.n	8004900 <UartDriver_init+0xa8>
	}

	pSelf->state = UartDriver_State_Ready; //Because UartDriver_setBaudRate() needs state to be UartDriver_State_Initialized.
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]

	if (pSelf->pUartHandler->Init.BaudRate != baudRate){
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d003      	beq.n	80048f2 <UartDriver_init+0x9a>
		UartDriver_setBaudRate(pSelf, baudRate);
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f821 	bl	8004934 <UartDriver_setBaudRate>
	}

	pSelf->baudRate = baudRate;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]

	return UartDriver_startReceiver(pSelf);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f9db 	bl	8004cb4 <UartDriver_startReceiver>
 80048fe:	4603      	mov	r3, r0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UartDriver_getBaudRate>:

UartDriver_Status_TypeDef UartDriver_getBaudRate(UartDriver_TypeDef* pSelf, uint32_t* pRetBaudRate){
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <UartDriver_getBaudRate+0x16>
		return UartDriver_Status_UnInitializedErrror;
 800491a:	2301      	movs	r3, #1
 800491c:	e004      	b.n	8004928 <UartDriver_getBaudRate+0x20>
	}

	*pRetBaudRate = pSelf->baudRate;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	601a      	str	r2, [r3, #0]

	return UartDriver_Status_OK;
 8004926:	2300      	movs	r3, #0

}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <UartDriver_setBaudRate>:

UartDriver_Status_TypeDef UartDriver_setBaudRate(UartDriver_TypeDef* pSelf, uint32_t baudRate){
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]

	if (pSelf->state == UartDriver_State_UnInitialized){
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <UartDriver_setBaudRate+0x16>
		return UartDriver_Status_UnInitializedErrror;
 8004946:	2301      	movs	r3, #1
 8004948:	e040      	b.n	80049cc <UartDriver_setBaudRate+0x98>
	}

	UartDriver_Status_TypeDef ret;
	UartDriver_State_TypeDef prevState = pSelf->state;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	73fb      	strb	r3, [r7, #15]

	if (pSelf->state == UartDriver_State_Receiving){
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d109      	bne.n	800496c <UartDriver_setBaudRate+0x38>
		if ((ret = UartDriver_stopReceiver(pSelf)) != UartDriver_Status_OK){
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9ce 	bl	8004cfa <UartDriver_stopReceiver>
 800495e:	4603      	mov	r3, r0
 8004960:	73bb      	strb	r3, [r7, #14]
 8004962:	7bbb      	ldrb	r3, [r7, #14]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <UartDriver_setBaudRate+0x38>
			return ret;
 8004968:	7bbb      	ldrb	r3, [r7, #14]
 800496a:	e02f      	b.n	80049cc <UartDriver_setBaudRate+0x98>
		}
	}

	if (pSelf->state != UartDriver_State_Ready){
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d001      	beq.n	8004978 <UartDriver_setBaudRate+0x44>
		return UartDriver_Status_Error;
 8004974:	2308      	movs	r3, #8
 8004976:	e029      	b.n	80049cc <UartDriver_setBaudRate+0x98>
	}

	pSelf->state = UartDriver_State_ChangingSettings;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	701a      	strb	r2, [r3, #0]

	if (HAL_UART_DeInit(pSelf->pUartHandler) != HAL_OK){
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fd fc49 	bl	800221a <HAL_UART_DeInit>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <UartDriver_setBaudRate+0x5e>
		return UartDriver_Status_Error;
 800498e:	2308      	movs	r3, #8
 8004990:	e01c      	b.n	80049cc <UartDriver_setBaudRate+0x98>
	}

	pSelf->pUartHandler->Init.BaudRate = baudRate;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	605a      	str	r2, [r3, #4]

	if (HAL_UART_Init(pSelf->pUartHandler) != HAL_OK){
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fd fbea 	bl	8002178 <HAL_UART_Init>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <UartDriver_setBaudRate+0x7a>
		return UartDriver_Status_Error;
 80049aa:	2308      	movs	r3, #8
 80049ac:	e00e      	b.n	80049cc <UartDriver_setBaudRate+0x98>
	}

	pSelf->baudRate = baudRate;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	609a      	str	r2, [r3, #8]
	pSelf->state = UartDriver_State_Ready;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]

	if (prevState == UartDriver_State_Receiving){
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d104      	bne.n	80049ca <UartDriver_setBaudRate+0x96>
		return UartDriver_startReceiver(pSelf);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f977 	bl	8004cb4 <UartDriver_startReceiver>
 80049c6:	4603      	mov	r3, r0
 80049c8:	e000      	b.n	80049cc <UartDriver_setBaudRate+0x98>
	}

	return UartDriver_Status_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UartDriver_receiveBytesTerminationSign>:
	}

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_receiveBytesTerminationSign(UartDriver_TypeDef* pSelf, uint8_t* pReceiveBuffer, uint16_t bufferSize, uint8_t terminationSign){
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	460b      	mov	r3, r1
 80049e4:	80fb      	strh	r3, [r7, #6]
 80049e6:	4613      	mov	r3, r2
 80049e8:	717b      	strb	r3, [r7, #5]

	if (pSelf->state == UartDriver_State_UnInitialized){
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <UartDriver_receiveBytesTerminationSign+0x22>
		return UartDriver_Status_UnInitializedErrror;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e041      	b.n	8004a7a <UartDriver_receiveBytesTerminationSign+0xa6>
	}

	if (pSelf->state != UartDriver_State_Receiving){
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d001      	beq.n	8004a02 <UartDriver_receiveBytesTerminationSign+0x2e>
		return UartDriver_Status_Error;
 80049fe:	2308      	movs	r3, #8
 8004a00:	e03b      	b.n	8004a7a <UartDriver_receiveBytesTerminationSign+0xa6>
	}

	uint16_t tmpIterator = pSelf->receiveBufferIterator;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	89db      	ldrh	r3, [r3, #14]
 8004a06:	82fb      	strh	r3, [r7, #22]
	uint16_t charCounter = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	82bb      	strh	r3, [r7, #20]

	while (charCounter < bufferSize){
 8004a0c:	e021      	b.n	8004a52 <UartDriver_receiveBytesTerminationSign+0x7e>
		if (pSelf->receiveBufferIterator != tmpIterator){
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	89db      	ldrh	r3, [r3, #14]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	8afa      	ldrh	r2, [r7, #22]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d01b      	beq.n	8004a52 <UartDriver_receiveBytesTerminationSign+0x7e>
			pReceiveBuffer[charCounter] = pSelf->receiveBuffer[tmpIterator];
 8004a1a:	8abb      	ldrh	r3, [r7, #20]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	4413      	add	r3, r2
 8004a20:	8afa      	ldrh	r2, [r7, #22]
 8004a22:	68f9      	ldr	r1, [r7, #12]
 8004a24:	440a      	add	r2, r1
 8004a26:	7c12      	ldrb	r2, [r2, #16]
 8004a28:	701a      	strb	r2, [r3, #0]
			if (pReceiveBuffer[charCounter++] == terminationSign){
 8004a2a:	8abb      	ldrh	r3, [r7, #20]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	82ba      	strh	r2, [r7, #20]
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4413      	add	r3, r2
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	797a      	ldrb	r2, [r7, #5]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d00e      	beq.n	8004a5c <UartDriver_receiveBytesTerminationSign+0x88>
				break;
			} else {
				tmpIterator = (tmpIterator+1) % UART_DRIVER_BUFFER_SIZE;
 8004a3e:	8afb      	ldrh	r3, [r7, #22]
 8004a40:	3301      	adds	r3, #1
 8004a42:	425a      	negs	r2, r3
 8004a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a4c:	bf58      	it	pl
 8004a4e:	4253      	negpl	r3, r2
 8004a50:	82fb      	strh	r3, [r7, #22]
	while (charCounter < bufferSize){
 8004a52:	8aba      	ldrh	r2, [r7, #20]
 8004a54:	88fb      	ldrh	r3, [r7, #6]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d3d9      	bcc.n	8004a0e <UartDriver_receiveBytesTerminationSign+0x3a>
 8004a5a:	e000      	b.n	8004a5e <UartDriver_receiveBytesTerminationSign+0x8a>
				break;
 8004a5c:	bf00      	nop
			}
		}
	}

	if (charCounter == UART_DRIVER_BUFFER_SIZE && pReceiveBuffer[charCounter-1] != terminationSign){
 8004a5e:	8abb      	ldrh	r3, [r7, #20]
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d109      	bne.n	8004a78 <UartDriver_receiveBytesTerminationSign+0xa4>
 8004a64:	8abb      	ldrh	r3, [r7, #20]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	797a      	ldrb	r2, [r7, #5]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <UartDriver_receiveBytesTerminationSign+0xa4>
		return UartDriver_Status_BufferOverflowError;
 8004a74:	2304      	movs	r3, #4
 8004a76:	e000      	b.n	8004a7a <UartDriver_receiveBytesTerminationSign+0xa6>
	}

	return UartDriver_Status_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <UartDriver_sendAndReceiveTerminationSign>:

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_sendAndReceiveTerminationSign(UartDriver_TypeDef* pSelf, uint8_t* pSendBuffer, uint16_t bytesToSend, \
		uint8_t* pReceiveBuffer, uint16_t bufferSize, uint8_t terminationSign){
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	4613      	mov	r3, r2
 8004a94:	80fb      	strh	r3, [r7, #6]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <UartDriver_sendAndReceiveTerminationSign+0x1c>
		return UartDriver_Status_UnInitializedErrror;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e01c      	b.n	8004adc <UartDriver_sendAndReceiveTerminationSign+0x56>
	}

	if (pSelf->state != UartDriver_State_Receiving){
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d001      	beq.n	8004aae <UartDriver_sendAndReceiveTerminationSign+0x28>
		return UartDriver_Status_Error;
 8004aaa:	2308      	movs	r3, #8
 8004aac:	e016      	b.n	8004adc <UartDriver_sendAndReceiveTerminationSign+0x56>
	}

	UartDriver_Status_TypeDef ret = UartDriver_Status_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	75fb      	strb	r3, [r7, #23]
	if ((ret = UartDriver_TransmitBytes(pSelf, pSendBuffer, bytesToSend)) != UartDriver_Status_OK){
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f8da 	bl	8004c72 <UartDriver_TransmitBytes>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	75fb      	strb	r3, [r7, #23]
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <UartDriver_sendAndReceiveTerminationSign+0x46>
		return ret;
 8004ac8:	7dfb      	ldrb	r3, [r7, #23]
 8004aca:	e007      	b.n	8004adc <UartDriver_sendAndReceiveTerminationSign+0x56>
	}

	return UartDriver_receiveBytesTerminationSign(pSelf, pReceiveBuffer, bufferSize, terminationSign);
 8004acc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ad0:	8c3a      	ldrh	r2, [r7, #32]
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f7ff ff7d 	bl	80049d4 <UartDriver_receiveBytesTerminationSign>
 8004ada:	4603      	mov	r3, r0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <UartDriver_setReceiveDataCallback>:
	}

	return UartDriver_receiveNBytes(pSelf, pReceiveBuffer, bytesToRead);
}

UartDriver_Status_TypeDef UartDriver_setReceiveDataCallback(UartDriver_TypeDef* pSelf, void (*foo)(uint8_t byte, void* pArgs), void* pArgs, UartDriver_CallbackIterator_TypeDef* pRetCallbackIterator){
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <UartDriver_setReceiveDataCallback+0x1a>
		return UartDriver_Status_UnInitializedErrror;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e03b      	b.n	8004b76 <UartDriver_setReceiveDataCallback+0x92>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d005      	beq.n	8004b12 <UartDriver_setReceiveDataCallback+0x2e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d001      	beq.n	8004b12 <UartDriver_setReceiveDataCallback+0x2e>
		return UartDriver_Status_Error;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	e031      	b.n	8004b76 <UartDriver_setReceiveDataCallback+0x92>
	}

	uint16_t i;
	for (i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8004b12:	2300      	movs	r3, #0
 8004b14:	82fb      	strh	r3, [r7, #22]
 8004b16:	e01e      	b.n	8004b56 <UartDriver_setReceiveDataCallback+0x72>
		if (pSelf->callbacks[i] == NULL){
 8004b18:	8afa      	ldrh	r2, [r7, #22]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3224      	adds	r2, #36	; 0x24
 8004b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d114      	bne.n	8004b50 <UartDriver_setReceiveDataCallback+0x6c>
			pSelf->callbacks[i] = foo;
 8004b26:	8afa      	ldrh	r2, [r7, #22]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3224      	adds	r2, #36	; 0x24
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pSelf->callbackArgs[i] = pArgs;
 8004b32:	8afa      	ldrh	r2, [r7, #22]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3226      	adds	r2, #38	; 0x26
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pSelf->readIterators[i] = pSelf->receiveBufferIterator;
 8004b3e:	8afa      	ldrh	r2, [r7, #22]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	89db      	ldrh	r3, [r3, #14]
 8004b44:	b299      	uxth	r1, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3250      	adds	r2, #80	; 0x50
 8004b4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			break;
 8004b4e:	e005      	b.n	8004b5c <UartDriver_setReceiveDataCallback+0x78>
	for (i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8004b50:	8afb      	ldrh	r3, [r7, #22]
 8004b52:	3301      	adds	r3, #1
 8004b54:	82fb      	strh	r3, [r7, #22]
 8004b56:	8afb      	ldrh	r3, [r7, #22]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d9dd      	bls.n	8004b18 <UartDriver_setReceiveDataCallback+0x34>
		}
	}

	if (i == UART_DRIVER_MAX_CALLBACK_NUMBER){
 8004b5c:	8afb      	ldrh	r3, [r7, #22]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d101      	bne.n	8004b66 <UartDriver_setReceiveDataCallback+0x82>
		return UartDriver_Status_TooManyCallbacksError;
 8004b62:	2307      	movs	r3, #7
 8004b64:	e007      	b.n	8004b76 <UartDriver_setReceiveDataCallback+0x92>
	}

	if (pRetCallbackIterator != NULL){
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <UartDriver_setReceiveDataCallback+0x90>
		*pRetCallbackIterator = (UartDriver_CallbackIterator_TypeDef)i;
 8004b6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	801a      	strh	r2, [r3, #0]
	}


	return UartDriver_Status_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <UartDriver_removeReceiveDataCallback>:

UartDriver_Status_TypeDef UartDriver_removeReceiveDataCallback(UartDriver_TypeDef* pSelf, UartDriver_CallbackIterator_TypeDef callbackIterator){
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	807b      	strh	r3, [r7, #2]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <UartDriver_removeReceiveDataCallback+0x18>
		return UartDriver_Status_UnInitializedErrror;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e029      	b.n	8004bee <UartDriver_removeReceiveDataCallback+0x6c>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d005      	beq.n	8004bae <UartDriver_removeReceiveDataCallback+0x2c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d001      	beq.n	8004bae <UartDriver_removeReceiveDataCallback+0x2c>
		return UartDriver_Status_Error;
 8004baa:	2308      	movs	r3, #8
 8004bac:	e01f      	b.n	8004bee <UartDriver_removeReceiveDataCallback+0x6c>
	}

	if (pSelf->callbacks[callbackIterator] == NULL){
 8004bae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3224      	adds	r2, #36	; 0x24
 8004bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <UartDriver_removeReceiveDataCallback+0x40>
		return UartDriver_Status_Error;
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	e015      	b.n	8004bee <UartDriver_removeReceiveDataCallback+0x6c>
	}

	pSelf->callbacks[callbackIterator] = NULL;
 8004bc2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3224      	adds	r2, #36	; 0x24
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pSelf->callbackArgs[callbackIterator] = NULL;
 8004bd0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3226      	adds	r2, #38	; 0x26
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pSelf->readIterators[callbackIterator] = 0;
 8004bde:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3250      	adds	r2, #80	; 0x50
 8004be6:	2100      	movs	r1, #0
 8004be8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	return UartDriver_Status_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <UartDriver_receivedBytesCallback>:

UartDriver_Status_TypeDef UartDriver_receivedBytesCallback(UartDriver_TypeDef* pSelf){
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Receiving){
		return UartDriver_Status_NotReceivingErrror;
	}
*/
	pSelf->receiveBufferIterator++;// = (pSelf->receiveBufferIterator + 1) % UART_DRIVER_BUFFER_SIZE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	89db      	ldrh	r3, [r3, #14]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3301      	adds	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	81da      	strh	r2, [r3, #14]

	if (HAL_UART_Receive_IT(pSelf->pUartHandler, pSelf->receiveBuffer+pSelf->receiveBufferIterator, 1) != HAL_OK){
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6858      	ldr	r0, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3310      	adds	r3, #16
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	89d2      	ldrh	r2, [r2, #14]
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	4413      	add	r3, r2
 8004c20:	2201      	movs	r2, #1
 8004c22:	4619      	mov	r1, r3
 8004c24:	f7fd fb78 	bl	8002318 <HAL_UART_Receive_IT>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <UartDriver_receivedBytesCallback+0x38>
		return UartDriver_Status_Error;
 8004c2e:	2308      	movs	r3, #8
 8004c30:	e000      	b.n	8004c34 <UartDriver_receivedBytesCallback+0x3a>
		}
	}	//TODO wywalic to stad i wrzucic do jakiegos thread'a
*/


	return UartDriver_Status_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UartDriver_transmitCompleteCallback>:

UartDriver_Status_TypeDef UartDriver_transmitCompleteCallback(UartDriver_TypeDef* pSelf){
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

	if (pSelf->state == UartDriver_State_UnInitialized){
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <UartDriver_transmitCompleteCallback+0x14>
		return UartDriver_Status_UnInitializedErrror;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e00a      	b.n	8004c66 <UartDriver_transmitCompleteCallback+0x2a>
	}

	if (pSelf->transmitInProgress == 0){
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7b1b      	ldrb	r3, [r3, #12]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <UartDriver_transmitCompleteCallback+0x22>
		return UartDriver_Status_NotTransmitingErrror;
 8004c5a:	2306      	movs	r3, #6
 8004c5c:	e003      	b.n	8004c66 <UartDriver_transmitCompleteCallback+0x2a>
	}

	pSelf->transmitInProgress = 0;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	731a      	strb	r2, [r3, #12]

	return UartDriver_Status_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <UartDriver_TransmitBytes>:

static UartDriver_Status_TypeDef UartDriver_TransmitBytes(UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t bytes){
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	80fb      	strh	r3, [r7, #6]

	while (pSelf->transmitInProgress != 0){ }
 8004c80:	bf00      	nop
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	7b1b      	ldrb	r3, [r3, #12]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1fa      	bne.n	8004c82 <UartDriver_TransmitBytes+0x10>

	if (HAL_UART_Transmit_IT(pSelf->pUartHandler, pBuffer, bytes) != HAL_OK){
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd faf8 	bl	800228a <HAL_UART_Transmit_IT>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <UartDriver_TransmitBytes+0x32>
		return UartDriver_Status_Error;
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	e003      	b.n	8004cac <UartDriver_TransmitBytes+0x3a>
	}

	pSelf->transmitInProgress = 1;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	731a      	strb	r2, [r3, #12]

	return UartDriver_Status_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <UartDriver_startReceiver>:

static UartDriver_Status_TypeDef UartDriver_startReceiver(UartDriver_TypeDef* pSelf){
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Ready){
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d001      	beq.n	8004cc8 <UartDriver_startReceiver+0x14>
		return UartDriver_Status_Error;
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	e014      	b.n	8004cf2 <UartDriver_startReceiver+0x3e>
	}

	if (HAL_UART_Receive_IT(pSelf->pUartHandler, pSelf->receiveBuffer+pSelf->receiveBufferIterator, 1) != HAL_OK){
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6858      	ldr	r0, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3310      	adds	r3, #16
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	89d2      	ldrh	r2, [r2, #14]
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f7fd fb1c 	bl	8002318 <HAL_UART_Receive_IT>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <UartDriver_startReceiver+0x36>
		return UartDriver_Status_Error;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	e003      	b.n	8004cf2 <UartDriver_startReceiver+0x3e>
	}

	pSelf->state = UartDriver_State_Receiving;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2203      	movs	r2, #3
 8004cee:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UartDriver_stopReceiver>:

static UartDriver_Status_TypeDef UartDriver_stopReceiver(UartDriver_TypeDef* pSelf){
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Receiving){
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d001      	beq.n	8004d0e <UartDriver_stopReceiver+0x14>
		return UartDriver_Status_NotReceivingErrror;
 8004d0a:	2305      	movs	r3, #5
 8004d0c:	e008      	b.n	8004d20 <UartDriver_stopReceiver+0x26>
	}

	HAL_UART_IRQHandler(pSelf->pUartHandler);	//TODO do sprawdzenia
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd fb88 	bl	8002428 <HAL_UART_IRQHandler>

	pSelf->state = UartDriver_State_Ready;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d2e:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <MX_USART1_UART_Init+0x5c>)
 8004d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1382400;
 8004d32:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d34:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <MX_USART1_UART_Init+0x60>)
 8004d36:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d3e:	4b10      	ldr	r3, [pc, #64]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d4c:	220c      	movs	r2, #12
 8004d4e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d68:	4805      	ldr	r0, [pc, #20]	; (8004d80 <MX_USART1_UART_Init+0x58>)
 8004d6a:	f7fd fa05 	bl	8002178 <HAL_UART_Init>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <MX_USART1_UART_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004d74:	2144      	movs	r1, #68	; 0x44
 8004d76:	4805      	ldr	r0, [pc, #20]	; (8004d8c <MX_USART1_UART_Init+0x64>)
 8004d78:	f7ff fc9a 	bl	80046b0 <_Error_Handler>
  }

}
 8004d7c:	bf00      	nop
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20000464 	.word	0x20000464
 8004d84:	40011000 	.word	0x40011000
 8004d88:	00151800 	.word	0x00151800
 8004d8c:	08005b88 	.word	0x08005b88

08004d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <HAL_UART_MspInit+0x84>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d134      	bne.n	8004e0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004da2:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_UART_MspInit+0x88>)
 8004da4:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <HAL_UART_MspInit+0x88>)
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	f043 0310 	orr.w	r3, r3, #16
 8004dac:	6453      	str	r3, [r2, #68]	; 0x44
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_UART_MspInit+0x88>)
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004dcc:	2304      	movs	r3, #4
 8004dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd0:	f107 030c 	add.w	r3, r7, #12
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4811      	ldr	r0, [pc, #68]	; (8004e1c <HAL_UART_MspInit+0x8c>)
 8004dd8:	f7fb fe22 	bl	8000a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2302      	movs	r3, #2
 8004de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de8:	2303      	movs	r3, #3
 8004dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dec:	2307      	movs	r3, #7
 8004dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df0:	f107 030c 	add.w	r3, r7, #12
 8004df4:	4619      	mov	r1, r3
 8004df6:	4809      	ldr	r0, [pc, #36]	; (8004e1c <HAL_UART_MspInit+0x8c>)
 8004df8:	f7fb fe12 	bl	8000a20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	2025      	movs	r0, #37	; 0x25
 8004e02:	f7fb fd7c 	bl	80008fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e06:	2025      	movs	r0, #37	; 0x25
 8004e08:	f7fb fd95 	bl	8000936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004e0c:	bf00      	nop
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40011000 	.word	0x40011000
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	40020400 	.word	0x40020400

08004e20 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0a      	ldr	r2, [pc, #40]	; (8004e58 <HAL_UART_MspDeInit+0x38>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10d      	bne.n	8004e4e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <HAL_UART_MspDeInit+0x3c>)
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_UART_MspDeInit+0x3c>)
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	f023 0310 	bic.w	r3, r3, #16
 8004e3c:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_6);
 8004e3e:	f248 0140 	movw	r1, #32832	; 0x8040
 8004e42:	4807      	ldr	r0, [pc, #28]	; (8004e60 <HAL_UART_MspDeInit+0x40>)
 8004e44:	f7fb ff96 	bl	8000d74 <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004e48:	2025      	movs	r0, #37	; 0x25
 8004e4a:	f7fb fd82 	bl	8000952 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40011000 	.word	0x40011000
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	40020400 	.word	0x40020400

08004e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e6a:	e003      	b.n	8004e74 <LoopCopyDataInit>

08004e6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e72:	3104      	adds	r1, #4

08004e74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e74:	480b      	ldr	r0, [pc, #44]	; (8004ea4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e7c:	d3f6      	bcc.n	8004e6c <CopyDataInit>
  ldr  r2, =_sbss
 8004e7e:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e80:	e002      	b.n	8004e88 <LoopFillZerobss>

08004e82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e84:	f842 3b04 	str.w	r3, [r2], #4

08004e88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e88:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e8c:	d3f9      	bcc.n	8004e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e8e:	f7ff fcad 	bl	80047ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e92:	f000 f815 	bl	8004ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e96:	f7ff faf7 	bl	8004488 <main>
  bx  lr    
 8004e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e9c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004ea0:	08005d00 	.word	0x08005d00
  ldr  r0, =_sdata
 8004ea4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ea8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8004eac:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8004eb0:	200004d8 	.word	0x200004d8

08004eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eb4:	e7fe      	b.n	8004eb4 <ADC_IRQHandler>

08004eb6 <atoi>:
 8004eb6:	220a      	movs	r2, #10
 8004eb8:	2100      	movs	r1, #0
 8004eba:	f000 b985 	b.w	80051c8 <strtol>
	...

08004ec0 <__libc_init_array>:
 8004ec0:	b570      	push	{r4, r5, r6, lr}
 8004ec2:	4e0d      	ldr	r6, [pc, #52]	; (8004ef8 <__libc_init_array+0x38>)
 8004ec4:	4c0d      	ldr	r4, [pc, #52]	; (8004efc <__libc_init_array+0x3c>)
 8004ec6:	1ba4      	subs	r4, r4, r6
 8004ec8:	10a4      	asrs	r4, r4, #2
 8004eca:	2500      	movs	r5, #0
 8004ecc:	42a5      	cmp	r5, r4
 8004ece:	d109      	bne.n	8004ee4 <__libc_init_array+0x24>
 8004ed0:	4e0b      	ldr	r6, [pc, #44]	; (8004f00 <__libc_init_array+0x40>)
 8004ed2:	4c0c      	ldr	r4, [pc, #48]	; (8004f04 <__libc_init_array+0x44>)
 8004ed4:	f000 fdc0 	bl	8005a58 <_init>
 8004ed8:	1ba4      	subs	r4, r4, r6
 8004eda:	10a4      	asrs	r4, r4, #2
 8004edc:	2500      	movs	r5, #0
 8004ede:	42a5      	cmp	r5, r4
 8004ee0:	d105      	bne.n	8004eee <__libc_init_array+0x2e>
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ee8:	4798      	blx	r3
 8004eea:	3501      	adds	r5, #1
 8004eec:	e7ee      	b.n	8004ecc <__libc_init_array+0xc>
 8004eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ef2:	4798      	blx	r3
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	e7f2      	b.n	8004ede <__libc_init_array+0x1e>
 8004ef8:	08005cf8 	.word	0x08005cf8
 8004efc:	08005cf8 	.word	0x08005cf8
 8004f00:	08005cf8 	.word	0x08005cf8
 8004f04:	08005cfc 	.word	0x08005cfc

08004f08 <memset>:
 8004f08:	4402      	add	r2, r0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d100      	bne.n	8004f12 <memset+0xa>
 8004f10:	4770      	bx	lr
 8004f12:	f803 1b01 	strb.w	r1, [r3], #1
 8004f16:	e7f9      	b.n	8004f0c <memset+0x4>

08004f18 <siprintf>:
 8004f18:	b40e      	push	{r1, r2, r3}
 8004f1a:	b500      	push	{lr}
 8004f1c:	b09c      	sub	sp, #112	; 0x70
 8004f1e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004f22:	ab1d      	add	r3, sp, #116	; 0x74
 8004f24:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004f28:	9002      	str	r0, [sp, #8]
 8004f2a:	9006      	str	r0, [sp, #24]
 8004f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f30:	480a      	ldr	r0, [pc, #40]	; (8004f5c <siprintf+0x44>)
 8004f32:	9104      	str	r1, [sp, #16]
 8004f34:	9107      	str	r1, [sp, #28]
 8004f36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004f42:	6800      	ldr	r0, [r0, #0]
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	a902      	add	r1, sp, #8
 8004f48:	f000 fa7a 	bl	8005440 <_svfiprintf_r>
 8004f4c:	9b02      	ldr	r3, [sp, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	b01c      	add	sp, #112	; 0x70
 8004f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f58:	b003      	add	sp, #12
 8004f5a:	4770      	bx	lr
 8004f5c:	20000014 	.word	0x20000014

08004f60 <strlcat>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	4603      	mov	r3, r0
 8004f64:	1887      	adds	r7, r0, r2
 8004f66:	429f      	cmp	r7, r3
 8004f68:	461d      	mov	r5, r3
 8004f6a:	d107      	bne.n	8004f7c <strlcat+0x1c>
 8004f6c:	1a1c      	subs	r4, r3, r0
 8004f6e:	1b12      	subs	r2, r2, r4
 8004f70:	d10a      	bne.n	8004f88 <strlcat+0x28>
 8004f72:	4608      	mov	r0, r1
 8004f74:	f7fb f96e 	bl	8000254 <strlen>
 8004f78:	4420      	add	r0, r4
 8004f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7c:	781c      	ldrb	r4, [r3, #0]
 8004f7e:	1c5e      	adds	r6, r3, #1
 8004f80:	2c00      	cmp	r4, #0
 8004f82:	d0f3      	beq.n	8004f6c <strlcat+0xc>
 8004f84:	4633      	mov	r3, r6
 8004f86:	e7ee      	b.n	8004f66 <strlcat+0x6>
 8004f88:	460b      	mov	r3, r1
 8004f8a:	461e      	mov	r6, r3
 8004f8c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8004f90:	b910      	cbnz	r0, 8004f98 <strlcat+0x38>
 8004f92:	7028      	strb	r0, [r5, #0]
 8004f94:	1a58      	subs	r0, r3, r1
 8004f96:	e7ef      	b.n	8004f78 <strlcat+0x18>
 8004f98:	2a01      	cmp	r2, #1
 8004f9a:	bf1e      	ittt	ne
 8004f9c:	7028      	strbne	r0, [r5, #0]
 8004f9e:	f102 32ff 	addne.w	r2, r2, #4294967295
 8004fa2:	3501      	addne	r5, #1
 8004fa4:	4633      	mov	r3, r6
 8004fa6:	e7f0      	b.n	8004f8a <strlcat+0x2a>

08004fa8 <strlcpy>:
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	460b      	mov	r3, r1
 8004fac:	b162      	cbz	r2, 8004fc8 <strlcpy+0x20>
 8004fae:	3a01      	subs	r2, #1
 8004fb0:	d008      	beq.n	8004fc4 <strlcpy+0x1c>
 8004fb2:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004fb6:	f800 4b01 	strb.w	r4, [r0], #1
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	d1f7      	bne.n	8004fae <strlcpy+0x6>
 8004fbe:	1a58      	subs	r0, r3, r1
 8004fc0:	3801      	subs	r0, #1
 8004fc2:	bd10      	pop	{r4, pc}
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	7002      	strb	r2, [r0, #0]
 8004fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d1fb      	bne.n	8004fc8 <strlcpy+0x20>
 8004fd0:	e7f5      	b.n	8004fbe <strlcpy+0x16>

08004fd2 <strncmp>:
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	b16a      	cbz	r2, 8004ff2 <strncmp+0x20>
 8004fd6:	3901      	subs	r1, #1
 8004fd8:	1884      	adds	r4, r0, r2
 8004fda:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004fde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d103      	bne.n	8004fee <strncmp+0x1c>
 8004fe6:	42a0      	cmp	r0, r4
 8004fe8:	d001      	beq.n	8004fee <strncmp+0x1c>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f5      	bne.n	8004fda <strncmp+0x8>
 8004fee:	1a98      	subs	r0, r3, r2
 8004ff0:	bd10      	pop	{r4, pc}
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	bd10      	pop	{r4, pc}

08004ff6 <strncpy>:
 8004ff6:	b570      	push	{r4, r5, r6, lr}
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	b902      	cbnz	r2, 8004ffe <strncpy+0x8>
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
 8004ffe:	4623      	mov	r3, r4
 8005000:	f811 5b01 	ldrb.w	r5, [r1], #1
 8005004:	f803 5b01 	strb.w	r5, [r3], #1
 8005008:	1e56      	subs	r6, r2, #1
 800500a:	b91d      	cbnz	r5, 8005014 <strncpy+0x1e>
 800500c:	4414      	add	r4, r2
 800500e:	42a3      	cmp	r3, r4
 8005010:	d103      	bne.n	800501a <strncpy+0x24>
 8005012:	bd70      	pop	{r4, r5, r6, pc}
 8005014:	461c      	mov	r4, r3
 8005016:	4632      	mov	r2, r6
 8005018:	e7ef      	b.n	8004ffa <strncpy+0x4>
 800501a:	f803 5b01 	strb.w	r5, [r3], #1
 800501e:	e7f6      	b.n	800500e <strncpy+0x18>

08005020 <strtok>:
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <strtok+0x50>)
 8005022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005026:	681d      	ldr	r5, [r3, #0]
 8005028:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800502a:	4606      	mov	r6, r0
 800502c:	460f      	mov	r7, r1
 800502e:	b9b4      	cbnz	r4, 800505e <strtok+0x3e>
 8005030:	2050      	movs	r0, #80	; 0x50
 8005032:	f000 f8e3 	bl	80051fc <malloc>
 8005036:	65a8      	str	r0, [r5, #88]	; 0x58
 8005038:	6004      	str	r4, [r0, #0]
 800503a:	6044      	str	r4, [r0, #4]
 800503c:	6084      	str	r4, [r0, #8]
 800503e:	60c4      	str	r4, [r0, #12]
 8005040:	6104      	str	r4, [r0, #16]
 8005042:	6144      	str	r4, [r0, #20]
 8005044:	6184      	str	r4, [r0, #24]
 8005046:	6284      	str	r4, [r0, #40]	; 0x28
 8005048:	62c4      	str	r4, [r0, #44]	; 0x2c
 800504a:	6304      	str	r4, [r0, #48]	; 0x30
 800504c:	6344      	str	r4, [r0, #52]	; 0x34
 800504e:	6384      	str	r4, [r0, #56]	; 0x38
 8005050:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005052:	6404      	str	r4, [r0, #64]	; 0x40
 8005054:	6444      	str	r4, [r0, #68]	; 0x44
 8005056:	6484      	str	r4, [r0, #72]	; 0x48
 8005058:	64c4      	str	r4, [r0, #76]	; 0x4c
 800505a:	7704      	strb	r4, [r0, #28]
 800505c:	6244      	str	r4, [r0, #36]	; 0x24
 800505e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005060:	4639      	mov	r1, r7
 8005062:	4630      	mov	r0, r6
 8005064:	2301      	movs	r3, #1
 8005066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800506a:	f000 b803 	b.w	8005074 <__strtok_r>
 800506e:	bf00      	nop
 8005070:	20000014 	.word	0x20000014

08005074 <__strtok_r>:
 8005074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005076:	b918      	cbnz	r0, 8005080 <__strtok_r+0xc>
 8005078:	6810      	ldr	r0, [r2, #0]
 800507a:	b908      	cbnz	r0, 8005080 <__strtok_r+0xc>
 800507c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800507e:	4620      	mov	r0, r4
 8005080:	4604      	mov	r4, r0
 8005082:	460f      	mov	r7, r1
 8005084:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005088:	f817 6b01 	ldrb.w	r6, [r7], #1
 800508c:	b91e      	cbnz	r6, 8005096 <__strtok_r+0x22>
 800508e:	b965      	cbnz	r5, 80050aa <__strtok_r+0x36>
 8005090:	6015      	str	r5, [r2, #0]
 8005092:	4628      	mov	r0, r5
 8005094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005096:	42b5      	cmp	r5, r6
 8005098:	d1f6      	bne.n	8005088 <__strtok_r+0x14>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ef      	bne.n	800507e <__strtok_r+0xa>
 800509e:	6014      	str	r4, [r2, #0]
 80050a0:	7003      	strb	r3, [r0, #0]
 80050a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a4:	461c      	mov	r4, r3
 80050a6:	e00c      	b.n	80050c2 <__strtok_r+0x4e>
 80050a8:	b915      	cbnz	r5, 80050b0 <__strtok_r+0x3c>
 80050aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80050ae:	460e      	mov	r6, r1
 80050b0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	d1f7      	bne.n	80050a8 <__strtok_r+0x34>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f3      	beq.n	80050a4 <__strtok_r+0x30>
 80050bc:	2300      	movs	r3, #0
 80050be:	f804 3c01 	strb.w	r3, [r4, #-1]
 80050c2:	6014      	str	r4, [r2, #0]
 80050c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050c6 <_strtol_l.isra.0>:
 80050c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	4680      	mov	r8, r0
 80050cc:	4689      	mov	r9, r1
 80050ce:	4692      	mov	sl, r2
 80050d0:	461f      	mov	r7, r3
 80050d2:	468b      	mov	fp, r1
 80050d4:	465d      	mov	r5, fp
 80050d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80050dc:	f000 f88a 	bl	80051f4 <__locale_ctype_ptr_l>
 80050e0:	4420      	add	r0, r4
 80050e2:	7846      	ldrb	r6, [r0, #1]
 80050e4:	f016 0608 	ands.w	r6, r6, #8
 80050e8:	d10b      	bne.n	8005102 <_strtol_l.isra.0+0x3c>
 80050ea:	2c2d      	cmp	r4, #45	; 0x2d
 80050ec:	d10b      	bne.n	8005106 <_strtol_l.isra.0+0x40>
 80050ee:	782c      	ldrb	r4, [r5, #0]
 80050f0:	2601      	movs	r6, #1
 80050f2:	f10b 0502 	add.w	r5, fp, #2
 80050f6:	b167      	cbz	r7, 8005112 <_strtol_l.isra.0+0x4c>
 80050f8:	2f10      	cmp	r7, #16
 80050fa:	d114      	bne.n	8005126 <_strtol_l.isra.0+0x60>
 80050fc:	2c30      	cmp	r4, #48	; 0x30
 80050fe:	d00a      	beq.n	8005116 <_strtol_l.isra.0+0x50>
 8005100:	e011      	b.n	8005126 <_strtol_l.isra.0+0x60>
 8005102:	46ab      	mov	fp, r5
 8005104:	e7e6      	b.n	80050d4 <_strtol_l.isra.0+0xe>
 8005106:	2c2b      	cmp	r4, #43	; 0x2b
 8005108:	bf04      	itt	eq
 800510a:	782c      	ldrbeq	r4, [r5, #0]
 800510c:	f10b 0502 	addeq.w	r5, fp, #2
 8005110:	e7f1      	b.n	80050f6 <_strtol_l.isra.0+0x30>
 8005112:	2c30      	cmp	r4, #48	; 0x30
 8005114:	d127      	bne.n	8005166 <_strtol_l.isra.0+0xa0>
 8005116:	782b      	ldrb	r3, [r5, #0]
 8005118:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800511c:	2b58      	cmp	r3, #88	; 0x58
 800511e:	d14b      	bne.n	80051b8 <_strtol_l.isra.0+0xf2>
 8005120:	786c      	ldrb	r4, [r5, #1]
 8005122:	2710      	movs	r7, #16
 8005124:	3502      	adds	r5, #2
 8005126:	2e00      	cmp	r6, #0
 8005128:	bf0c      	ite	eq
 800512a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800512e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005132:	2200      	movs	r2, #0
 8005134:	fbb1 fef7 	udiv	lr, r1, r7
 8005138:	4610      	mov	r0, r2
 800513a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800513e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005142:	2b09      	cmp	r3, #9
 8005144:	d811      	bhi.n	800516a <_strtol_l.isra.0+0xa4>
 8005146:	461c      	mov	r4, r3
 8005148:	42a7      	cmp	r7, r4
 800514a:	dd1d      	ble.n	8005188 <_strtol_l.isra.0+0xc2>
 800514c:	1c53      	adds	r3, r2, #1
 800514e:	d007      	beq.n	8005160 <_strtol_l.isra.0+0x9a>
 8005150:	4586      	cmp	lr, r0
 8005152:	d316      	bcc.n	8005182 <_strtol_l.isra.0+0xbc>
 8005154:	d101      	bne.n	800515a <_strtol_l.isra.0+0x94>
 8005156:	45a4      	cmp	ip, r4
 8005158:	db13      	blt.n	8005182 <_strtol_l.isra.0+0xbc>
 800515a:	fb00 4007 	mla	r0, r0, r7, r4
 800515e:	2201      	movs	r2, #1
 8005160:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005164:	e7eb      	b.n	800513e <_strtol_l.isra.0+0x78>
 8005166:	270a      	movs	r7, #10
 8005168:	e7dd      	b.n	8005126 <_strtol_l.isra.0+0x60>
 800516a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800516e:	2b19      	cmp	r3, #25
 8005170:	d801      	bhi.n	8005176 <_strtol_l.isra.0+0xb0>
 8005172:	3c37      	subs	r4, #55	; 0x37
 8005174:	e7e8      	b.n	8005148 <_strtol_l.isra.0+0x82>
 8005176:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800517a:	2b19      	cmp	r3, #25
 800517c:	d804      	bhi.n	8005188 <_strtol_l.isra.0+0xc2>
 800517e:	3c57      	subs	r4, #87	; 0x57
 8005180:	e7e2      	b.n	8005148 <_strtol_l.isra.0+0x82>
 8005182:	f04f 32ff 	mov.w	r2, #4294967295
 8005186:	e7eb      	b.n	8005160 <_strtol_l.isra.0+0x9a>
 8005188:	1c53      	adds	r3, r2, #1
 800518a:	d108      	bne.n	800519e <_strtol_l.isra.0+0xd8>
 800518c:	2322      	movs	r3, #34	; 0x22
 800518e:	f8c8 3000 	str.w	r3, [r8]
 8005192:	4608      	mov	r0, r1
 8005194:	f1ba 0f00 	cmp.w	sl, #0
 8005198:	d107      	bne.n	80051aa <_strtol_l.isra.0+0xe4>
 800519a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519e:	b106      	cbz	r6, 80051a2 <_strtol_l.isra.0+0xdc>
 80051a0:	4240      	negs	r0, r0
 80051a2:	f1ba 0f00 	cmp.w	sl, #0
 80051a6:	d00c      	beq.n	80051c2 <_strtol_l.isra.0+0xfc>
 80051a8:	b122      	cbz	r2, 80051b4 <_strtol_l.isra.0+0xee>
 80051aa:	3d01      	subs	r5, #1
 80051ac:	f8ca 5000 	str.w	r5, [sl]
 80051b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b4:	464d      	mov	r5, r9
 80051b6:	e7f9      	b.n	80051ac <_strtol_l.isra.0+0xe6>
 80051b8:	2430      	movs	r4, #48	; 0x30
 80051ba:	2f00      	cmp	r7, #0
 80051bc:	d1b3      	bne.n	8005126 <_strtol_l.isra.0+0x60>
 80051be:	2708      	movs	r7, #8
 80051c0:	e7b1      	b.n	8005126 <_strtol_l.isra.0+0x60>
 80051c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080051c8 <strtol>:
 80051c8:	4b08      	ldr	r3, [pc, #32]	; (80051ec <strtol+0x24>)
 80051ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051cc:	681c      	ldr	r4, [r3, #0]
 80051ce:	4d08      	ldr	r5, [pc, #32]	; (80051f0 <strtol+0x28>)
 80051d0:	6a23      	ldr	r3, [r4, #32]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf08      	it	eq
 80051d6:	462b      	moveq	r3, r5
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	460a      	mov	r2, r1
 80051de:	4601      	mov	r1, r0
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff ff70 	bl	80050c6 <_strtol_l.isra.0>
 80051e6:	b003      	add	sp, #12
 80051e8:	bd30      	pop	{r4, r5, pc}
 80051ea:	bf00      	nop
 80051ec:	20000014 	.word	0x20000014
 80051f0:	20000078 	.word	0x20000078

080051f4 <__locale_ctype_ptr_l>:
 80051f4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80051f8:	4770      	bx	lr
	...

080051fc <malloc>:
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <malloc+0xc>)
 80051fe:	4601      	mov	r1, r0
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f000 b863 	b.w	80052cc <_malloc_r>
 8005206:	bf00      	nop
 8005208:	20000014 	.word	0x20000014

0800520c <__ascii_mbtowc>:
 800520c:	b082      	sub	sp, #8
 800520e:	b901      	cbnz	r1, 8005212 <__ascii_mbtowc+0x6>
 8005210:	a901      	add	r1, sp, #4
 8005212:	b142      	cbz	r2, 8005226 <__ascii_mbtowc+0x1a>
 8005214:	b14b      	cbz	r3, 800522a <__ascii_mbtowc+0x1e>
 8005216:	7813      	ldrb	r3, [r2, #0]
 8005218:	600b      	str	r3, [r1, #0]
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	1c10      	adds	r0, r2, #0
 800521e:	bf18      	it	ne
 8005220:	2001      	movne	r0, #1
 8005222:	b002      	add	sp, #8
 8005224:	4770      	bx	lr
 8005226:	4610      	mov	r0, r2
 8005228:	e7fb      	b.n	8005222 <__ascii_mbtowc+0x16>
 800522a:	f06f 0001 	mvn.w	r0, #1
 800522e:	e7f8      	b.n	8005222 <__ascii_mbtowc+0x16>

08005230 <_free_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4605      	mov	r5, r0
 8005234:	2900      	cmp	r1, #0
 8005236:	d045      	beq.n	80052c4 <_free_r+0x94>
 8005238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800523c:	1f0c      	subs	r4, r1, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfb8      	it	lt
 8005242:	18e4      	addlt	r4, r4, r3
 8005244:	f000 fbc8 	bl	80059d8 <__malloc_lock>
 8005248:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <_free_r+0x98>)
 800524a:	6813      	ldr	r3, [r2, #0]
 800524c:	4610      	mov	r0, r2
 800524e:	b933      	cbnz	r3, 800525e <_free_r+0x2e>
 8005250:	6063      	str	r3, [r4, #4]
 8005252:	6014      	str	r4, [r2, #0]
 8005254:	4628      	mov	r0, r5
 8005256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800525a:	f000 bbbe 	b.w	80059da <__malloc_unlock>
 800525e:	42a3      	cmp	r3, r4
 8005260:	d90c      	bls.n	800527c <_free_r+0x4c>
 8005262:	6821      	ldr	r1, [r4, #0]
 8005264:	1862      	adds	r2, r4, r1
 8005266:	4293      	cmp	r3, r2
 8005268:	bf04      	itt	eq
 800526a:	681a      	ldreq	r2, [r3, #0]
 800526c:	685b      	ldreq	r3, [r3, #4]
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	bf04      	itt	eq
 8005272:	1852      	addeq	r2, r2, r1
 8005274:	6022      	streq	r2, [r4, #0]
 8005276:	6004      	str	r4, [r0, #0]
 8005278:	e7ec      	b.n	8005254 <_free_r+0x24>
 800527a:	4613      	mov	r3, r2
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	b10a      	cbz	r2, 8005284 <_free_r+0x54>
 8005280:	42a2      	cmp	r2, r4
 8005282:	d9fa      	bls.n	800527a <_free_r+0x4a>
 8005284:	6819      	ldr	r1, [r3, #0]
 8005286:	1858      	adds	r0, r3, r1
 8005288:	42a0      	cmp	r0, r4
 800528a:	d10b      	bne.n	80052a4 <_free_r+0x74>
 800528c:	6820      	ldr	r0, [r4, #0]
 800528e:	4401      	add	r1, r0
 8005290:	1858      	adds	r0, r3, r1
 8005292:	4282      	cmp	r2, r0
 8005294:	6019      	str	r1, [r3, #0]
 8005296:	d1dd      	bne.n	8005254 <_free_r+0x24>
 8005298:	6810      	ldr	r0, [r2, #0]
 800529a:	6852      	ldr	r2, [r2, #4]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	4401      	add	r1, r0
 80052a0:	6019      	str	r1, [r3, #0]
 80052a2:	e7d7      	b.n	8005254 <_free_r+0x24>
 80052a4:	d902      	bls.n	80052ac <_free_r+0x7c>
 80052a6:	230c      	movs	r3, #12
 80052a8:	602b      	str	r3, [r5, #0]
 80052aa:	e7d3      	b.n	8005254 <_free_r+0x24>
 80052ac:	6820      	ldr	r0, [r4, #0]
 80052ae:	1821      	adds	r1, r4, r0
 80052b0:	428a      	cmp	r2, r1
 80052b2:	bf04      	itt	eq
 80052b4:	6811      	ldreq	r1, [r2, #0]
 80052b6:	6852      	ldreq	r2, [r2, #4]
 80052b8:	6062      	str	r2, [r4, #4]
 80052ba:	bf04      	itt	eq
 80052bc:	1809      	addeq	r1, r1, r0
 80052be:	6021      	streq	r1, [r4, #0]
 80052c0:	605c      	str	r4, [r3, #4]
 80052c2:	e7c7      	b.n	8005254 <_free_r+0x24>
 80052c4:	bd38      	pop	{r3, r4, r5, pc}
 80052c6:	bf00      	nop
 80052c8:	20000200 	.word	0x20000200

080052cc <_malloc_r>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	1ccd      	adds	r5, r1, #3
 80052d0:	f025 0503 	bic.w	r5, r5, #3
 80052d4:	3508      	adds	r5, #8
 80052d6:	2d0c      	cmp	r5, #12
 80052d8:	bf38      	it	cc
 80052da:	250c      	movcc	r5, #12
 80052dc:	2d00      	cmp	r5, #0
 80052de:	4606      	mov	r6, r0
 80052e0:	db01      	blt.n	80052e6 <_malloc_r+0x1a>
 80052e2:	42a9      	cmp	r1, r5
 80052e4:	d903      	bls.n	80052ee <_malloc_r+0x22>
 80052e6:	230c      	movs	r3, #12
 80052e8:	6033      	str	r3, [r6, #0]
 80052ea:	2000      	movs	r0, #0
 80052ec:	bd70      	pop	{r4, r5, r6, pc}
 80052ee:	f000 fb73 	bl	80059d8 <__malloc_lock>
 80052f2:	4a23      	ldr	r2, [pc, #140]	; (8005380 <_malloc_r+0xb4>)
 80052f4:	6814      	ldr	r4, [r2, #0]
 80052f6:	4621      	mov	r1, r4
 80052f8:	b991      	cbnz	r1, 8005320 <_malloc_r+0x54>
 80052fa:	4c22      	ldr	r4, [pc, #136]	; (8005384 <_malloc_r+0xb8>)
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	b91b      	cbnz	r3, 8005308 <_malloc_r+0x3c>
 8005300:	4630      	mov	r0, r6
 8005302:	f000 fb27 	bl	8005954 <_sbrk_r>
 8005306:	6020      	str	r0, [r4, #0]
 8005308:	4629      	mov	r1, r5
 800530a:	4630      	mov	r0, r6
 800530c:	f000 fb22 	bl	8005954 <_sbrk_r>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d126      	bne.n	8005362 <_malloc_r+0x96>
 8005314:	230c      	movs	r3, #12
 8005316:	6033      	str	r3, [r6, #0]
 8005318:	4630      	mov	r0, r6
 800531a:	f000 fb5e 	bl	80059da <__malloc_unlock>
 800531e:	e7e4      	b.n	80052ea <_malloc_r+0x1e>
 8005320:	680b      	ldr	r3, [r1, #0]
 8005322:	1b5b      	subs	r3, r3, r5
 8005324:	d41a      	bmi.n	800535c <_malloc_r+0x90>
 8005326:	2b0b      	cmp	r3, #11
 8005328:	d90f      	bls.n	800534a <_malloc_r+0x7e>
 800532a:	600b      	str	r3, [r1, #0]
 800532c:	50cd      	str	r5, [r1, r3]
 800532e:	18cc      	adds	r4, r1, r3
 8005330:	4630      	mov	r0, r6
 8005332:	f000 fb52 	bl	80059da <__malloc_unlock>
 8005336:	f104 000b 	add.w	r0, r4, #11
 800533a:	1d23      	adds	r3, r4, #4
 800533c:	f020 0007 	bic.w	r0, r0, #7
 8005340:	1ac3      	subs	r3, r0, r3
 8005342:	d01b      	beq.n	800537c <_malloc_r+0xb0>
 8005344:	425a      	negs	r2, r3
 8005346:	50e2      	str	r2, [r4, r3]
 8005348:	bd70      	pop	{r4, r5, r6, pc}
 800534a:	428c      	cmp	r4, r1
 800534c:	bf0d      	iteet	eq
 800534e:	6863      	ldreq	r3, [r4, #4]
 8005350:	684b      	ldrne	r3, [r1, #4]
 8005352:	6063      	strne	r3, [r4, #4]
 8005354:	6013      	streq	r3, [r2, #0]
 8005356:	bf18      	it	ne
 8005358:	460c      	movne	r4, r1
 800535a:	e7e9      	b.n	8005330 <_malloc_r+0x64>
 800535c:	460c      	mov	r4, r1
 800535e:	6849      	ldr	r1, [r1, #4]
 8005360:	e7ca      	b.n	80052f8 <_malloc_r+0x2c>
 8005362:	1cc4      	adds	r4, r0, #3
 8005364:	f024 0403 	bic.w	r4, r4, #3
 8005368:	42a0      	cmp	r0, r4
 800536a:	d005      	beq.n	8005378 <_malloc_r+0xac>
 800536c:	1a21      	subs	r1, r4, r0
 800536e:	4630      	mov	r0, r6
 8005370:	f000 faf0 	bl	8005954 <_sbrk_r>
 8005374:	3001      	adds	r0, #1
 8005376:	d0cd      	beq.n	8005314 <_malloc_r+0x48>
 8005378:	6025      	str	r5, [r4, #0]
 800537a:	e7d9      	b.n	8005330 <_malloc_r+0x64>
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	bf00      	nop
 8005380:	20000200 	.word	0x20000200
 8005384:	20000204 	.word	0x20000204

08005388 <__ssputs_r>:
 8005388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538c:	688e      	ldr	r6, [r1, #8]
 800538e:	429e      	cmp	r6, r3
 8005390:	4682      	mov	sl, r0
 8005392:	460c      	mov	r4, r1
 8005394:	4691      	mov	r9, r2
 8005396:	4698      	mov	r8, r3
 8005398:	d835      	bhi.n	8005406 <__ssputs_r+0x7e>
 800539a:	898a      	ldrh	r2, [r1, #12]
 800539c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053a0:	d031      	beq.n	8005406 <__ssputs_r+0x7e>
 80053a2:	6825      	ldr	r5, [r4, #0]
 80053a4:	6909      	ldr	r1, [r1, #16]
 80053a6:	1a6f      	subs	r7, r5, r1
 80053a8:	6965      	ldr	r5, [r4, #20]
 80053aa:	2302      	movs	r3, #2
 80053ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80053b4:	f108 0301 	add.w	r3, r8, #1
 80053b8:	443b      	add	r3, r7
 80053ba:	429d      	cmp	r5, r3
 80053bc:	bf38      	it	cc
 80053be:	461d      	movcc	r5, r3
 80053c0:	0553      	lsls	r3, r2, #21
 80053c2:	d531      	bpl.n	8005428 <__ssputs_r+0xa0>
 80053c4:	4629      	mov	r1, r5
 80053c6:	f7ff ff81 	bl	80052cc <_malloc_r>
 80053ca:	4606      	mov	r6, r0
 80053cc:	b950      	cbnz	r0, 80053e4 <__ssputs_r+0x5c>
 80053ce:	230c      	movs	r3, #12
 80053d0:	f8ca 3000 	str.w	r3, [sl]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e4:	463a      	mov	r2, r7
 80053e6:	6921      	ldr	r1, [r4, #16]
 80053e8:	f000 fad1 	bl	800598e <memcpy>
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	6126      	str	r6, [r4, #16]
 80053fa:	6165      	str	r5, [r4, #20]
 80053fc:	443e      	add	r6, r7
 80053fe:	1bed      	subs	r5, r5, r7
 8005400:	6026      	str	r6, [r4, #0]
 8005402:	60a5      	str	r5, [r4, #8]
 8005404:	4646      	mov	r6, r8
 8005406:	4546      	cmp	r6, r8
 8005408:	bf28      	it	cs
 800540a:	4646      	movcs	r6, r8
 800540c:	4632      	mov	r2, r6
 800540e:	4649      	mov	r1, r9
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	f000 fac7 	bl	80059a4 <memmove>
 8005416:	68a3      	ldr	r3, [r4, #8]
 8005418:	1b9b      	subs	r3, r3, r6
 800541a:	60a3      	str	r3, [r4, #8]
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	441e      	add	r6, r3
 8005420:	6026      	str	r6, [r4, #0]
 8005422:	2000      	movs	r0, #0
 8005424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005428:	462a      	mov	r2, r5
 800542a:	f000 fad7 	bl	80059dc <_realloc_r>
 800542e:	4606      	mov	r6, r0
 8005430:	2800      	cmp	r0, #0
 8005432:	d1e1      	bne.n	80053f8 <__ssputs_r+0x70>
 8005434:	6921      	ldr	r1, [r4, #16]
 8005436:	4650      	mov	r0, sl
 8005438:	f7ff fefa 	bl	8005230 <_free_r>
 800543c:	e7c7      	b.n	80053ce <__ssputs_r+0x46>
	...

08005440 <_svfiprintf_r>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	b09d      	sub	sp, #116	; 0x74
 8005446:	4680      	mov	r8, r0
 8005448:	9303      	str	r3, [sp, #12]
 800544a:	898b      	ldrh	r3, [r1, #12]
 800544c:	061c      	lsls	r4, r3, #24
 800544e:	460d      	mov	r5, r1
 8005450:	4616      	mov	r6, r2
 8005452:	d50f      	bpl.n	8005474 <_svfiprintf_r+0x34>
 8005454:	690b      	ldr	r3, [r1, #16]
 8005456:	b96b      	cbnz	r3, 8005474 <_svfiprintf_r+0x34>
 8005458:	2140      	movs	r1, #64	; 0x40
 800545a:	f7ff ff37 	bl	80052cc <_malloc_r>
 800545e:	6028      	str	r0, [r5, #0]
 8005460:	6128      	str	r0, [r5, #16]
 8005462:	b928      	cbnz	r0, 8005470 <_svfiprintf_r+0x30>
 8005464:	230c      	movs	r3, #12
 8005466:	f8c8 3000 	str.w	r3, [r8]
 800546a:	f04f 30ff 	mov.w	r0, #4294967295
 800546e:	e0c5      	b.n	80055fc <_svfiprintf_r+0x1bc>
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	616b      	str	r3, [r5, #20]
 8005474:	2300      	movs	r3, #0
 8005476:	9309      	str	r3, [sp, #36]	; 0x24
 8005478:	2320      	movs	r3, #32
 800547a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800547e:	2330      	movs	r3, #48	; 0x30
 8005480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005484:	f04f 0b01 	mov.w	fp, #1
 8005488:	4637      	mov	r7, r6
 800548a:	463c      	mov	r4, r7
 800548c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d13c      	bne.n	800550e <_svfiprintf_r+0xce>
 8005494:	ebb7 0a06 	subs.w	sl, r7, r6
 8005498:	d00b      	beq.n	80054b2 <_svfiprintf_r+0x72>
 800549a:	4653      	mov	r3, sl
 800549c:	4632      	mov	r2, r6
 800549e:	4629      	mov	r1, r5
 80054a0:	4640      	mov	r0, r8
 80054a2:	f7ff ff71 	bl	8005388 <__ssputs_r>
 80054a6:	3001      	adds	r0, #1
 80054a8:	f000 80a3 	beq.w	80055f2 <_svfiprintf_r+0x1b2>
 80054ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ae:	4453      	add	r3, sl
 80054b0:	9309      	str	r3, [sp, #36]	; 0x24
 80054b2:	783b      	ldrb	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 809c 	beq.w	80055f2 <_svfiprintf_r+0x1b2>
 80054ba:	2300      	movs	r3, #0
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	9307      	str	r3, [sp, #28]
 80054c4:	9205      	str	r2, [sp, #20]
 80054c6:	9306      	str	r3, [sp, #24]
 80054c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054cc:	931a      	str	r3, [sp, #104]	; 0x68
 80054ce:	2205      	movs	r2, #5
 80054d0:	7821      	ldrb	r1, [r4, #0]
 80054d2:	4850      	ldr	r0, [pc, #320]	; (8005614 <_svfiprintf_r+0x1d4>)
 80054d4:	f7fa fecc 	bl	8000270 <memchr>
 80054d8:	1c67      	adds	r7, r4, #1
 80054da:	9b04      	ldr	r3, [sp, #16]
 80054dc:	b9d8      	cbnz	r0, 8005516 <_svfiprintf_r+0xd6>
 80054de:	06d9      	lsls	r1, r3, #27
 80054e0:	bf44      	itt	mi
 80054e2:	2220      	movmi	r2, #32
 80054e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054e8:	071a      	lsls	r2, r3, #28
 80054ea:	bf44      	itt	mi
 80054ec:	222b      	movmi	r2, #43	; 0x2b
 80054ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054f2:	7822      	ldrb	r2, [r4, #0]
 80054f4:	2a2a      	cmp	r2, #42	; 0x2a
 80054f6:	d016      	beq.n	8005526 <_svfiprintf_r+0xe6>
 80054f8:	9a07      	ldr	r2, [sp, #28]
 80054fa:	2100      	movs	r1, #0
 80054fc:	200a      	movs	r0, #10
 80054fe:	4627      	mov	r7, r4
 8005500:	3401      	adds	r4, #1
 8005502:	783b      	ldrb	r3, [r7, #0]
 8005504:	3b30      	subs	r3, #48	; 0x30
 8005506:	2b09      	cmp	r3, #9
 8005508:	d951      	bls.n	80055ae <_svfiprintf_r+0x16e>
 800550a:	b1c9      	cbz	r1, 8005540 <_svfiprintf_r+0x100>
 800550c:	e011      	b.n	8005532 <_svfiprintf_r+0xf2>
 800550e:	2b25      	cmp	r3, #37	; 0x25
 8005510:	d0c0      	beq.n	8005494 <_svfiprintf_r+0x54>
 8005512:	4627      	mov	r7, r4
 8005514:	e7b9      	b.n	800548a <_svfiprintf_r+0x4a>
 8005516:	4a3f      	ldr	r2, [pc, #252]	; (8005614 <_svfiprintf_r+0x1d4>)
 8005518:	1a80      	subs	r0, r0, r2
 800551a:	fa0b f000 	lsl.w	r0, fp, r0
 800551e:	4318      	orrs	r0, r3
 8005520:	9004      	str	r0, [sp, #16]
 8005522:	463c      	mov	r4, r7
 8005524:	e7d3      	b.n	80054ce <_svfiprintf_r+0x8e>
 8005526:	9a03      	ldr	r2, [sp, #12]
 8005528:	1d11      	adds	r1, r2, #4
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	9103      	str	r1, [sp, #12]
 800552e:	2a00      	cmp	r2, #0
 8005530:	db01      	blt.n	8005536 <_svfiprintf_r+0xf6>
 8005532:	9207      	str	r2, [sp, #28]
 8005534:	e004      	b.n	8005540 <_svfiprintf_r+0x100>
 8005536:	4252      	negs	r2, r2
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	9207      	str	r2, [sp, #28]
 800553e:	9304      	str	r3, [sp, #16]
 8005540:	783b      	ldrb	r3, [r7, #0]
 8005542:	2b2e      	cmp	r3, #46	; 0x2e
 8005544:	d10e      	bne.n	8005564 <_svfiprintf_r+0x124>
 8005546:	787b      	ldrb	r3, [r7, #1]
 8005548:	2b2a      	cmp	r3, #42	; 0x2a
 800554a:	f107 0101 	add.w	r1, r7, #1
 800554e:	d132      	bne.n	80055b6 <_svfiprintf_r+0x176>
 8005550:	9b03      	ldr	r3, [sp, #12]
 8005552:	1d1a      	adds	r2, r3, #4
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	9203      	str	r2, [sp, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	bfb8      	it	lt
 800555c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005560:	3702      	adds	r7, #2
 8005562:	9305      	str	r3, [sp, #20]
 8005564:	4c2c      	ldr	r4, [pc, #176]	; (8005618 <_svfiprintf_r+0x1d8>)
 8005566:	7839      	ldrb	r1, [r7, #0]
 8005568:	2203      	movs	r2, #3
 800556a:	4620      	mov	r0, r4
 800556c:	f7fa fe80 	bl	8000270 <memchr>
 8005570:	b138      	cbz	r0, 8005582 <_svfiprintf_r+0x142>
 8005572:	2340      	movs	r3, #64	; 0x40
 8005574:	1b00      	subs	r0, r0, r4
 8005576:	fa03 f000 	lsl.w	r0, r3, r0
 800557a:	9b04      	ldr	r3, [sp, #16]
 800557c:	4303      	orrs	r3, r0
 800557e:	9304      	str	r3, [sp, #16]
 8005580:	3701      	adds	r7, #1
 8005582:	7839      	ldrb	r1, [r7, #0]
 8005584:	4825      	ldr	r0, [pc, #148]	; (800561c <_svfiprintf_r+0x1dc>)
 8005586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800558a:	2206      	movs	r2, #6
 800558c:	1c7e      	adds	r6, r7, #1
 800558e:	f7fa fe6f 	bl	8000270 <memchr>
 8005592:	2800      	cmp	r0, #0
 8005594:	d035      	beq.n	8005602 <_svfiprintf_r+0x1c2>
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <_svfiprintf_r+0x1e0>)
 8005598:	b9fb      	cbnz	r3, 80055da <_svfiprintf_r+0x19a>
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	3307      	adds	r3, #7
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	3308      	adds	r3, #8
 80055a4:	9303      	str	r3, [sp, #12]
 80055a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a8:	444b      	add	r3, r9
 80055aa:	9309      	str	r3, [sp, #36]	; 0x24
 80055ac:	e76c      	b.n	8005488 <_svfiprintf_r+0x48>
 80055ae:	fb00 3202 	mla	r2, r0, r2, r3
 80055b2:	2101      	movs	r1, #1
 80055b4:	e7a3      	b.n	80054fe <_svfiprintf_r+0xbe>
 80055b6:	2300      	movs	r3, #0
 80055b8:	9305      	str	r3, [sp, #20]
 80055ba:	4618      	mov	r0, r3
 80055bc:	240a      	movs	r4, #10
 80055be:	460f      	mov	r7, r1
 80055c0:	3101      	adds	r1, #1
 80055c2:	783a      	ldrb	r2, [r7, #0]
 80055c4:	3a30      	subs	r2, #48	; 0x30
 80055c6:	2a09      	cmp	r2, #9
 80055c8:	d903      	bls.n	80055d2 <_svfiprintf_r+0x192>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0ca      	beq.n	8005564 <_svfiprintf_r+0x124>
 80055ce:	9005      	str	r0, [sp, #20]
 80055d0:	e7c8      	b.n	8005564 <_svfiprintf_r+0x124>
 80055d2:	fb04 2000 	mla	r0, r4, r0, r2
 80055d6:	2301      	movs	r3, #1
 80055d8:	e7f1      	b.n	80055be <_svfiprintf_r+0x17e>
 80055da:	ab03      	add	r3, sp, #12
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	462a      	mov	r2, r5
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <_svfiprintf_r+0x1e4>)
 80055e2:	a904      	add	r1, sp, #16
 80055e4:	4640      	mov	r0, r8
 80055e6:	f3af 8000 	nop.w
 80055ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80055ee:	4681      	mov	r9, r0
 80055f0:	d1d9      	bne.n	80055a6 <_svfiprintf_r+0x166>
 80055f2:	89ab      	ldrh	r3, [r5, #12]
 80055f4:	065b      	lsls	r3, r3, #25
 80055f6:	f53f af38 	bmi.w	800546a <_svfiprintf_r+0x2a>
 80055fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055fc:	b01d      	add	sp, #116	; 0x74
 80055fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005602:	ab03      	add	r3, sp, #12
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	462a      	mov	r2, r5
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <_svfiprintf_r+0x1e4>)
 800560a:	a904      	add	r1, sp, #16
 800560c:	4640      	mov	r0, r8
 800560e:	f000 f881 	bl	8005714 <_printf_i>
 8005612:	e7ea      	b.n	80055ea <_svfiprintf_r+0x1aa>
 8005614:	08005bba 	.word	0x08005bba
 8005618:	08005bc0 	.word	0x08005bc0
 800561c:	08005bc4 	.word	0x08005bc4
 8005620:	00000000 	.word	0x00000000
 8005624:	08005389 	.word	0x08005389

08005628 <_printf_common>:
 8005628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800562c:	4691      	mov	r9, r2
 800562e:	461f      	mov	r7, r3
 8005630:	688a      	ldr	r2, [r1, #8]
 8005632:	690b      	ldr	r3, [r1, #16]
 8005634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005638:	4293      	cmp	r3, r2
 800563a:	bfb8      	it	lt
 800563c:	4613      	movlt	r3, r2
 800563e:	f8c9 3000 	str.w	r3, [r9]
 8005642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005646:	4606      	mov	r6, r0
 8005648:	460c      	mov	r4, r1
 800564a:	b112      	cbz	r2, 8005652 <_printf_common+0x2a>
 800564c:	3301      	adds	r3, #1
 800564e:	f8c9 3000 	str.w	r3, [r9]
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	0699      	lsls	r1, r3, #26
 8005656:	bf42      	ittt	mi
 8005658:	f8d9 3000 	ldrmi.w	r3, [r9]
 800565c:	3302      	addmi	r3, #2
 800565e:	f8c9 3000 	strmi.w	r3, [r9]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	f015 0506 	ands.w	r5, r5, #6
 8005668:	d107      	bne.n	800567a <_printf_common+0x52>
 800566a:	f104 0a19 	add.w	sl, r4, #25
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	f8d9 2000 	ldr.w	r2, [r9]
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	429d      	cmp	r5, r3
 8005678:	db29      	blt.n	80056ce <_printf_common+0xa6>
 800567a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	3300      	adds	r3, #0
 8005682:	bf18      	it	ne
 8005684:	2301      	movne	r3, #1
 8005686:	0692      	lsls	r2, r2, #26
 8005688:	d42e      	bmi.n	80056e8 <_printf_common+0xc0>
 800568a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800568e:	4639      	mov	r1, r7
 8005690:	4630      	mov	r0, r6
 8005692:	47c0      	blx	r8
 8005694:	3001      	adds	r0, #1
 8005696:	d021      	beq.n	80056dc <_printf_common+0xb4>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	68e5      	ldr	r5, [r4, #12]
 800569c:	f8d9 2000 	ldr.w	r2, [r9]
 80056a0:	f003 0306 	and.w	r3, r3, #6
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	bf08      	it	eq
 80056a8:	1aad      	subeq	r5, r5, r2
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	6922      	ldr	r2, [r4, #16]
 80056ae:	bf0c      	ite	eq
 80056b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b4:	2500      	movne	r5, #0
 80056b6:	4293      	cmp	r3, r2
 80056b8:	bfc4      	itt	gt
 80056ba:	1a9b      	subgt	r3, r3, r2
 80056bc:	18ed      	addgt	r5, r5, r3
 80056be:	f04f 0900 	mov.w	r9, #0
 80056c2:	341a      	adds	r4, #26
 80056c4:	454d      	cmp	r5, r9
 80056c6:	d11b      	bne.n	8005700 <_printf_common+0xd8>
 80056c8:	2000      	movs	r0, #0
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	2301      	movs	r3, #1
 80056d0:	4652      	mov	r2, sl
 80056d2:	4639      	mov	r1, r7
 80056d4:	4630      	mov	r0, r6
 80056d6:	47c0      	blx	r8
 80056d8:	3001      	adds	r0, #1
 80056da:	d103      	bne.n	80056e4 <_printf_common+0xbc>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e4:	3501      	adds	r5, #1
 80056e6:	e7c2      	b.n	800566e <_printf_common+0x46>
 80056e8:	18e1      	adds	r1, r4, r3
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	2030      	movs	r0, #48	; 0x30
 80056ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056f2:	4422      	add	r2, r4
 80056f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056fc:	3302      	adds	r3, #2
 80056fe:	e7c4      	b.n	800568a <_printf_common+0x62>
 8005700:	2301      	movs	r3, #1
 8005702:	4622      	mov	r2, r4
 8005704:	4639      	mov	r1, r7
 8005706:	4630      	mov	r0, r6
 8005708:	47c0      	blx	r8
 800570a:	3001      	adds	r0, #1
 800570c:	d0e6      	beq.n	80056dc <_printf_common+0xb4>
 800570e:	f109 0901 	add.w	r9, r9, #1
 8005712:	e7d7      	b.n	80056c4 <_printf_common+0x9c>

08005714 <_printf_i>:
 8005714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005718:	4617      	mov	r7, r2
 800571a:	7e0a      	ldrb	r2, [r1, #24]
 800571c:	b085      	sub	sp, #20
 800571e:	2a6e      	cmp	r2, #110	; 0x6e
 8005720:	4698      	mov	r8, r3
 8005722:	4606      	mov	r6, r0
 8005724:	460c      	mov	r4, r1
 8005726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005728:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800572c:	f000 80bc 	beq.w	80058a8 <_printf_i+0x194>
 8005730:	d81a      	bhi.n	8005768 <_printf_i+0x54>
 8005732:	2a63      	cmp	r2, #99	; 0x63
 8005734:	d02e      	beq.n	8005794 <_printf_i+0x80>
 8005736:	d80a      	bhi.n	800574e <_printf_i+0x3a>
 8005738:	2a00      	cmp	r2, #0
 800573a:	f000 80c8 	beq.w	80058ce <_printf_i+0x1ba>
 800573e:	2a58      	cmp	r2, #88	; 0x58
 8005740:	f000 808a 	beq.w	8005858 <_printf_i+0x144>
 8005744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005748:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800574c:	e02a      	b.n	80057a4 <_printf_i+0x90>
 800574e:	2a64      	cmp	r2, #100	; 0x64
 8005750:	d001      	beq.n	8005756 <_printf_i+0x42>
 8005752:	2a69      	cmp	r2, #105	; 0x69
 8005754:	d1f6      	bne.n	8005744 <_printf_i+0x30>
 8005756:	6821      	ldr	r1, [r4, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800575e:	d023      	beq.n	80057a8 <_printf_i+0x94>
 8005760:	1d11      	adds	r1, r2, #4
 8005762:	6019      	str	r1, [r3, #0]
 8005764:	6813      	ldr	r3, [r2, #0]
 8005766:	e027      	b.n	80057b8 <_printf_i+0xa4>
 8005768:	2a73      	cmp	r2, #115	; 0x73
 800576a:	f000 80b4 	beq.w	80058d6 <_printf_i+0x1c2>
 800576e:	d808      	bhi.n	8005782 <_printf_i+0x6e>
 8005770:	2a6f      	cmp	r2, #111	; 0x6f
 8005772:	d02a      	beq.n	80057ca <_printf_i+0xb6>
 8005774:	2a70      	cmp	r2, #112	; 0x70
 8005776:	d1e5      	bne.n	8005744 <_printf_i+0x30>
 8005778:	680a      	ldr	r2, [r1, #0]
 800577a:	f042 0220 	orr.w	r2, r2, #32
 800577e:	600a      	str	r2, [r1, #0]
 8005780:	e003      	b.n	800578a <_printf_i+0x76>
 8005782:	2a75      	cmp	r2, #117	; 0x75
 8005784:	d021      	beq.n	80057ca <_printf_i+0xb6>
 8005786:	2a78      	cmp	r2, #120	; 0x78
 8005788:	d1dc      	bne.n	8005744 <_printf_i+0x30>
 800578a:	2278      	movs	r2, #120	; 0x78
 800578c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005790:	496e      	ldr	r1, [pc, #440]	; (800594c <_printf_i+0x238>)
 8005792:	e064      	b.n	800585e <_printf_i+0x14a>
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800579a:	1d11      	adds	r1, r2, #4
 800579c:	6019      	str	r1, [r3, #0]
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a4:	2301      	movs	r3, #1
 80057a6:	e0a3      	b.n	80058f0 <_printf_i+0x1dc>
 80057a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80057ac:	f102 0104 	add.w	r1, r2, #4
 80057b0:	6019      	str	r1, [r3, #0]
 80057b2:	d0d7      	beq.n	8005764 <_printf_i+0x50>
 80057b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da03      	bge.n	80057c4 <_printf_i+0xb0>
 80057bc:	222d      	movs	r2, #45	; 0x2d
 80057be:	425b      	negs	r3, r3
 80057c0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057c4:	4962      	ldr	r1, [pc, #392]	; (8005950 <_printf_i+0x23c>)
 80057c6:	220a      	movs	r2, #10
 80057c8:	e017      	b.n	80057fa <_printf_i+0xe6>
 80057ca:	6820      	ldr	r0, [r4, #0]
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80057d2:	d003      	beq.n	80057dc <_printf_i+0xc8>
 80057d4:	1d08      	adds	r0, r1, #4
 80057d6:	6018      	str	r0, [r3, #0]
 80057d8:	680b      	ldr	r3, [r1, #0]
 80057da:	e006      	b.n	80057ea <_printf_i+0xd6>
 80057dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057e0:	f101 0004 	add.w	r0, r1, #4
 80057e4:	6018      	str	r0, [r3, #0]
 80057e6:	d0f7      	beq.n	80057d8 <_printf_i+0xc4>
 80057e8:	880b      	ldrh	r3, [r1, #0]
 80057ea:	4959      	ldr	r1, [pc, #356]	; (8005950 <_printf_i+0x23c>)
 80057ec:	2a6f      	cmp	r2, #111	; 0x6f
 80057ee:	bf14      	ite	ne
 80057f0:	220a      	movne	r2, #10
 80057f2:	2208      	moveq	r2, #8
 80057f4:	2000      	movs	r0, #0
 80057f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80057fa:	6865      	ldr	r5, [r4, #4]
 80057fc:	60a5      	str	r5, [r4, #8]
 80057fe:	2d00      	cmp	r5, #0
 8005800:	f2c0 809c 	blt.w	800593c <_printf_i+0x228>
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	f020 0004 	bic.w	r0, r0, #4
 800580a:	6020      	str	r0, [r4, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d13f      	bne.n	8005890 <_printf_i+0x17c>
 8005810:	2d00      	cmp	r5, #0
 8005812:	f040 8095 	bne.w	8005940 <_printf_i+0x22c>
 8005816:	4675      	mov	r5, lr
 8005818:	2a08      	cmp	r2, #8
 800581a:	d10b      	bne.n	8005834 <_printf_i+0x120>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	07da      	lsls	r2, r3, #31
 8005820:	d508      	bpl.n	8005834 <_printf_i+0x120>
 8005822:	6923      	ldr	r3, [r4, #16]
 8005824:	6862      	ldr	r2, [r4, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	bfde      	ittt	le
 800582a:	2330      	movle	r3, #48	; 0x30
 800582c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005830:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005834:	ebae 0305 	sub.w	r3, lr, r5
 8005838:	6123      	str	r3, [r4, #16]
 800583a:	f8cd 8000 	str.w	r8, [sp]
 800583e:	463b      	mov	r3, r7
 8005840:	aa03      	add	r2, sp, #12
 8005842:	4621      	mov	r1, r4
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff feef 	bl	8005628 <_printf_common>
 800584a:	3001      	adds	r0, #1
 800584c:	d155      	bne.n	80058fa <_printf_i+0x1e6>
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	b005      	add	sp, #20
 8005854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005858:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800585c:	493c      	ldr	r1, [pc, #240]	; (8005950 <_printf_i+0x23c>)
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005866:	f100 0504 	add.w	r5, r0, #4
 800586a:	601d      	str	r5, [r3, #0]
 800586c:	d001      	beq.n	8005872 <_printf_i+0x15e>
 800586e:	6803      	ldr	r3, [r0, #0]
 8005870:	e002      	b.n	8005878 <_printf_i+0x164>
 8005872:	0655      	lsls	r5, r2, #25
 8005874:	d5fb      	bpl.n	800586e <_printf_i+0x15a>
 8005876:	8803      	ldrh	r3, [r0, #0]
 8005878:	07d0      	lsls	r0, r2, #31
 800587a:	bf44      	itt	mi
 800587c:	f042 0220 	orrmi.w	r2, r2, #32
 8005880:	6022      	strmi	r2, [r4, #0]
 8005882:	b91b      	cbnz	r3, 800588c <_printf_i+0x178>
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	f022 0220 	bic.w	r2, r2, #32
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	2210      	movs	r2, #16
 800588e:	e7b1      	b.n	80057f4 <_printf_i+0xe0>
 8005890:	4675      	mov	r5, lr
 8005892:	fbb3 f0f2 	udiv	r0, r3, r2
 8005896:	fb02 3310 	mls	r3, r2, r0, r3
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80058a0:	4603      	mov	r3, r0
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d1f5      	bne.n	8005892 <_printf_i+0x17e>
 80058a6:	e7b7      	b.n	8005818 <_printf_i+0x104>
 80058a8:	6808      	ldr	r0, [r1, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	6949      	ldr	r1, [r1, #20]
 80058ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80058b2:	d004      	beq.n	80058be <_printf_i+0x1aa>
 80058b4:	1d10      	adds	r0, r2, #4
 80058b6:	6018      	str	r0, [r3, #0]
 80058b8:	6813      	ldr	r3, [r2, #0]
 80058ba:	6019      	str	r1, [r3, #0]
 80058bc:	e007      	b.n	80058ce <_printf_i+0x1ba>
 80058be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058c2:	f102 0004 	add.w	r0, r2, #4
 80058c6:	6018      	str	r0, [r3, #0]
 80058c8:	6813      	ldr	r3, [r2, #0]
 80058ca:	d0f6      	beq.n	80058ba <_printf_i+0x1a6>
 80058cc:	8019      	strh	r1, [r3, #0]
 80058ce:	2300      	movs	r3, #0
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	4675      	mov	r5, lr
 80058d4:	e7b1      	b.n	800583a <_printf_i+0x126>
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	1d11      	adds	r1, r2, #4
 80058da:	6019      	str	r1, [r3, #0]
 80058dc:	6815      	ldr	r5, [r2, #0]
 80058de:	6862      	ldr	r2, [r4, #4]
 80058e0:	2100      	movs	r1, #0
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7fa fcc4 	bl	8000270 <memchr>
 80058e8:	b108      	cbz	r0, 80058ee <_printf_i+0x1da>
 80058ea:	1b40      	subs	r0, r0, r5
 80058ec:	6060      	str	r0, [r4, #4]
 80058ee:	6863      	ldr	r3, [r4, #4]
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	2300      	movs	r3, #0
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f8:	e79f      	b.n	800583a <_printf_i+0x126>
 80058fa:	6923      	ldr	r3, [r4, #16]
 80058fc:	462a      	mov	r2, r5
 80058fe:	4639      	mov	r1, r7
 8005900:	4630      	mov	r0, r6
 8005902:	47c0      	blx	r8
 8005904:	3001      	adds	r0, #1
 8005906:	d0a2      	beq.n	800584e <_printf_i+0x13a>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	079b      	lsls	r3, r3, #30
 800590c:	d507      	bpl.n	800591e <_printf_i+0x20a>
 800590e:	2500      	movs	r5, #0
 8005910:	f104 0919 	add.w	r9, r4, #25
 8005914:	68e3      	ldr	r3, [r4, #12]
 8005916:	9a03      	ldr	r2, [sp, #12]
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	429d      	cmp	r5, r3
 800591c:	db05      	blt.n	800592a <_printf_i+0x216>
 800591e:	68e0      	ldr	r0, [r4, #12]
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	4298      	cmp	r0, r3
 8005924:	bfb8      	it	lt
 8005926:	4618      	movlt	r0, r3
 8005928:	e793      	b.n	8005852 <_printf_i+0x13e>
 800592a:	2301      	movs	r3, #1
 800592c:	464a      	mov	r2, r9
 800592e:	4639      	mov	r1, r7
 8005930:	4630      	mov	r0, r6
 8005932:	47c0      	blx	r8
 8005934:	3001      	adds	r0, #1
 8005936:	d08a      	beq.n	800584e <_printf_i+0x13a>
 8005938:	3501      	adds	r5, #1
 800593a:	e7eb      	b.n	8005914 <_printf_i+0x200>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1a7      	bne.n	8005890 <_printf_i+0x17c>
 8005940:	780b      	ldrb	r3, [r1, #0]
 8005942:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005946:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800594a:	e765      	b.n	8005818 <_printf_i+0x104>
 800594c:	08005bdc 	.word	0x08005bdc
 8005950:	08005bcb 	.word	0x08005bcb

08005954 <_sbrk_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4c06      	ldr	r4, [pc, #24]	; (8005970 <_sbrk_r+0x1c>)
 8005958:	2300      	movs	r3, #0
 800595a:	4605      	mov	r5, r0
 800595c:	4608      	mov	r0, r1
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	f000 f86c 	bl	8005a3c <_sbrk>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_sbrk_r+0x1a>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	b103      	cbz	r3, 800596e <_sbrk_r+0x1a>
 800596c:	602b      	str	r3, [r5, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	200004d4 	.word	0x200004d4

08005974 <__ascii_wctomb>:
 8005974:	b149      	cbz	r1, 800598a <__ascii_wctomb+0x16>
 8005976:	2aff      	cmp	r2, #255	; 0xff
 8005978:	bf85      	ittet	hi
 800597a:	238a      	movhi	r3, #138	; 0x8a
 800597c:	6003      	strhi	r3, [r0, #0]
 800597e:	700a      	strbls	r2, [r1, #0]
 8005980:	f04f 30ff 	movhi.w	r0, #4294967295
 8005984:	bf98      	it	ls
 8005986:	2001      	movls	r0, #1
 8005988:	4770      	bx	lr
 800598a:	4608      	mov	r0, r1
 800598c:	4770      	bx	lr

0800598e <memcpy>:
 800598e:	b510      	push	{r4, lr}
 8005990:	1e43      	subs	r3, r0, #1
 8005992:	440a      	add	r2, r1
 8005994:	4291      	cmp	r1, r2
 8005996:	d100      	bne.n	800599a <memcpy+0xc>
 8005998:	bd10      	pop	{r4, pc}
 800599a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800599e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a2:	e7f7      	b.n	8005994 <memcpy+0x6>

080059a4 <memmove>:
 80059a4:	4288      	cmp	r0, r1
 80059a6:	b510      	push	{r4, lr}
 80059a8:	eb01 0302 	add.w	r3, r1, r2
 80059ac:	d803      	bhi.n	80059b6 <memmove+0x12>
 80059ae:	1e42      	subs	r2, r0, #1
 80059b0:	4299      	cmp	r1, r3
 80059b2:	d10c      	bne.n	80059ce <memmove+0x2a>
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	4298      	cmp	r0, r3
 80059b8:	d2f9      	bcs.n	80059ae <memmove+0xa>
 80059ba:	1881      	adds	r1, r0, r2
 80059bc:	1ad2      	subs	r2, r2, r3
 80059be:	42d3      	cmn	r3, r2
 80059c0:	d100      	bne.n	80059c4 <memmove+0x20>
 80059c2:	bd10      	pop	{r4, pc}
 80059c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80059cc:	e7f7      	b.n	80059be <memmove+0x1a>
 80059ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80059d6:	e7eb      	b.n	80059b0 <memmove+0xc>

080059d8 <__malloc_lock>:
 80059d8:	4770      	bx	lr

080059da <__malloc_unlock>:
 80059da:	4770      	bx	lr

080059dc <_realloc_r>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	4607      	mov	r7, r0
 80059e0:	4614      	mov	r4, r2
 80059e2:	460e      	mov	r6, r1
 80059e4:	b921      	cbnz	r1, 80059f0 <_realloc_r+0x14>
 80059e6:	4611      	mov	r1, r2
 80059e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059ec:	f7ff bc6e 	b.w	80052cc <_malloc_r>
 80059f0:	b922      	cbnz	r2, 80059fc <_realloc_r+0x20>
 80059f2:	f7ff fc1d 	bl	8005230 <_free_r>
 80059f6:	4625      	mov	r5, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fc:	f000 f814 	bl	8005a28 <_malloc_usable_size_r>
 8005a00:	4284      	cmp	r4, r0
 8005a02:	d90f      	bls.n	8005a24 <_realloc_r+0x48>
 8005a04:	4621      	mov	r1, r4
 8005a06:	4638      	mov	r0, r7
 8005a08:	f7ff fc60 	bl	80052cc <_malloc_r>
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d0f2      	beq.n	80059f8 <_realloc_r+0x1c>
 8005a12:	4631      	mov	r1, r6
 8005a14:	4622      	mov	r2, r4
 8005a16:	f7ff ffba 	bl	800598e <memcpy>
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f7ff fc07 	bl	8005230 <_free_r>
 8005a22:	e7e9      	b.n	80059f8 <_realloc_r+0x1c>
 8005a24:	4635      	mov	r5, r6
 8005a26:	e7e7      	b.n	80059f8 <_realloc_r+0x1c>

08005a28 <_malloc_usable_size_r>:
 8005a28:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f1a0 0004 	sub.w	r0, r0, #4
 8005a32:	bfbc      	itt	lt
 8005a34:	580b      	ldrlt	r3, [r1, r0]
 8005a36:	18c0      	addlt	r0, r0, r3
 8005a38:	4770      	bx	lr
	...

08005a3c <_sbrk>:
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <_sbrk+0x14>)
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	4602      	mov	r2, r0
 8005a42:	b909      	cbnz	r1, 8005a48 <_sbrk+0xc>
 8005a44:	4903      	ldr	r1, [pc, #12]	; (8005a54 <_sbrk+0x18>)
 8005a46:	6019      	str	r1, [r3, #0]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	4402      	add	r2, r0
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	4770      	bx	lr
 8005a50:	20000208 	.word	0x20000208
 8005a54:	200004d8 	.word	0x200004d8

08005a58 <_init>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr

08005a64 <_fini>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr
